// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/alert/model/alert_category.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtm/alert/model/alert_category.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mtm {
namespace alert {
namespace model {

namespace {

const ::google::protobuf::Descriptor* AlertCategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlertCategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlertCategoryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlertCategoryList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto() {
  protobuf_AddDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mtm/alert/model/alert_category.proto");
  GOOGLE_CHECK(file != NULL);
  AlertCategory_descriptor_ = file->message_type(0);
  static const int AlertCategory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCategory, category_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCategory, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCategory, acronym_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCategory, removed_),
  };
  AlertCategory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AlertCategory_descriptor_,
      AlertCategory::default_instance_,
      AlertCategory_offsets_,
      -1,
      -1,
      -1,
      sizeof(AlertCategory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCategory, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCategory, _is_default_instance_));
  AlertCategoryList_descriptor_ = file->message_type(1);
  static const int AlertCategoryList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCategoryList, alert_categories_),
  };
  AlertCategoryList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AlertCategoryList_descriptor_,
      AlertCategoryList::default_instance_,
      AlertCategoryList_offsets_,
      -1,
      -1,
      -1,
      sizeof(AlertCategoryList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCategoryList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlertCategoryList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AlertCategory_descriptor_, &AlertCategory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AlertCategoryList_descriptor_, &AlertCategoryList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mtm_2falert_2fmodel_2falert_5fcategory_2eproto() {
  delete AlertCategory::default_instance_;
  delete AlertCategory_reflection_;
  delete AlertCategoryList::default_instance_;
  delete AlertCategoryList_reflection_;
}

void protobuf_AddDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fduration_2eproto();
  ::mtm::protobuf_AddDesc_mtm_2fcommon_5ftypes_2eproto();
  ::mtm::event::protobuf_AddDesc_mtm_2fevent_2fargument_5fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$mtm/alert/model/alert_category.proto\022\017"
    "mtm.alert.model\032\037google/protobuf/timesta"
    "mp.proto\032\036google/protobuf/duration.proto"
    "\032\026mtm/common_types.proto\032#mtm/event/argu"
    "ment_descriptor.proto\"g\n\rAlertCategory\022\036"
    "\n\013category_id\030\001 \001(\0132\t.mtm.Uuid\022\024\n\014displa"
    "y_name\030\002 \001(\t\022\017\n\007acronym\030\003 \001(\t\022\017\n\007removed"
    "\030\004 \001(\010\"M\n\021AlertCategoryList\0228\n\020alert_cat"
    "egories\030\001 \003(\0132\036.mtm.alert.model.AlertCat"
    "egoryb\006proto3", 373);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/alert/model/alert_category.proto", &protobuf_RegisterTypes);
  AlertCategory::default_instance_ = new AlertCategory();
  AlertCategoryList::default_instance_ = new AlertCategoryList();
  AlertCategory::default_instance_->InitAsDefaultInstance();
  AlertCategoryList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtm_2falert_2fmodel_2falert_5fcategory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtm_2falert_2fmodel_2falert_5fcategory_2eproto {
  StaticDescriptorInitializer_mtm_2falert_2fmodel_2falert_5fcategory_2eproto() {
    protobuf_AddDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto();
  }
} static_descriptor_initializer_mtm_2falert_2fmodel_2falert_5fcategory_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlertCategory::kCategoryIdFieldNumber;
const int AlertCategory::kDisplayNameFieldNumber;
const int AlertCategory::kAcronymFieldNumber;
const int AlertCategory::kRemovedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlertCategory::AlertCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.alert.model.AlertCategory)
}

void AlertCategory::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  category_id_ = const_cast< ::mtm::Uuid*>(&::mtm::Uuid::default_instance());
}

AlertCategory::AlertCategory(const AlertCategory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.alert.model.AlertCategory)
}

void AlertCategory::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  category_id_ = NULL;
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acronym_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  removed_ = false;
}

AlertCategory::~AlertCategory() {
  // @@protoc_insertion_point(destructor:mtm.alert.model.AlertCategory)
  SharedDtor();
}

void AlertCategory::SharedDtor() {
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acronym_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete category_id_;
  }
}

void AlertCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlertCategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlertCategory_descriptor_;
}

const AlertCategory& AlertCategory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto();
  return *default_instance_;
}

AlertCategory* AlertCategory::default_instance_ = NULL;

AlertCategory* AlertCategory::New(::google::protobuf::Arena* arena) const {
  AlertCategory* n = new AlertCategory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlertCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.alert.model.AlertCategory)
  if (GetArenaNoVirtual() == NULL && category_id_ != NULL) delete category_id_;
  category_id_ = NULL;
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acronym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  removed_ = false;
}

bool AlertCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.alert.model.AlertCategory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mtm.Uuid category_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_category_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_display_name;
        break;
      }

      // optional string display_name = 2;
      case 2: {
        if (tag == 18) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mtm.alert.model.AlertCategory.display_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_acronym;
        break;
      }

      // optional string acronym = 3;
      case 3: {
        if (tag == 26) {
         parse_acronym:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acronym()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->acronym().data(), this->acronym().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mtm.alert.model.AlertCategory.acronym"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_removed;
        break;
      }

      // optional bool removed = 4;
      case 4: {
        if (tag == 32) {
         parse_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.alert.model.AlertCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.alert.model.AlertCategory)
  return false;
#undef DO_
}

void AlertCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.alert.model.AlertCategory)
  // optional .mtm.Uuid category_id = 1;
  if (this->has_category_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->category_id_, output);
  }

  // optional string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mtm.alert.model.AlertCategory.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // optional string acronym = 3;
  if (this->acronym().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acronym().data(), this->acronym().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mtm.alert.model.AlertCategory.acronym");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->acronym(), output);
  }

  // optional bool removed = 4;
  if (this->removed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->removed(), output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.alert.model.AlertCategory)
}

::google::protobuf::uint8* AlertCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.alert.model.AlertCategory)
  // optional .mtm.Uuid category_id = 1;
  if (this->has_category_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->category_id_, false, target);
  }

  // optional string display_name = 2;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mtm.alert.model.AlertCategory.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->display_name(), target);
  }

  // optional string acronym = 3;
  if (this->acronym().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->acronym().data(), this->acronym().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mtm.alert.model.AlertCategory.acronym");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->acronym(), target);
  }

  // optional bool removed = 4;
  if (this->removed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->removed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.alert.model.AlertCategory)
  return target;
}

int AlertCategory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.alert.model.AlertCategory)
  int total_size = 0;

  // optional .mtm.Uuid category_id = 1;
  if (this->has_category_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->category_id_);
  }

  // optional string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // optional string acronym = 3;
  if (this->acronym().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->acronym());
  }

  // optional bool removed = 4;
  if (this->removed() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlertCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.alert.model.AlertCategory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AlertCategory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AlertCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.alert.model.AlertCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.alert.model.AlertCategory)
    MergeFrom(*source);
  }
}

void AlertCategory::MergeFrom(const AlertCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.alert.model.AlertCategory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_category_id()) {
    mutable_category_id()->::mtm::Uuid::MergeFrom(from.category_id());
  }
  if (from.display_name().size() > 0) {

    display_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  if (from.acronym().size() > 0) {

    acronym_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acronym_);
  }
  if (from.removed() != 0) {
    set_removed(from.removed());
  }
}

void AlertCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.alert.model.AlertCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlertCategory::CopyFrom(const AlertCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.alert.model.AlertCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlertCategory::IsInitialized() const {

  return true;
}

void AlertCategory::Swap(AlertCategory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlertCategory::InternalSwap(AlertCategory* other) {
  std::swap(category_id_, other->category_id_);
  display_name_.Swap(&other->display_name_);
  acronym_.Swap(&other->acronym_);
  std::swap(removed_, other->removed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlertCategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlertCategory_descriptor_;
  metadata.reflection = AlertCategory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlertCategory

// optional .mtm.Uuid category_id = 1;
bool AlertCategory::has_category_id() const {
  return !_is_default_instance_ && category_id_ != NULL;
}
void AlertCategory::clear_category_id() {
  if (GetArenaNoVirtual() == NULL && category_id_ != NULL) delete category_id_;
  category_id_ = NULL;
}
const ::mtm::Uuid& AlertCategory::category_id() const {
  // @@protoc_insertion_point(field_get:mtm.alert.model.AlertCategory.category_id)
  return category_id_ != NULL ? *category_id_ : *default_instance_->category_id_;
}
::mtm::Uuid* AlertCategory::mutable_category_id() {
  
  if (category_id_ == NULL) {
    category_id_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.alert.model.AlertCategory.category_id)
  return category_id_;
}
::mtm::Uuid* AlertCategory::release_category_id() {
  // @@protoc_insertion_point(field_release:mtm.alert.model.AlertCategory.category_id)
  
  ::mtm::Uuid* temp = category_id_;
  category_id_ = NULL;
  return temp;
}
void AlertCategory::set_allocated_category_id(::mtm::Uuid* category_id) {
  delete category_id_;
  category_id_ = category_id;
  if (category_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.alert.model.AlertCategory.category_id)
}

// optional string display_name = 2;
void AlertCategory::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AlertCategory::display_name() const {
  // @@protoc_insertion_point(field_get:mtm.alert.model.AlertCategory.display_name)
  return display_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AlertCategory::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.alert.model.AlertCategory.display_name)
}
 void AlertCategory::set_display_name(const char* value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.alert.model.AlertCategory.display_name)
}
 void AlertCategory::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.alert.model.AlertCategory.display_name)
}
 ::std::string* AlertCategory::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:mtm.alert.model.AlertCategory.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AlertCategory::release_display_name() {
  // @@protoc_insertion_point(field_release:mtm.alert.model.AlertCategory.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AlertCategory::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:mtm.alert.model.AlertCategory.display_name)
}

// optional string acronym = 3;
void AlertCategory::clear_acronym() {
  acronym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AlertCategory::acronym() const {
  // @@protoc_insertion_point(field_get:mtm.alert.model.AlertCategory.acronym)
  return acronym_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AlertCategory::set_acronym(const ::std::string& value) {
  
  acronym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.alert.model.AlertCategory.acronym)
}
 void AlertCategory::set_acronym(const char* value) {
  
  acronym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.alert.model.AlertCategory.acronym)
}
 void AlertCategory::set_acronym(const char* value, size_t size) {
  
  acronym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.alert.model.AlertCategory.acronym)
}
 ::std::string* AlertCategory::mutable_acronym() {
  
  // @@protoc_insertion_point(field_mutable:mtm.alert.model.AlertCategory.acronym)
  return acronym_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AlertCategory::release_acronym() {
  // @@protoc_insertion_point(field_release:mtm.alert.model.AlertCategory.acronym)
  
  return acronym_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AlertCategory::set_allocated_acronym(::std::string* acronym) {
  if (acronym != NULL) {
    
  } else {
    
  }
  acronym_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acronym);
  // @@protoc_insertion_point(field_set_allocated:mtm.alert.model.AlertCategory.acronym)
}

// optional bool removed = 4;
void AlertCategory::clear_removed() {
  removed_ = false;
}
 bool AlertCategory::removed() const {
  // @@protoc_insertion_point(field_get:mtm.alert.model.AlertCategory.removed)
  return removed_;
}
 void AlertCategory::set_removed(bool value) {
  
  removed_ = value;
  // @@protoc_insertion_point(field_set:mtm.alert.model.AlertCategory.removed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlertCategoryList::kAlertCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlertCategoryList::AlertCategoryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.alert.model.AlertCategoryList)
}

void AlertCategoryList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AlertCategoryList::AlertCategoryList(const AlertCategoryList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.alert.model.AlertCategoryList)
}

void AlertCategoryList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AlertCategoryList::~AlertCategoryList() {
  // @@protoc_insertion_point(destructor:mtm.alert.model.AlertCategoryList)
  SharedDtor();
}

void AlertCategoryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlertCategoryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlertCategoryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlertCategoryList_descriptor_;
}

const AlertCategoryList& AlertCategoryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto();
  return *default_instance_;
}

AlertCategoryList* AlertCategoryList::default_instance_ = NULL;

AlertCategoryList* AlertCategoryList::New(::google::protobuf::Arena* arena) const {
  AlertCategoryList* n = new AlertCategoryList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlertCategoryList::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.alert.model.AlertCategoryList)
  alert_categories_.Clear();
}

bool AlertCategoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.alert.model.AlertCategoryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mtm.alert.model.AlertCategory alert_categories = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_alert_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_alert_categories()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_alert_categories;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.alert.model.AlertCategoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.alert.model.AlertCategoryList)
  return false;
#undef DO_
}

void AlertCategoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.alert.model.AlertCategoryList)
  // repeated .mtm.alert.model.AlertCategory alert_categories = 1;
  for (unsigned int i = 0, n = this->alert_categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alert_categories(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.alert.model.AlertCategoryList)
}

::google::protobuf::uint8* AlertCategoryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.alert.model.AlertCategoryList)
  // repeated .mtm.alert.model.AlertCategory alert_categories = 1;
  for (unsigned int i = 0, n = this->alert_categories_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->alert_categories(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.alert.model.AlertCategoryList)
  return target;
}

int AlertCategoryList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.alert.model.AlertCategoryList)
  int total_size = 0;

  // repeated .mtm.alert.model.AlertCategory alert_categories = 1;
  total_size += 1 * this->alert_categories_size();
  for (int i = 0; i < this->alert_categories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alert_categories(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlertCategoryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.alert.model.AlertCategoryList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AlertCategoryList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AlertCategoryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.alert.model.AlertCategoryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.alert.model.AlertCategoryList)
    MergeFrom(*source);
  }
}

void AlertCategoryList::MergeFrom(const AlertCategoryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.alert.model.AlertCategoryList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  alert_categories_.MergeFrom(from.alert_categories_);
}

void AlertCategoryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.alert.model.AlertCategoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlertCategoryList::CopyFrom(const AlertCategoryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.alert.model.AlertCategoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlertCategoryList::IsInitialized() const {

  return true;
}

void AlertCategoryList::Swap(AlertCategoryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlertCategoryList::InternalSwap(AlertCategoryList* other) {
  alert_categories_.UnsafeArenaSwap(&other->alert_categories_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlertCategoryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlertCategoryList_descriptor_;
  metadata.reflection = AlertCategoryList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlertCategoryList

// repeated .mtm.alert.model.AlertCategory alert_categories = 1;
int AlertCategoryList::alert_categories_size() const {
  return alert_categories_.size();
}
void AlertCategoryList::clear_alert_categories() {
  alert_categories_.Clear();
}
const ::mtm::alert::model::AlertCategory& AlertCategoryList::alert_categories(int index) const {
  // @@protoc_insertion_point(field_get:mtm.alert.model.AlertCategoryList.alert_categories)
  return alert_categories_.Get(index);
}
::mtm::alert::model::AlertCategory* AlertCategoryList::mutable_alert_categories(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.alert.model.AlertCategoryList.alert_categories)
  return alert_categories_.Mutable(index);
}
::mtm::alert::model::AlertCategory* AlertCategoryList::add_alert_categories() {
  // @@protoc_insertion_point(field_add:mtm.alert.model.AlertCategoryList.alert_categories)
  return alert_categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::mtm::alert::model::AlertCategory >*
AlertCategoryList::mutable_alert_categories() {
  // @@protoc_insertion_point(field_mutable_list:mtm.alert.model.AlertCategoryList.alert_categories)
  return &alert_categories_;
}
const ::google::protobuf::RepeatedPtrField< ::mtm::alert::model::AlertCategory >&
AlertCategoryList::alert_categories() const {
  // @@protoc_insertion_point(field_list:mtm.alert.model.AlertCategoryList.alert_categories)
  return alert_categories_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace alert
}  // namespace mtm

// @@protoc_insertion_point(global_scope)
