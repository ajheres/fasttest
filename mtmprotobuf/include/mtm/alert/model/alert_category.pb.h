// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/alert/model/alert_category.proto

#ifndef PROTOBUF_mtm_2falert_2fmodel_2falert_5fcategory_2eproto__INCLUDED
#define PROTOBUF_mtm_2falert_2fmodel_2falert_5fcategory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
#include "mtm/common_types.pb.h"
#include "mtm/event/argument_descriptor.pb.h"
// @@protoc_insertion_point(includes)

namespace mtm {
namespace alert {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto();
void protobuf_AssignDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto();
void protobuf_ShutdownFile_mtm_2falert_2fmodel_2falert_5fcategory_2eproto();

class AlertCategory;
class AlertCategoryList;

// ===================================================================

class AlertCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.alert.model.AlertCategory) */ {
 public:
  AlertCategory();
  virtual ~AlertCategory();

  AlertCategory(const AlertCategory& from);

  inline AlertCategory& operator=(const AlertCategory& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlertCategory& default_instance();

  void Swap(AlertCategory* other);

  // implements Message ----------------------------------------------

  inline AlertCategory* New() const { return New(NULL); }

  AlertCategory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlertCategory& from);
  void MergeFrom(const AlertCategory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlertCategory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mtm.Uuid category_id = 1;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 1;
  const ::mtm::Uuid& category_id() const;
  ::mtm::Uuid* mutable_category_id();
  ::mtm::Uuid* release_category_id();
  void set_allocated_category_id(::mtm::Uuid* category_id);

  // optional string display_name = 2;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 2;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // optional string acronym = 3;
  void clear_acronym();
  static const int kAcronymFieldNumber = 3;
  const ::std::string& acronym() const;
  void set_acronym(const ::std::string& value);
  void set_acronym(const char* value);
  void set_acronym(const char* value, size_t size);
  ::std::string* mutable_acronym();
  ::std::string* release_acronym();
  void set_allocated_acronym(::std::string* acronym);

  // optional bool removed = 4;
  void clear_removed();
  static const int kRemovedFieldNumber = 4;
  bool removed() const;
  void set_removed(bool value);

  // @@protoc_insertion_point(class_scope:mtm.alert.model.AlertCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::mtm::Uuid* category_id_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr acronym_;
  bool removed_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto();
  friend void protobuf_AssignDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto();
  friend void protobuf_ShutdownFile_mtm_2falert_2fmodel_2falert_5fcategory_2eproto();

  void InitAsDefaultInstance();
  static AlertCategory* default_instance_;
};
// -------------------------------------------------------------------

class AlertCategoryList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.alert.model.AlertCategoryList) */ {
 public:
  AlertCategoryList();
  virtual ~AlertCategoryList();

  AlertCategoryList(const AlertCategoryList& from);

  inline AlertCategoryList& operator=(const AlertCategoryList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlertCategoryList& default_instance();

  void Swap(AlertCategoryList* other);

  // implements Message ----------------------------------------------

  inline AlertCategoryList* New() const { return New(NULL); }

  AlertCategoryList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlertCategoryList& from);
  void MergeFrom(const AlertCategoryList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlertCategoryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtm.alert.model.AlertCategory alert_categories = 1;
  int alert_categories_size() const;
  void clear_alert_categories();
  static const int kAlertCategoriesFieldNumber = 1;
  const ::mtm::alert::model::AlertCategory& alert_categories(int index) const;
  ::mtm::alert::model::AlertCategory* mutable_alert_categories(int index);
  ::mtm::alert::model::AlertCategory* add_alert_categories();
  ::google::protobuf::RepeatedPtrField< ::mtm::alert::model::AlertCategory >*
      mutable_alert_categories();
  const ::google::protobuf::RepeatedPtrField< ::mtm::alert::model::AlertCategory >&
      alert_categories() const;

  // @@protoc_insertion_point(class_scope:mtm.alert.model.AlertCategoryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::mtm::alert::model::AlertCategory > alert_categories_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto();
  friend void protobuf_AssignDesc_mtm_2falert_2fmodel_2falert_5fcategory_2eproto();
  friend void protobuf_ShutdownFile_mtm_2falert_2fmodel_2falert_5fcategory_2eproto();

  void InitAsDefaultInstance();
  static AlertCategoryList* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AlertCategory

// optional .mtm.Uuid category_id = 1;
inline bool AlertCategory::has_category_id() const {
  return !_is_default_instance_ && category_id_ != NULL;
}
inline void AlertCategory::clear_category_id() {
  if (GetArenaNoVirtual() == NULL && category_id_ != NULL) delete category_id_;
  category_id_ = NULL;
}
inline const ::mtm::Uuid& AlertCategory::category_id() const {
  // @@protoc_insertion_point(field_get:mtm.alert.model.AlertCategory.category_id)
  return category_id_ != NULL ? *category_id_ : *default_instance_->category_id_;
}
inline ::mtm::Uuid* AlertCategory::mutable_category_id() {
  
  if (category_id_ == NULL) {
    category_id_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.alert.model.AlertCategory.category_id)
  return category_id_;
}
inline ::mtm::Uuid* AlertCategory::release_category_id() {
  // @@protoc_insertion_point(field_release:mtm.alert.model.AlertCategory.category_id)
  
  ::mtm::Uuid* temp = category_id_;
  category_id_ = NULL;
  return temp;
}
inline void AlertCategory::set_allocated_category_id(::mtm::Uuid* category_id) {
  delete category_id_;
  category_id_ = category_id;
  if (category_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.alert.model.AlertCategory.category_id)
}

// optional string display_name = 2;
inline void AlertCategory::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlertCategory::display_name() const {
  // @@protoc_insertion_point(field_get:mtm.alert.model.AlertCategory.display_name)
  return display_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlertCategory::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.alert.model.AlertCategory.display_name)
}
inline void AlertCategory::set_display_name(const char* value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.alert.model.AlertCategory.display_name)
}
inline void AlertCategory::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.alert.model.AlertCategory.display_name)
}
inline ::std::string* AlertCategory::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:mtm.alert.model.AlertCategory.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlertCategory::release_display_name() {
  // @@protoc_insertion_point(field_release:mtm.alert.model.AlertCategory.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlertCategory::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:mtm.alert.model.AlertCategory.display_name)
}

// optional string acronym = 3;
inline void AlertCategory::clear_acronym() {
  acronym_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlertCategory::acronym() const {
  // @@protoc_insertion_point(field_get:mtm.alert.model.AlertCategory.acronym)
  return acronym_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlertCategory::set_acronym(const ::std::string& value) {
  
  acronym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.alert.model.AlertCategory.acronym)
}
inline void AlertCategory::set_acronym(const char* value) {
  
  acronym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.alert.model.AlertCategory.acronym)
}
inline void AlertCategory::set_acronym(const char* value, size_t size) {
  
  acronym_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.alert.model.AlertCategory.acronym)
}
inline ::std::string* AlertCategory::mutable_acronym() {
  
  // @@protoc_insertion_point(field_mutable:mtm.alert.model.AlertCategory.acronym)
  return acronym_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlertCategory::release_acronym() {
  // @@protoc_insertion_point(field_release:mtm.alert.model.AlertCategory.acronym)
  
  return acronym_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlertCategory::set_allocated_acronym(::std::string* acronym) {
  if (acronym != NULL) {
    
  } else {
    
  }
  acronym_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acronym);
  // @@protoc_insertion_point(field_set_allocated:mtm.alert.model.AlertCategory.acronym)
}

// optional bool removed = 4;
inline void AlertCategory::clear_removed() {
  removed_ = false;
}
inline bool AlertCategory::removed() const {
  // @@protoc_insertion_point(field_get:mtm.alert.model.AlertCategory.removed)
  return removed_;
}
inline void AlertCategory::set_removed(bool value) {
  
  removed_ = value;
  // @@protoc_insertion_point(field_set:mtm.alert.model.AlertCategory.removed)
}

// -------------------------------------------------------------------

// AlertCategoryList

// repeated .mtm.alert.model.AlertCategory alert_categories = 1;
inline int AlertCategoryList::alert_categories_size() const {
  return alert_categories_.size();
}
inline void AlertCategoryList::clear_alert_categories() {
  alert_categories_.Clear();
}
inline const ::mtm::alert::model::AlertCategory& AlertCategoryList::alert_categories(int index) const {
  // @@protoc_insertion_point(field_get:mtm.alert.model.AlertCategoryList.alert_categories)
  return alert_categories_.Get(index);
}
inline ::mtm::alert::model::AlertCategory* AlertCategoryList::mutable_alert_categories(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.alert.model.AlertCategoryList.alert_categories)
  return alert_categories_.Mutable(index);
}
inline ::mtm::alert::model::AlertCategory* AlertCategoryList::add_alert_categories() {
  // @@protoc_insertion_point(field_add:mtm.alert.model.AlertCategoryList.alert_categories)
  return alert_categories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::alert::model::AlertCategory >*
AlertCategoryList::mutable_alert_categories() {
  // @@protoc_insertion_point(field_mutable_list:mtm.alert.model.AlertCategoryList.alert_categories)
  return &alert_categories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::alert::model::AlertCategory >&
AlertCategoryList::alert_categories() const {
  // @@protoc_insertion_point(field_list:mtm.alert.model.AlertCategoryList.alert_categories)
  return alert_categories_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace alert
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mtm_2falert_2fmodel_2falert_5fcategory_2eproto__INCLUDED
