// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/messages/geo_message.proto

#include "mtm/geo/messages/geo_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Geography;
}  // namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto
namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_GeographyResource;
}  // namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto
namespace protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Visual;
}  // namespace protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto
namespace mtm {
namespace geo {
namespace messages {
class GeoMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeoMessage>
      _instance;
} _GeoMessage_default_instance_;
}  // namespace messages
}  // namespace geo
}  // namespace mtm
namespace protobuf_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto {
static void InitDefaultsGeoMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mtm::geo::messages::_GeoMessage_default_instance_;
    new (ptr) ::mtm::geo::messages::GeoMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mtm::geo::messages::GeoMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GeoMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGeoMessage}, {
      &protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::scc_info_Geography.base,
      &protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::scc_info_Visual.base,
      &protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::scc_info_GeographyResource.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GeoMessage.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::messages::GeoMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::messages::GeoMessage, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::messages::GeoMessage, operation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::messages::GeoMessage, geography_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::messages::GeoMessage, visual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::messages::GeoMessage, geography_resource_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mtm::geo::messages::GeoMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mtm::geo::messages::_GeoMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mtm/geo/messages/geo_message.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\"mtm/geo/messages/geo_message.proto\022\020mt"
      "m.geo.messages\032\035mtm/geo/model/geography."
      "proto\032%mtm/geo/model/geo_service_enums.p"
      "roto\032\032mtm/geo/model/visual.proto\032&mtm/ge"
      "o/model/geography_resource.proto\"\334\001\n\nGeo"
      "Message\022\017\n\007user_id\030\001 \001(\r\022+\n\toperation\030\002 "
      "\001(\0162\030.mtm.geo.model.Operation\022+\n\tgeograp"
      "hy\030\003 \001(\0132\030.mtm.geo.model.Geography\022%\n\006vi"
      "sual\030\004 \001(\0132\025.mtm.geo.model.Visual\022<\n\022geo"
      "graphy_resource\030\005 \001(\0132 .mtm.geo.model.Ge"
      "ographyResourceb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 423);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/geo/messages/geo_message.proto", &protobuf_RegisterTypes);
  ::protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::AddDescriptors();
  ::protobuf_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto::AddDescriptors();
  ::protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::AddDescriptors();
  ::protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto
namespace mtm {
namespace geo {
namespace messages {

// ===================================================================

void GeoMessage::InitAsDefaultInstance() {
  ::mtm::geo::messages::_GeoMessage_default_instance_._instance.get_mutable()->geography_ = const_cast< ::mtm::geo::model::Geography*>(
      ::mtm::geo::model::Geography::internal_default_instance());
  ::mtm::geo::messages::_GeoMessage_default_instance_._instance.get_mutable()->visual_ = const_cast< ::mtm::geo::model::Visual*>(
      ::mtm::geo::model::Visual::internal_default_instance());
  ::mtm::geo::messages::_GeoMessage_default_instance_._instance.get_mutable()->geography_resource_ = const_cast< ::mtm::geo::model::GeographyResource*>(
      ::mtm::geo::model::GeographyResource::internal_default_instance());
}
void GeoMessage::clear_geography() {
  if (GetArenaNoVirtual() == NULL && geography_ != NULL) {
    delete geography_;
  }
  geography_ = NULL;
}
void GeoMessage::clear_visual() {
  if (GetArenaNoVirtual() == NULL && visual_ != NULL) {
    delete visual_;
  }
  visual_ = NULL;
}
void GeoMessage::clear_geography_resource() {
  if (GetArenaNoVirtual() == NULL && geography_resource_ != NULL) {
    delete geography_resource_;
  }
  geography_resource_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoMessage::kUserIdFieldNumber;
const int GeoMessage::kOperationFieldNumber;
const int GeoMessage::kGeographyFieldNumber;
const int GeoMessage::kVisualFieldNumber;
const int GeoMessage::kGeographyResourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoMessage::GeoMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto::scc_info_GeoMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.messages.GeoMessage)
}
GeoMessage::GeoMessage(const GeoMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_geography()) {
    geography_ = new ::mtm::geo::model::Geography(*from.geography_);
  } else {
    geography_ = NULL;
  }
  if (from.has_visual()) {
    visual_ = new ::mtm::geo::model::Visual(*from.visual_);
  } else {
    visual_ = NULL;
  }
  if (from.has_geography_resource()) {
    geography_resource_ = new ::mtm::geo::model::GeographyResource(*from.geography_resource_);
  } else {
    geography_resource_ = NULL;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(operation_));
  // @@protoc_insertion_point(copy_constructor:mtm.geo.messages.GeoMessage)
}

void GeoMessage::SharedCtor() {
  ::memset(&geography_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&geography_)) + sizeof(operation_));
}

GeoMessage::~GeoMessage() {
  // @@protoc_insertion_point(destructor:mtm.geo.messages.GeoMessage)
  SharedDtor();
}

void GeoMessage::SharedDtor() {
  if (this != internal_default_instance()) delete geography_;
  if (this != internal_default_instance()) delete visual_;
  if (this != internal_default_instance()) delete geography_resource_;
}

void GeoMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeoMessage::descriptor() {
  ::protobuf_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeoMessage& GeoMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto::scc_info_GeoMessage.base);
  return *internal_default_instance();
}


void GeoMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.messages.GeoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && geography_ != NULL) {
    delete geography_;
  }
  geography_ = NULL;
  if (GetArenaNoVirtual() == NULL && visual_ != NULL) {
    delete visual_;
  }
  visual_ = NULL;
  if (GetArenaNoVirtual() == NULL && geography_resource_ != NULL) {
    delete geography_resource_;
  }
  geography_resource_ = NULL;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(operation_));
  _internal_metadata_.Clear();
}

bool GeoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.messages.GeoMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.geo.model.Operation operation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::mtm::geo::model::Operation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.geo.model.Geography geography = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geography()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.geo.model.Visual visual = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_visual()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.geo.model.GeographyResource geography_resource = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geography_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.messages.GeoMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.messages.GeoMessage)
  return false;
#undef DO_
}

void GeoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.messages.GeoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .mtm.geo.model.Operation operation = 2;
  if (this->operation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operation(), output);
  }

  // .mtm.geo.model.Geography geography = 3;
  if (this->has_geography()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_geography(), output);
  }

  // .mtm.geo.model.Visual visual = 4;
  if (this->has_visual()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_visual(), output);
  }

  // .mtm.geo.model.GeographyResource geography_resource = 5;
  if (this->has_geography_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_geography_resource(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mtm.geo.messages.GeoMessage)
}

::google::protobuf::uint8* GeoMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.messages.GeoMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // .mtm.geo.model.Operation operation = 2;
  if (this->operation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operation(), target);
  }

  // .mtm.geo.model.Geography geography = 3;
  if (this->has_geography()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_geography(), deterministic, target);
  }

  // .mtm.geo.model.Visual visual = 4;
  if (this->has_visual()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_visual(), deterministic, target);
  }

  // .mtm.geo.model.GeographyResource geography_resource = 5;
  if (this->has_geography_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_geography_resource(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.messages.GeoMessage)
  return target;
}

size_t GeoMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.messages.GeoMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mtm.geo.model.Geography geography = 3;
  if (this->has_geography()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *geography_);
  }

  // .mtm.geo.model.Visual visual = 4;
  if (this->has_visual()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *visual_);
  }

  // .mtm.geo.model.GeographyResource geography_resource = 5;
  if (this->has_geography_resource()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *geography_resource_);
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .mtm.geo.model.Operation operation = 2;
  if (this->operation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.messages.GeoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.messages.GeoMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.messages.GeoMessage)
    MergeFrom(*source);
  }
}

void GeoMessage::MergeFrom(const GeoMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.messages.GeoMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_geography()) {
    mutable_geography()->::mtm::geo::model::Geography::MergeFrom(from.geography());
  }
  if (from.has_visual()) {
    mutable_visual()->::mtm::geo::model::Visual::MergeFrom(from.visual());
  }
  if (from.has_geography_resource()) {
    mutable_geography_resource()->::mtm::geo::model::GeographyResource::MergeFrom(from.geography_resource());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
}

void GeoMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.messages.GeoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoMessage::CopyFrom(const GeoMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.messages.GeoMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoMessage::IsInitialized() const {
  return true;
}

void GeoMessage::Swap(GeoMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoMessage::InternalSwap(GeoMessage* other) {
  using std::swap;
  swap(geography_, other->geography_);
  swap(visual_, other->visual_);
  swap(geography_resource_, other->geography_resource_);
  swap(user_id_, other->user_id_);
  swap(operation_, other->operation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeoMessage::GetMetadata() const {
  protobuf_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace geo
}  // namespace mtm
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mtm::geo::messages::GeoMessage* Arena::CreateMaybeMessage< ::mtm::geo::messages::GeoMessage >(Arena* arena) {
  return Arena::CreateInternal< ::mtm::geo::messages::GeoMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
