// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/messages/geo_message.proto

#ifndef PROTOBUF_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto__INCLUDED
#define PROTOBUF_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "mtm/geo/model/geography.pb.h"
#include "mtm/geo/model/geo_service_enums.pb.h"
#include "mtm/geo/model/visual.pb.h"
#include "mtm/geo/model/geography_resource.pb.h"
// @@protoc_insertion_point(includes)

namespace mtm {
namespace geo {
namespace messages {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto();
void protobuf_AssignDesc_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto();
void protobuf_ShutdownFile_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto();

class GeoMessage;

// ===================================================================

class GeoMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.messages.GeoMessage) */ {
 public:
  GeoMessage();
  virtual ~GeoMessage();

  GeoMessage(const GeoMessage& from);

  inline GeoMessage& operator=(const GeoMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoMessage& default_instance();

  void Swap(GeoMessage* other);

  // implements Message ----------------------------------------------

  inline GeoMessage* New() const { return New(NULL); }

  GeoMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeoMessage& from);
  void MergeFrom(const GeoMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeoMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // optional .mtm.geo.model.Operation operation = 2;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  ::mtm::geo::model::Operation operation() const;
  void set_operation(::mtm::geo::model::Operation value);

  // optional .mtm.geo.model.Geography geography = 3;
  bool has_geography() const;
  void clear_geography();
  static const int kGeographyFieldNumber = 3;
  const ::mtm::geo::model::Geography& geography() const;
  ::mtm::geo::model::Geography* mutable_geography();
  ::mtm::geo::model::Geography* release_geography();
  void set_allocated_geography(::mtm::geo::model::Geography* geography);

  // optional .mtm.geo.model.Visual visual = 4;
  bool has_visual() const;
  void clear_visual();
  static const int kVisualFieldNumber = 4;
  const ::mtm::geo::model::Visual& visual() const;
  ::mtm::geo::model::Visual* mutable_visual();
  ::mtm::geo::model::Visual* release_visual();
  void set_allocated_visual(::mtm::geo::model::Visual* visual);

  // optional .mtm.geo.model.GeographyResource geography_resource = 5;
  bool has_geography_resource() const;
  void clear_geography_resource();
  static const int kGeographyResourceFieldNumber = 5;
  const ::mtm::geo::model::GeographyResource& geography_resource() const;
  ::mtm::geo::model::GeographyResource* mutable_geography_resource();
  ::mtm::geo::model::GeographyResource* release_geography_resource();
  void set_allocated_geography_resource(::mtm::geo::model::GeographyResource* geography_resource);

  // @@protoc_insertion_point(class_scope:mtm.geo.messages.GeoMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 user_id_;
  int operation_;
  ::mtm::geo::model::Geography* geography_;
  ::mtm::geo::model::Visual* visual_;
  ::mtm::geo::model::GeographyResource* geography_resource_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto();
  friend void protobuf_AssignDesc_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static GeoMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoMessage

// optional uint32 user_id = 1;
inline void GeoMessage::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 GeoMessage::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.messages.GeoMessage.user_id)
  return user_id_;
}
inline void GeoMessage::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.messages.GeoMessage.user_id)
}

// optional .mtm.geo.model.Operation operation = 2;
inline void GeoMessage::clear_operation() {
  operation_ = 0;
}
inline ::mtm::geo::model::Operation GeoMessage::operation() const {
  // @@protoc_insertion_point(field_get:mtm.geo.messages.GeoMessage.operation)
  return static_cast< ::mtm::geo::model::Operation >(operation_);
}
inline void GeoMessage::set_operation(::mtm::geo::model::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.messages.GeoMessage.operation)
}

// optional .mtm.geo.model.Geography geography = 3;
inline bool GeoMessage::has_geography() const {
  return !_is_default_instance_ && geography_ != NULL;
}
inline void GeoMessage::clear_geography() {
  if (GetArenaNoVirtual() == NULL && geography_ != NULL) delete geography_;
  geography_ = NULL;
}
inline const ::mtm::geo::model::Geography& GeoMessage::geography() const {
  // @@protoc_insertion_point(field_get:mtm.geo.messages.GeoMessage.geography)
  return geography_ != NULL ? *geography_ : *default_instance_->geography_;
}
inline ::mtm::geo::model::Geography* GeoMessage::mutable_geography() {
  
  if (geography_ == NULL) {
    geography_ = new ::mtm::geo::model::Geography;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.messages.GeoMessage.geography)
  return geography_;
}
inline ::mtm::geo::model::Geography* GeoMessage::release_geography() {
  // @@protoc_insertion_point(field_release:mtm.geo.messages.GeoMessage.geography)
  
  ::mtm::geo::model::Geography* temp = geography_;
  geography_ = NULL;
  return temp;
}
inline void GeoMessage::set_allocated_geography(::mtm::geo::model::Geography* geography) {
  delete geography_;
  geography_ = geography;
  if (geography) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.messages.GeoMessage.geography)
}

// optional .mtm.geo.model.Visual visual = 4;
inline bool GeoMessage::has_visual() const {
  return !_is_default_instance_ && visual_ != NULL;
}
inline void GeoMessage::clear_visual() {
  if (GetArenaNoVirtual() == NULL && visual_ != NULL) delete visual_;
  visual_ = NULL;
}
inline const ::mtm::geo::model::Visual& GeoMessage::visual() const {
  // @@protoc_insertion_point(field_get:mtm.geo.messages.GeoMessage.visual)
  return visual_ != NULL ? *visual_ : *default_instance_->visual_;
}
inline ::mtm::geo::model::Visual* GeoMessage::mutable_visual() {
  
  if (visual_ == NULL) {
    visual_ = new ::mtm::geo::model::Visual;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.messages.GeoMessage.visual)
  return visual_;
}
inline ::mtm::geo::model::Visual* GeoMessage::release_visual() {
  // @@protoc_insertion_point(field_release:mtm.geo.messages.GeoMessage.visual)
  
  ::mtm::geo::model::Visual* temp = visual_;
  visual_ = NULL;
  return temp;
}
inline void GeoMessage::set_allocated_visual(::mtm::geo::model::Visual* visual) {
  delete visual_;
  visual_ = visual;
  if (visual) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.messages.GeoMessage.visual)
}

// optional .mtm.geo.model.GeographyResource geography_resource = 5;
inline bool GeoMessage::has_geography_resource() const {
  return !_is_default_instance_ && geography_resource_ != NULL;
}
inline void GeoMessage::clear_geography_resource() {
  if (GetArenaNoVirtual() == NULL && geography_resource_ != NULL) delete geography_resource_;
  geography_resource_ = NULL;
}
inline const ::mtm::geo::model::GeographyResource& GeoMessage::geography_resource() const {
  // @@protoc_insertion_point(field_get:mtm.geo.messages.GeoMessage.geography_resource)
  return geography_resource_ != NULL ? *geography_resource_ : *default_instance_->geography_resource_;
}
inline ::mtm::geo::model::GeographyResource* GeoMessage::mutable_geography_resource() {
  
  if (geography_resource_ == NULL) {
    geography_resource_ = new ::mtm::geo::model::GeographyResource;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.messages.GeoMessage.geography_resource)
  return geography_resource_;
}
inline ::mtm::geo::model::GeographyResource* GeoMessage::release_geography_resource() {
  // @@protoc_insertion_point(field_release:mtm.geo.messages.GeoMessage.geography_resource)
  
  ::mtm::geo::model::GeographyResource* temp = geography_resource_;
  geography_resource_ = NULL;
  return temp;
}
inline void GeoMessage::set_allocated_geography_resource(::mtm::geo::model::GeographyResource* geography_resource) {
  delete geography_resource_;
  geography_resource_ = geography_resource;
  if (geography_resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.messages.GeoMessage.geography_resource)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace geo
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto__INCLUDED
