// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/messages/geo_message.proto

#ifndef PROTOBUF_INCLUDED_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto
#define PROTOBUF_INCLUDED_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mtm/geo/model/geography.pb.h"
#include "mtm/geo/model/geo_service_enums.pb.h"
#include "mtm/geo/model/visual.pb.h"
#include "mtm/geo/model/geography_resource.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto 

namespace protobuf_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto
namespace mtm {
namespace geo {
namespace messages {
class GeoMessage;
class GeoMessageDefaultTypeInternal;
extern GeoMessageDefaultTypeInternal _GeoMessage_default_instance_;
}  // namespace messages
}  // namespace geo
}  // namespace mtm
namespace google {
namespace protobuf {
template<> ::mtm::geo::messages::GeoMessage* Arena::CreateMaybeMessage<::mtm::geo::messages::GeoMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mtm {
namespace geo {
namespace messages {

// ===================================================================

class GeoMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.messages.GeoMessage) */ {
 public:
  GeoMessage();
  virtual ~GeoMessage();

  GeoMessage(const GeoMessage& from);

  inline GeoMessage& operator=(const GeoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoMessage(GeoMessage&& from) noexcept
    : GeoMessage() {
    *this = ::std::move(from);
  }

  inline GeoMessage& operator=(GeoMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoMessage* internal_default_instance() {
    return reinterpret_cast<const GeoMessage*>(
               &_GeoMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GeoMessage* other);
  friend void swap(GeoMessage& a, GeoMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoMessage* New() const final {
    return CreateMaybeMessage<GeoMessage>(NULL);
  }

  GeoMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeoMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeoMessage& from);
  void MergeFrom(const GeoMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.geo.model.Geography geography = 3;
  bool has_geography() const;
  void clear_geography();
  static const int kGeographyFieldNumber = 3;
  private:
  const ::mtm::geo::model::Geography& _internal_geography() const;
  public:
  const ::mtm::geo::model::Geography& geography() const;
  ::mtm::geo::model::Geography* release_geography();
  ::mtm::geo::model::Geography* mutable_geography();
  void set_allocated_geography(::mtm::geo::model::Geography* geography);

  // .mtm.geo.model.Visual visual = 4;
  bool has_visual() const;
  void clear_visual();
  static const int kVisualFieldNumber = 4;
  private:
  const ::mtm::geo::model::Visual& _internal_visual() const;
  public:
  const ::mtm::geo::model::Visual& visual() const;
  ::mtm::geo::model::Visual* release_visual();
  ::mtm::geo::model::Visual* mutable_visual();
  void set_allocated_visual(::mtm::geo::model::Visual* visual);

  // .mtm.geo.model.GeographyResource geography_resource = 5;
  bool has_geography_resource() const;
  void clear_geography_resource();
  static const int kGeographyResourceFieldNumber = 5;
  private:
  const ::mtm::geo::model::GeographyResource& _internal_geography_resource() const;
  public:
  const ::mtm::geo::model::GeographyResource& geography_resource() const;
  ::mtm::geo::model::GeographyResource* release_geography_resource();
  ::mtm::geo::model::GeographyResource* mutable_geography_resource();
  void set_allocated_geography_resource(::mtm::geo::model::GeographyResource* geography_resource);

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // .mtm.geo.model.Operation operation = 2;
  void clear_operation();
  static const int kOperationFieldNumber = 2;
  ::mtm::geo::model::Operation operation() const;
  void set_operation(::mtm::geo::model::Operation value);

  // @@protoc_insertion_point(class_scope:mtm.geo.messages.GeoMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::geo::model::Geography* geography_;
  ::mtm::geo::model::Visual* visual_;
  ::mtm::geo::model::GeographyResource* geography_resource_;
  ::google::protobuf::uint32 user_id_;
  int operation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeoMessage

// uint32 user_id = 1;
inline void GeoMessage::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 GeoMessage::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.messages.GeoMessage.user_id)
  return user_id_;
}
inline void GeoMessage::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.messages.GeoMessage.user_id)
}

// .mtm.geo.model.Operation operation = 2;
inline void GeoMessage::clear_operation() {
  operation_ = 0;
}
inline ::mtm::geo::model::Operation GeoMessage::operation() const {
  // @@protoc_insertion_point(field_get:mtm.geo.messages.GeoMessage.operation)
  return static_cast< ::mtm::geo::model::Operation >(operation_);
}
inline void GeoMessage::set_operation(::mtm::geo::model::Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.messages.GeoMessage.operation)
}

// .mtm.geo.model.Geography geography = 3;
inline bool GeoMessage::has_geography() const {
  return this != internal_default_instance() && geography_ != NULL;
}
inline const ::mtm::geo::model::Geography& GeoMessage::_internal_geography() const {
  return *geography_;
}
inline const ::mtm::geo::model::Geography& GeoMessage::geography() const {
  const ::mtm::geo::model::Geography* p = geography_;
  // @@protoc_insertion_point(field_get:mtm.geo.messages.GeoMessage.geography)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::geo::model::Geography*>(
      &::mtm::geo::model::_Geography_default_instance_);
}
inline ::mtm::geo::model::Geography* GeoMessage::release_geography() {
  // @@protoc_insertion_point(field_release:mtm.geo.messages.GeoMessage.geography)
  
  ::mtm::geo::model::Geography* temp = geography_;
  geography_ = NULL;
  return temp;
}
inline ::mtm::geo::model::Geography* GeoMessage::mutable_geography() {
  
  if (geography_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::geo::model::Geography>(GetArenaNoVirtual());
    geography_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.messages.GeoMessage.geography)
  return geography_;
}
inline void GeoMessage::set_allocated_geography(::mtm::geo::model::Geography* geography) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geography_);
  }
  if (geography) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geography = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geography, submessage_arena);
    }
    
  } else {
    
  }
  geography_ = geography;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.messages.GeoMessage.geography)
}

// .mtm.geo.model.Visual visual = 4;
inline bool GeoMessage::has_visual() const {
  return this != internal_default_instance() && visual_ != NULL;
}
inline const ::mtm::geo::model::Visual& GeoMessage::_internal_visual() const {
  return *visual_;
}
inline const ::mtm::geo::model::Visual& GeoMessage::visual() const {
  const ::mtm::geo::model::Visual* p = visual_;
  // @@protoc_insertion_point(field_get:mtm.geo.messages.GeoMessage.visual)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::geo::model::Visual*>(
      &::mtm::geo::model::_Visual_default_instance_);
}
inline ::mtm::geo::model::Visual* GeoMessage::release_visual() {
  // @@protoc_insertion_point(field_release:mtm.geo.messages.GeoMessage.visual)
  
  ::mtm::geo::model::Visual* temp = visual_;
  visual_ = NULL;
  return temp;
}
inline ::mtm::geo::model::Visual* GeoMessage::mutable_visual() {
  
  if (visual_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::geo::model::Visual>(GetArenaNoVirtual());
    visual_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.messages.GeoMessage.visual)
  return visual_;
}
inline void GeoMessage::set_allocated_visual(::mtm::geo::model::Visual* visual) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(visual_);
  }
  if (visual) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      visual = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, visual, submessage_arena);
    }
    
  } else {
    
  }
  visual_ = visual;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.messages.GeoMessage.visual)
}

// .mtm.geo.model.GeographyResource geography_resource = 5;
inline bool GeoMessage::has_geography_resource() const {
  return this != internal_default_instance() && geography_resource_ != NULL;
}
inline const ::mtm::geo::model::GeographyResource& GeoMessage::_internal_geography_resource() const {
  return *geography_resource_;
}
inline const ::mtm::geo::model::GeographyResource& GeoMessage::geography_resource() const {
  const ::mtm::geo::model::GeographyResource* p = geography_resource_;
  // @@protoc_insertion_point(field_get:mtm.geo.messages.GeoMessage.geography_resource)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::geo::model::GeographyResource*>(
      &::mtm::geo::model::_GeographyResource_default_instance_);
}
inline ::mtm::geo::model::GeographyResource* GeoMessage::release_geography_resource() {
  // @@protoc_insertion_point(field_release:mtm.geo.messages.GeoMessage.geography_resource)
  
  ::mtm::geo::model::GeographyResource* temp = geography_resource_;
  geography_resource_ = NULL;
  return temp;
}
inline ::mtm::geo::model::GeographyResource* GeoMessage::mutable_geography_resource() {
  
  if (geography_resource_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::geo::model::GeographyResource>(GetArenaNoVirtual());
    geography_resource_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.messages.GeoMessage.geography_resource)
  return geography_resource_;
}
inline void GeoMessage::set_allocated_geography_resource(::mtm::geo::model::GeographyResource* geography_resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geography_resource_);
  }
  if (geography_resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geography_resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geography_resource, submessage_arena);
    }
    
  } else {
    
  }
  geography_resource_ = geography_resource;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.messages.GeoMessage.geography_resource)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace geo
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mtm_2fgeo_2fmessages_2fgeo_5fmessage_2eproto
