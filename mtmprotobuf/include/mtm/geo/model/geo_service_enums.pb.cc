// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/geo_service_enums.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtm/geo/model/geo_service_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mtm {
namespace geo {
namespace model {

namespace {

const ::google::protobuf::EnumDescriptor* GeographyDashStyle_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GeographyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Permission_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GeographyResourceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Operation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto() {
  protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mtm/geo/model/geo_service_enums.proto");
  GOOGLE_CHECK(file != NULL);
  GeographyDashStyle_descriptor_ = file->enum_type(0);
  GeographyType_descriptor_ = file->enum_type(1);
  Permission_descriptor_ = file->enum_type(2);
  GeographyResourceType_descriptor_ = file->enum_type(3);
  Operation_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto() {
}

void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%mtm/geo/model/geo_service_enums.proto\022"
    "\rmtm.geo.model*\315\001\n\022GeographyDashStyle\022\034\n"
    "\030GEOGRAPHYDASHSTYLE_SOLID\020\000\022\033\n\027GEOGRAPHY"
    "DASHSTYLE_DASH\020\001\022\032\n\026GEOGRAPHYDASHSTYLE_D"
    "OT\020\002\022\036\n\032GEOGRAPHYDASHSTYLE_DASHDOT\020\003\022!\n\035"
    "GEOGRAPHYDASHSTYLE_DASHDOTDOT\020\004\022\035\n\031GEOGR"
    "APHYDASHSTYLE_CUSTOM\020\005*\345\001\n\rGeographyType"
    "\022\031\n\025GEOGRAPHYTYPE_UNKNOWN\020\000\022\027\n\023GEOGRAPHY"
    "TYPE_POINT\020\001\022\035\n\031GEOGRAPHYTYPE_LINE_STRIN"
    "G\020\002\022\031\n\025GEOGRAPHYTYPE_POLYGON\020\003\022\030\n\024GEOGRA"
    "PHYTYPE_CIRCLE\020\004\022\030\n\024GEOGRAPHYTYPE_SECTOR"
    "\020\005\022\027\n\023GEOGRAPHYTYPE_ROUTE\020\006\022\031\n\025GEOGRAPHY"
    "TYPE_OVERLAY\020\007*L\n\nPermission\022\023\n\017PERMISSI"
    "ON_NONE\020\000\022\023\n\017PERMISSION_READ\020\001\022\024\n\020PERMIS"
    "SION_WRITE\020\002*\\\n\025GeographyResourceType\022!\n"
    "\035GEOGRAPHYRESOURCETYPE_UNKNOWN\020\000\022 \n\034GEOG"
    "RAPHYRESOURCETYPE_BITMAP\020\001*`\n\tOperation\022"
    "\024\n\020OPERATION_UNKOWN\020\000\022\021\n\rOPERATION_ADD\020\001"
    "\022\024\n\020OPERATION_UPDATE\020\002\022\024\n\020OPERATION_REMO"
    "VE\020\003b\006proto3", 772);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/geo/model/geo_service_enums.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto {
  StaticDescriptorInitializer_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto() {
    protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto();
  }
} static_descriptor_initializer_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto_;
const ::google::protobuf::EnumDescriptor* GeographyDashStyle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeographyDashStyle_descriptor_;
}
bool GeographyDashStyle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GeographyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeographyType_descriptor_;
}
bool GeographyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Permission_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Permission_descriptor_;
}
bool Permission_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GeographyResourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeographyResourceType_descriptor_;
}
bool GeographyResourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_descriptor_;
}
bool Operation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace geo
}  // namespace mtm

// @@protoc_insertion_point(global_scope)
