// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/visual.proto

#ifndef PROTOBUF_INCLUDED_mtm_2fgeo_2fmodel_2fvisual_2eproto
#define PROTOBUF_INCLUDED_mtm_2fgeo_2fmodel_2fvisual_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "mtm/common_types.pb.h"
#include "mtm/geo/model/geo_service_enums.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto 

namespace protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto
namespace mtm {
namespace geo {
namespace model {
class Visual;
class VisualDefaultTypeInternal;
extern VisualDefaultTypeInternal _Visual_default_instance_;
class VisualList;
class VisualListDefaultTypeInternal;
extern VisualListDefaultTypeInternal _VisualList_default_instance_;
}  // namespace model
}  // namespace geo
}  // namespace mtm
namespace google {
namespace protobuf {
template<> ::mtm::geo::model::Visual* Arena::CreateMaybeMessage<::mtm::geo::model::Visual>(Arena*);
template<> ::mtm::geo::model::VisualList* Arena::CreateMaybeMessage<::mtm::geo::model::VisualList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mtm {
namespace geo {
namespace model {

// ===================================================================

class Visual : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.model.Visual) */ {
 public:
  Visual();
  virtual ~Visual();

  Visual(const Visual& from);

  inline Visual& operator=(const Visual& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Visual(Visual&& from) noexcept
    : Visual() {
    *this = ::std::move(from);
  }

  inline Visual& operator=(Visual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Visual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Visual* internal_default_instance() {
    return reinterpret_cast<const Visual*>(
               &_Visual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Visual* other);
  friend void swap(Visual& a, Visual& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Visual* New() const final {
    return CreateMaybeMessage<Visual>(NULL);
  }

  Visual* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Visual>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Visual& from);
  void MergeFrom(const Visual& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.Uuid id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::mtm::Uuid& _internal_id() const;
  public:
  const ::mtm::Uuid& id() const;
  ::mtm::Uuid* release_id();
  ::mtm::Uuid* mutable_id();
  void set_allocated_id(::mtm::Uuid* id);

  // .google.protobuf.Timestamp valid_from = 4;
  bool has_valid_from() const;
  void clear_valid_from();
  static const int kValidFromFieldNumber = 4;
  private:
  const ::google::protobuf::Timestamp& _internal_valid_from() const;
  public:
  const ::google::protobuf::Timestamp& valid_from() const;
  ::google::protobuf::Timestamp* release_valid_from();
  ::google::protobuf::Timestamp* mutable_valid_from();
  void set_allocated_valid_from(::google::protobuf::Timestamp* valid_from);

  // .google.protobuf.Timestamp valid_to = 5;
  bool has_valid_to() const;
  void clear_valid_to();
  static const int kValidToFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_valid_to() const;
  public:
  const ::google::protobuf::Timestamp& valid_to() const;
  ::google::protobuf::Timestamp* release_valid_to();
  ::google::protobuf::Timestamp* mutable_valid_to();
  void set_allocated_valid_to(::google::protobuf::Timestamp* valid_to);

  // .google.protobuf.StringValue texture = 7;
  bool has_texture() const;
  void clear_texture();
  static const int kTextureFieldNumber = 7;
  private:
  const ::google::protobuf::StringValue& _internal_texture() const;
  public:
  const ::google::protobuf::StringValue& texture() const;
  ::google::protobuf::StringValue* release_texture();
  ::google::protobuf::StringValue* mutable_texture();
  void set_allocated_texture(::google::protobuf::StringValue* texture);

  // .google.protobuf.StringValue text = 16;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 16;
  private:
  const ::google::protobuf::StringValue& _internal_text() const;
  public:
  const ::google::protobuf::StringValue& text() const;
  ::google::protobuf::StringValue* release_text();
  ::google::protobuf::StringValue* mutable_text();
  void set_allocated_text(::google::protobuf::StringValue* text);

  // int32 primary_key = 1;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 1;
  ::google::protobuf::int32 primary_key() const;
  void set_primary_key(::google::protobuf::int32 value);

  // uint32 owner = 3;
  void clear_owner();
  static const int kOwnerFieldNumber = 3;
  ::google::protobuf::uint32 owner() const;
  void set_owner(::google::protobuf::uint32 value);

  // int32 scale = 8;
  void clear_scale();
  static const int kScaleFieldNumber = 8;
  ::google::protobuf::int32 scale() const;
  void set_scale(::google::protobuf::int32 value);

  // int32 fill = 9;
  void clear_fill();
  static const int kFillFieldNumber = 9;
  ::google::protobuf::int32 fill() const;
  void set_fill(::google::protobuf::int32 value);

  // int32 stroke = 10;
  void clear_stroke();
  static const int kStrokeFieldNumber = 10;
  ::google::protobuf::int32 stroke() const;
  void set_stroke(::google::protobuf::int32 value);

  // float stroke_width = 11;
  void clear_stroke_width();
  static const int kStrokeWidthFieldNumber = 11;
  float stroke_width() const;
  void set_stroke_width(float value);

  // bool is_valid = 6;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 6;
  bool is_valid() const;
  void set_is_valid(bool value);

  // bool visible = 14;
  void clear_visible();
  static const int kVisibleFieldNumber = 14;
  bool visible() const;
  void set_visible(bool value);

  // bool show_text = 15;
  void clear_show_text();
  static const int kShowTextFieldNumber = 15;
  bool show_text() const;
  void set_show_text(bool value);

  // .mtm.geo.model.GeographyDashStyle stroke_style = 12;
  void clear_stroke_style();
  static const int kStrokeStyleFieldNumber = 12;
  ::mtm::geo::model::GeographyDashStyle stroke_style() const;
  void set_stroke_style(::mtm::geo::model::GeographyDashStyle value);

  // int32 priority = 13;
  void clear_priority();
  static const int kPriorityFieldNumber = 13;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mtm.geo.model.Visual)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::Uuid* id_;
  ::google::protobuf::Timestamp* valid_from_;
  ::google::protobuf::Timestamp* valid_to_;
  ::google::protobuf::StringValue* texture_;
  ::google::protobuf::StringValue* text_;
  ::google::protobuf::int32 primary_key_;
  ::google::protobuf::uint32 owner_;
  ::google::protobuf::int32 scale_;
  ::google::protobuf::int32 fill_;
  ::google::protobuf::int32 stroke_;
  float stroke_width_;
  bool is_valid_;
  bool visible_;
  bool show_text_;
  int stroke_style_;
  ::google::protobuf::int32 priority_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VisualList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.model.VisualList) */ {
 public:
  VisualList();
  virtual ~VisualList();

  VisualList(const VisualList& from);

  inline VisualList& operator=(const VisualList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VisualList(VisualList&& from) noexcept
    : VisualList() {
    *this = ::std::move(from);
  }

  inline VisualList& operator=(VisualList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VisualList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisualList* internal_default_instance() {
    return reinterpret_cast<const VisualList*>(
               &_VisualList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VisualList* other);
  friend void swap(VisualList& a, VisualList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VisualList* New() const final {
    return CreateMaybeMessage<VisualList>(NULL);
  }

  VisualList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VisualList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VisualList& from);
  void MergeFrom(const VisualList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisualList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtm.geo.model.Visual visuals = 1;
  int visuals_size() const;
  void clear_visuals();
  static const int kVisualsFieldNumber = 1;
  ::mtm::geo::model::Visual* mutable_visuals(int index);
  ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Visual >*
      mutable_visuals();
  const ::mtm::geo::model::Visual& visuals(int index) const;
  ::mtm::geo::model::Visual* add_visuals();
  const ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Visual >&
      visuals() const;

  // @@protoc_insertion_point(class_scope:mtm.geo.model.VisualList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Visual > visuals_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Visual

// int32 primary_key = 1;
inline void Visual::clear_primary_key() {
  primary_key_ = 0;
}
inline ::google::protobuf::int32 Visual::primary_key() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.primary_key)
  return primary_key_;
}
inline void Visual::set_primary_key(::google::protobuf::int32 value) {
  
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.primary_key)
}

// .mtm.Uuid id = 2;
inline bool Visual::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::mtm::Uuid& Visual::_internal_id() const {
  return *id_;
}
inline const ::mtm::Uuid& Visual::id() const {
  const ::mtm::Uuid* p = id_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.id)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::Uuid*>(
      &::mtm::_Uuid_default_instance_);
}
inline ::mtm::Uuid* Visual::release_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.id)
  
  ::mtm::Uuid* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::mtm::Uuid* Visual::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::Uuid>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.id)
  return id_;
}
inline void Visual::set_allocated_id(::mtm::Uuid* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.id)
}

// uint32 owner = 3;
inline void Visual::clear_owner() {
  owner_ = 0u;
}
inline ::google::protobuf::uint32 Visual::owner() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.owner)
  return owner_;
}
inline void Visual::set_owner(::google::protobuf::uint32 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.owner)
}

// .google.protobuf.Timestamp valid_from = 4;
inline bool Visual::has_valid_from() const {
  return this != internal_default_instance() && valid_from_ != NULL;
}
inline const ::google::protobuf::Timestamp& Visual::_internal_valid_from() const {
  return *valid_from_;
}
inline const ::google::protobuf::Timestamp& Visual::valid_from() const {
  const ::google::protobuf::Timestamp* p = valid_from_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.valid_from)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Visual::release_valid_from() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.valid_from)
  
  ::google::protobuf::Timestamp* temp = valid_from_;
  valid_from_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Visual::mutable_valid_from() {
  
  if (valid_from_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    valid_from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.valid_from)
  return valid_from_;
}
inline void Visual::set_allocated_valid_from(::google::protobuf::Timestamp* valid_from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(valid_from_);
  }
  if (valid_from) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(valid_from)->GetArena();
    if (message_arena != submessage_arena) {
      valid_from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, valid_from, submessage_arena);
    }
    
  } else {
    
  }
  valid_from_ = valid_from;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.valid_from)
}

// .google.protobuf.Timestamp valid_to = 5;
inline bool Visual::has_valid_to() const {
  return this != internal_default_instance() && valid_to_ != NULL;
}
inline const ::google::protobuf::Timestamp& Visual::_internal_valid_to() const {
  return *valid_to_;
}
inline const ::google::protobuf::Timestamp& Visual::valid_to() const {
  const ::google::protobuf::Timestamp* p = valid_to_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.valid_to)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Visual::release_valid_to() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.valid_to)
  
  ::google::protobuf::Timestamp* temp = valid_to_;
  valid_to_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Visual::mutable_valid_to() {
  
  if (valid_to_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    valid_to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.valid_to)
  return valid_to_;
}
inline void Visual::set_allocated_valid_to(::google::protobuf::Timestamp* valid_to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(valid_to_);
  }
  if (valid_to) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(valid_to)->GetArena();
    if (message_arena != submessage_arena) {
      valid_to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, valid_to, submessage_arena);
    }
    
  } else {
    
  }
  valid_to_ = valid_to;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.valid_to)
}

// bool is_valid = 6;
inline void Visual::clear_is_valid() {
  is_valid_ = false;
}
inline bool Visual::is_valid() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.is_valid)
  return is_valid_;
}
inline void Visual::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.is_valid)
}

// .google.protobuf.StringValue texture = 7;
inline bool Visual::has_texture() const {
  return this != internal_default_instance() && texture_ != NULL;
}
inline const ::google::protobuf::StringValue& Visual::_internal_texture() const {
  return *texture_;
}
inline const ::google::protobuf::StringValue& Visual::texture() const {
  const ::google::protobuf::StringValue* p = texture_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.texture)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* Visual::release_texture() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.texture)
  
  ::google::protobuf::StringValue* temp = texture_;
  texture_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* Visual::mutable_texture() {
  
  if (texture_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    texture_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.texture)
  return texture_;
}
inline void Visual::set_allocated_texture(::google::protobuf::StringValue* texture) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(texture_);
  }
  if (texture) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(texture)->GetArena();
    if (message_arena != submessage_arena) {
      texture = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, texture, submessage_arena);
    }
    
  } else {
    
  }
  texture_ = texture;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.texture)
}

// int32 scale = 8;
inline void Visual::clear_scale() {
  scale_ = 0;
}
inline ::google::protobuf::int32 Visual::scale() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.scale)
  return scale_;
}
inline void Visual::set_scale(::google::protobuf::int32 value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.scale)
}

// int32 fill = 9;
inline void Visual::clear_fill() {
  fill_ = 0;
}
inline ::google::protobuf::int32 Visual::fill() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.fill)
  return fill_;
}
inline void Visual::set_fill(::google::protobuf::int32 value) {
  
  fill_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.fill)
}

// int32 stroke = 10;
inline void Visual::clear_stroke() {
  stroke_ = 0;
}
inline ::google::protobuf::int32 Visual::stroke() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.stroke)
  return stroke_;
}
inline void Visual::set_stroke(::google::protobuf::int32 value) {
  
  stroke_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.stroke)
}

// float stroke_width = 11;
inline void Visual::clear_stroke_width() {
  stroke_width_ = 0;
}
inline float Visual::stroke_width() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.stroke_width)
  return stroke_width_;
}
inline void Visual::set_stroke_width(float value) {
  
  stroke_width_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.stroke_width)
}

// .mtm.geo.model.GeographyDashStyle stroke_style = 12;
inline void Visual::clear_stroke_style() {
  stroke_style_ = 0;
}
inline ::mtm::geo::model::GeographyDashStyle Visual::stroke_style() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.stroke_style)
  return static_cast< ::mtm::geo::model::GeographyDashStyle >(stroke_style_);
}
inline void Visual::set_stroke_style(::mtm::geo::model::GeographyDashStyle value) {
  
  stroke_style_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.stroke_style)
}

// int32 priority = 13;
inline void Visual::clear_priority() {
  priority_ = 0;
}
inline ::google::protobuf::int32 Visual::priority() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.priority)
  return priority_;
}
inline void Visual::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.priority)
}

// bool visible = 14;
inline void Visual::clear_visible() {
  visible_ = false;
}
inline bool Visual::visible() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.visible)
  return visible_;
}
inline void Visual::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.visible)
}

// bool show_text = 15;
inline void Visual::clear_show_text() {
  show_text_ = false;
}
inline bool Visual::show_text() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.show_text)
  return show_text_;
}
inline void Visual::set_show_text(bool value) {
  
  show_text_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.show_text)
}

// .google.protobuf.StringValue text = 16;
inline bool Visual::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline const ::google::protobuf::StringValue& Visual::_internal_text() const {
  return *text_;
}
inline const ::google::protobuf::StringValue& Visual::text() const {
  const ::google::protobuf::StringValue* p = text_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.text)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* Visual::release_text() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.text)
  
  ::google::protobuf::StringValue* temp = text_;
  text_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* Visual::mutable_text() {
  
  if (text_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.text)
  return text_;
}
inline void Visual::set_allocated_text(::google::protobuf::StringValue* text) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(text_);
  }
  if (text) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(text)->GetArena();
    if (message_arena != submessage_arena) {
      text = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.text)
}

// -------------------------------------------------------------------

// VisualList

// repeated .mtm.geo.model.Visual visuals = 1;
inline int VisualList::visuals_size() const {
  return visuals_.size();
}
inline void VisualList::clear_visuals() {
  visuals_.Clear();
}
inline ::mtm::geo::model::Visual* VisualList::mutable_visuals(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.VisualList.visuals)
  return visuals_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Visual >*
VisualList::mutable_visuals() {
  // @@protoc_insertion_point(field_mutable_list:mtm.geo.model.VisualList.visuals)
  return &visuals_;
}
inline const ::mtm::geo::model::Visual& VisualList::visuals(int index) const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.VisualList.visuals)
  return visuals_.Get(index);
}
inline ::mtm::geo::model::Visual* VisualList::add_visuals() {
  // @@protoc_insertion_point(field_add:mtm.geo.model.VisualList.visuals)
  return visuals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Visual >&
VisualList::visuals() const {
  // @@protoc_insertion_point(field_list:mtm.geo.model.VisualList.visuals)
  return visuals_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace geo
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mtm_2fgeo_2fmodel_2fvisual_2eproto
