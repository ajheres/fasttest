// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/visual.proto

#ifndef PROTOBUF_mtm_2fgeo_2fmodel_2fvisual_2eproto__INCLUDED
#define PROTOBUF_mtm_2fgeo_2fmodel_2fvisual_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "mtm/common_types.pb.h"
#include "mtm/geo/model/geo_service_enums.pb.h"
// @@protoc_insertion_point(includes)

namespace mtm {
namespace geo {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto();
void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto();
void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fvisual_2eproto();

class Visual;
class VisualList;

// ===================================================================

class Visual : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.model.Visual) */ {
 public:
  Visual();
  virtual ~Visual();

  Visual(const Visual& from);

  inline Visual& operator=(const Visual& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Visual& default_instance();

  void Swap(Visual* other);

  // implements Message ----------------------------------------------

  inline Visual* New() const { return New(NULL); }

  Visual* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Visual& from);
  void MergeFrom(const Visual& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Visual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 primary_key = 1;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 1;
  ::google::protobuf::int32 primary_key() const;
  void set_primary_key(::google::protobuf::int32 value);

  // optional .mtm.Uuid id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::mtm::Uuid& id() const;
  ::mtm::Uuid* mutable_id();
  ::mtm::Uuid* release_id();
  void set_allocated_id(::mtm::Uuid* id);

  // optional uint32 owner = 3;
  void clear_owner();
  static const int kOwnerFieldNumber = 3;
  ::google::protobuf::uint32 owner() const;
  void set_owner(::google::protobuf::uint32 value);

  // optional .google.protobuf.Timestamp valid_from = 4;
  bool has_valid_from() const;
  void clear_valid_from();
  static const int kValidFromFieldNumber = 4;
  const ::google::protobuf::Timestamp& valid_from() const;
  ::google::protobuf::Timestamp* mutable_valid_from();
  ::google::protobuf::Timestamp* release_valid_from();
  void set_allocated_valid_from(::google::protobuf::Timestamp* valid_from);

  // optional .google.protobuf.Timestamp valid_to = 5;
  bool has_valid_to() const;
  void clear_valid_to();
  static const int kValidToFieldNumber = 5;
  const ::google::protobuf::Timestamp& valid_to() const;
  ::google::protobuf::Timestamp* mutable_valid_to();
  ::google::protobuf::Timestamp* release_valid_to();
  void set_allocated_valid_to(::google::protobuf::Timestamp* valid_to);

  // optional bool is_valid = 6;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 6;
  bool is_valid() const;
  void set_is_valid(bool value);

  // optional .google.protobuf.StringValue texture = 7;
  bool has_texture() const;
  void clear_texture();
  static const int kTextureFieldNumber = 7;
  const ::google::protobuf::StringValue& texture() const;
  ::google::protobuf::StringValue* mutable_texture();
  ::google::protobuf::StringValue* release_texture();
  void set_allocated_texture(::google::protobuf::StringValue* texture);

  // optional int32 scale = 8;
  void clear_scale();
  static const int kScaleFieldNumber = 8;
  ::google::protobuf::int32 scale() const;
  void set_scale(::google::protobuf::int32 value);

  // optional int32 fill = 9;
  void clear_fill();
  static const int kFillFieldNumber = 9;
  ::google::protobuf::int32 fill() const;
  void set_fill(::google::protobuf::int32 value);

  // optional int32 stroke = 10;
  void clear_stroke();
  static const int kStrokeFieldNumber = 10;
  ::google::protobuf::int32 stroke() const;
  void set_stroke(::google::protobuf::int32 value);

  // optional float stroke_width = 11;
  void clear_stroke_width();
  static const int kStrokeWidthFieldNumber = 11;
  float stroke_width() const;
  void set_stroke_width(float value);

  // optional .mtm.geo.model.GeographyDashStyle stroke_style = 12;
  void clear_stroke_style();
  static const int kStrokeStyleFieldNumber = 12;
  ::mtm::geo::model::GeographyDashStyle stroke_style() const;
  void set_stroke_style(::mtm::geo::model::GeographyDashStyle value);

  // optional int32 priority = 13;
  void clear_priority();
  static const int kPriorityFieldNumber = 13;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // optional bool visible = 14;
  void clear_visible();
  static const int kVisibleFieldNumber = 14;
  bool visible() const;
  void set_visible(bool value);

  // optional bool show_text = 15;
  void clear_show_text();
  static const int kShowTextFieldNumber = 15;
  bool show_text() const;
  void set_show_text(bool value);

  // optional .google.protobuf.StringValue text = 16;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 16;
  const ::google::protobuf::StringValue& text() const;
  ::google::protobuf::StringValue* mutable_text();
  ::google::protobuf::StringValue* release_text();
  void set_allocated_text(::google::protobuf::StringValue* text);

  // @@protoc_insertion_point(class_scope:mtm.geo.model.Visual)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::mtm::Uuid* id_;
  ::google::protobuf::int32 primary_key_;
  ::google::protobuf::uint32 owner_;
  ::google::protobuf::Timestamp* valid_from_;
  ::google::protobuf::Timestamp* valid_to_;
  ::google::protobuf::StringValue* texture_;
  ::google::protobuf::int32 scale_;
  ::google::protobuf::int32 fill_;
  ::google::protobuf::int32 stroke_;
  float stroke_width_;
  bool is_valid_;
  bool visible_;
  bool show_text_;
  int stroke_style_;
  ::google::protobuf::StringValue* text_;
  ::google::protobuf::int32 priority_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto();
  friend void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fvisual_2eproto();

  void InitAsDefaultInstance();
  static Visual* default_instance_;
};
// -------------------------------------------------------------------

class VisualList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.model.VisualList) */ {
 public:
  VisualList();
  virtual ~VisualList();

  VisualList(const VisualList& from);

  inline VisualList& operator=(const VisualList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisualList& default_instance();

  void Swap(VisualList* other);

  // implements Message ----------------------------------------------

  inline VisualList* New() const { return New(NULL); }

  VisualList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisualList& from);
  void MergeFrom(const VisualList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisualList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtm.geo.model.Visual visuals = 1;
  int visuals_size() const;
  void clear_visuals();
  static const int kVisualsFieldNumber = 1;
  const ::mtm::geo::model::Visual& visuals(int index) const;
  ::mtm::geo::model::Visual* mutable_visuals(int index);
  ::mtm::geo::model::Visual* add_visuals();
  ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Visual >*
      mutable_visuals();
  const ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Visual >&
      visuals() const;

  // @@protoc_insertion_point(class_scope:mtm.geo.model.VisualList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Visual > visuals_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto();
  friend void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fvisual_2eproto();

  void InitAsDefaultInstance();
  static VisualList* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Visual

// optional int32 primary_key = 1;
inline void Visual::clear_primary_key() {
  primary_key_ = 0;
}
inline ::google::protobuf::int32 Visual::primary_key() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.primary_key)
  return primary_key_;
}
inline void Visual::set_primary_key(::google::protobuf::int32 value) {
  
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.primary_key)
}

// optional .mtm.Uuid id = 2;
inline bool Visual::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void Visual::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::mtm::Uuid& Visual::id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::mtm::Uuid* Visual::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.id)
  return id_;
}
inline ::mtm::Uuid* Visual::release_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.id)
  
  ::mtm::Uuid* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Visual::set_allocated_id(::mtm::Uuid* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.id)
}

// optional uint32 owner = 3;
inline void Visual::clear_owner() {
  owner_ = 0u;
}
inline ::google::protobuf::uint32 Visual::owner() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.owner)
  return owner_;
}
inline void Visual::set_owner(::google::protobuf::uint32 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.owner)
}

// optional .google.protobuf.Timestamp valid_from = 4;
inline bool Visual::has_valid_from() const {
  return !_is_default_instance_ && valid_from_ != NULL;
}
inline void Visual::clear_valid_from() {
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) delete valid_from_;
  valid_from_ = NULL;
}
inline const ::google::protobuf::Timestamp& Visual::valid_from() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.valid_from)
  return valid_from_ != NULL ? *valid_from_ : *default_instance_->valid_from_;
}
inline ::google::protobuf::Timestamp* Visual::mutable_valid_from() {
  
  if (valid_from_ == NULL) {
    valid_from_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.valid_from)
  return valid_from_;
}
inline ::google::protobuf::Timestamp* Visual::release_valid_from() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.valid_from)
  
  ::google::protobuf::Timestamp* temp = valid_from_;
  valid_from_ = NULL;
  return temp;
}
inline void Visual::set_allocated_valid_from(::google::protobuf::Timestamp* valid_from) {
  delete valid_from_;
  if (valid_from != NULL && valid_from->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_valid_from = new ::google::protobuf::Timestamp;
    new_valid_from->CopyFrom(*valid_from);
    valid_from = new_valid_from;
  }
  valid_from_ = valid_from;
  if (valid_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.valid_from)
}

// optional .google.protobuf.Timestamp valid_to = 5;
inline bool Visual::has_valid_to() const {
  return !_is_default_instance_ && valid_to_ != NULL;
}
inline void Visual::clear_valid_to() {
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) delete valid_to_;
  valid_to_ = NULL;
}
inline const ::google::protobuf::Timestamp& Visual::valid_to() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.valid_to)
  return valid_to_ != NULL ? *valid_to_ : *default_instance_->valid_to_;
}
inline ::google::protobuf::Timestamp* Visual::mutable_valid_to() {
  
  if (valid_to_ == NULL) {
    valid_to_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.valid_to)
  return valid_to_;
}
inline ::google::protobuf::Timestamp* Visual::release_valid_to() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.valid_to)
  
  ::google::protobuf::Timestamp* temp = valid_to_;
  valid_to_ = NULL;
  return temp;
}
inline void Visual::set_allocated_valid_to(::google::protobuf::Timestamp* valid_to) {
  delete valid_to_;
  if (valid_to != NULL && valid_to->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_valid_to = new ::google::protobuf::Timestamp;
    new_valid_to->CopyFrom(*valid_to);
    valid_to = new_valid_to;
  }
  valid_to_ = valid_to;
  if (valid_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.valid_to)
}

// optional bool is_valid = 6;
inline void Visual::clear_is_valid() {
  is_valid_ = false;
}
inline bool Visual::is_valid() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.is_valid)
  return is_valid_;
}
inline void Visual::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.is_valid)
}

// optional .google.protobuf.StringValue texture = 7;
inline bool Visual::has_texture() const {
  return !_is_default_instance_ && texture_ != NULL;
}
inline void Visual::clear_texture() {
  if (GetArenaNoVirtual() == NULL && texture_ != NULL) delete texture_;
  texture_ = NULL;
}
inline const ::google::protobuf::StringValue& Visual::texture() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.texture)
  return texture_ != NULL ? *texture_ : *default_instance_->texture_;
}
inline ::google::protobuf::StringValue* Visual::mutable_texture() {
  
  if (texture_ == NULL) {
    texture_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.texture)
  return texture_;
}
inline ::google::protobuf::StringValue* Visual::release_texture() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.texture)
  
  ::google::protobuf::StringValue* temp = texture_;
  texture_ = NULL;
  return temp;
}
inline void Visual::set_allocated_texture(::google::protobuf::StringValue* texture) {
  delete texture_;
  if (texture != NULL && texture->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_texture = new ::google::protobuf::StringValue;
    new_texture->CopyFrom(*texture);
    texture = new_texture;
  }
  texture_ = texture;
  if (texture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.texture)
}

// optional int32 scale = 8;
inline void Visual::clear_scale() {
  scale_ = 0;
}
inline ::google::protobuf::int32 Visual::scale() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.scale)
  return scale_;
}
inline void Visual::set_scale(::google::protobuf::int32 value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.scale)
}

// optional int32 fill = 9;
inline void Visual::clear_fill() {
  fill_ = 0;
}
inline ::google::protobuf::int32 Visual::fill() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.fill)
  return fill_;
}
inline void Visual::set_fill(::google::protobuf::int32 value) {
  
  fill_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.fill)
}

// optional int32 stroke = 10;
inline void Visual::clear_stroke() {
  stroke_ = 0;
}
inline ::google::protobuf::int32 Visual::stroke() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.stroke)
  return stroke_;
}
inline void Visual::set_stroke(::google::protobuf::int32 value) {
  
  stroke_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.stroke)
}

// optional float stroke_width = 11;
inline void Visual::clear_stroke_width() {
  stroke_width_ = 0;
}
inline float Visual::stroke_width() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.stroke_width)
  return stroke_width_;
}
inline void Visual::set_stroke_width(float value) {
  
  stroke_width_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.stroke_width)
}

// optional .mtm.geo.model.GeographyDashStyle stroke_style = 12;
inline void Visual::clear_stroke_style() {
  stroke_style_ = 0;
}
inline ::mtm::geo::model::GeographyDashStyle Visual::stroke_style() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.stroke_style)
  return static_cast< ::mtm::geo::model::GeographyDashStyle >(stroke_style_);
}
inline void Visual::set_stroke_style(::mtm::geo::model::GeographyDashStyle value) {
  
  stroke_style_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.stroke_style)
}

// optional int32 priority = 13;
inline void Visual::clear_priority() {
  priority_ = 0;
}
inline ::google::protobuf::int32 Visual::priority() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.priority)
  return priority_;
}
inline void Visual::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.priority)
}

// optional bool visible = 14;
inline void Visual::clear_visible() {
  visible_ = false;
}
inline bool Visual::visible() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.visible)
  return visible_;
}
inline void Visual::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.visible)
}

// optional bool show_text = 15;
inline void Visual::clear_show_text() {
  show_text_ = false;
}
inline bool Visual::show_text() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.show_text)
  return show_text_;
}
inline void Visual::set_show_text(bool value) {
  
  show_text_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.show_text)
}

// optional .google.protobuf.StringValue text = 16;
inline bool Visual::has_text() const {
  return !_is_default_instance_ && text_ != NULL;
}
inline void Visual::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
inline const ::google::protobuf::StringValue& Visual::text() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.text)
  return text_ != NULL ? *text_ : *default_instance_->text_;
}
inline ::google::protobuf::StringValue* Visual::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.text)
  return text_;
}
inline ::google::protobuf::StringValue* Visual::release_text() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.text)
  
  ::google::protobuf::StringValue* temp = text_;
  text_ = NULL;
  return temp;
}
inline void Visual::set_allocated_text(::google::protobuf::StringValue* text) {
  delete text_;
  if (text != NULL && text->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_text = new ::google::protobuf::StringValue;
    new_text->CopyFrom(*text);
    text = new_text;
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.text)
}

// -------------------------------------------------------------------

// VisualList

// repeated .mtm.geo.model.Visual visuals = 1;
inline int VisualList::visuals_size() const {
  return visuals_.size();
}
inline void VisualList::clear_visuals() {
  visuals_.Clear();
}
inline const ::mtm::geo::model::Visual& VisualList::visuals(int index) const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.VisualList.visuals)
  return visuals_.Get(index);
}
inline ::mtm::geo::model::Visual* VisualList::mutable_visuals(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.VisualList.visuals)
  return visuals_.Mutable(index);
}
inline ::mtm::geo::model::Visual* VisualList::add_visuals() {
  // @@protoc_insertion_point(field_add:mtm.geo.model.VisualList.visuals)
  return visuals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Visual >*
VisualList::mutable_visuals() {
  // @@protoc_insertion_point(field_mutable_list:mtm.geo.model.VisualList.visuals)
  return &visuals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Visual >&
VisualList::visuals() const {
  // @@protoc_insertion_point(field_list:mtm.geo.model.VisualList.visuals)
  return visuals_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace geo
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mtm_2fgeo_2fmodel_2fvisual_2eproto__INCLUDED
