// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/geo_service_enums.proto

#ifndef PROTOBUF_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto__INCLUDED
#define PROTOBUF_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace mtm {
namespace geo {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto();
void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto();
void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto();


enum GeographyDashStyle {
  GEOGRAPHYDASHSTYLE_SOLID = 0,
  GEOGRAPHYDASHSTYLE_DASH = 1,
  GEOGRAPHYDASHSTYLE_DOT = 2,
  GEOGRAPHYDASHSTYLE_DASHDOT = 3,
  GEOGRAPHYDASHSTYLE_DASHDOTDOT = 4,
  GEOGRAPHYDASHSTYLE_CUSTOM = 5,
  GeographyDashStyle_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GeographyDashStyle_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GeographyDashStyle_IsValid(int value);
const GeographyDashStyle GeographyDashStyle_MIN = GEOGRAPHYDASHSTYLE_SOLID;
const GeographyDashStyle GeographyDashStyle_MAX = GEOGRAPHYDASHSTYLE_CUSTOM;
const int GeographyDashStyle_ARRAYSIZE = GeographyDashStyle_MAX + 1;

const ::google::protobuf::EnumDescriptor* GeographyDashStyle_descriptor();
inline const ::std::string& GeographyDashStyle_Name(GeographyDashStyle value) {
  return ::google::protobuf::internal::NameOfEnum(
    GeographyDashStyle_descriptor(), value);
}
inline bool GeographyDashStyle_Parse(
    const ::std::string& name, GeographyDashStyle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GeographyDashStyle>(
    GeographyDashStyle_descriptor(), name, value);
}
enum GeographyType {
  GEOGRAPHYTYPE_UNKNOWN = 0,
  GEOGRAPHYTYPE_POINT = 1,
  GEOGRAPHYTYPE_LINE_STRING = 2,
  GEOGRAPHYTYPE_POLYGON = 3,
  GEOGRAPHYTYPE_CIRCLE = 4,
  GEOGRAPHYTYPE_SECTOR = 5,
  GEOGRAPHYTYPE_ROUTE = 6,
  GEOGRAPHYTYPE_OVERLAY = 7,
  GeographyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GeographyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GeographyType_IsValid(int value);
const GeographyType GeographyType_MIN = GEOGRAPHYTYPE_UNKNOWN;
const GeographyType GeographyType_MAX = GEOGRAPHYTYPE_OVERLAY;
const int GeographyType_ARRAYSIZE = GeographyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GeographyType_descriptor();
inline const ::std::string& GeographyType_Name(GeographyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GeographyType_descriptor(), value);
}
inline bool GeographyType_Parse(
    const ::std::string& name, GeographyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GeographyType>(
    GeographyType_descriptor(), name, value);
}
enum Permission {
  PERMISSION_NONE = 0,
  PERMISSION_READ = 1,
  PERMISSION_WRITE = 2,
  Permission_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Permission_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Permission_IsValid(int value);
const Permission Permission_MIN = PERMISSION_NONE;
const Permission Permission_MAX = PERMISSION_WRITE;
const int Permission_ARRAYSIZE = Permission_MAX + 1;

const ::google::protobuf::EnumDescriptor* Permission_descriptor();
inline const ::std::string& Permission_Name(Permission value) {
  return ::google::protobuf::internal::NameOfEnum(
    Permission_descriptor(), value);
}
inline bool Permission_Parse(
    const ::std::string& name, Permission* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Permission>(
    Permission_descriptor(), name, value);
}
enum GeographyResourceType {
  GEOGRAPHYRESOURCETYPE_UNKNOWN = 0,
  GEOGRAPHYRESOURCETYPE_BITMAP = 1,
  GeographyResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GeographyResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GeographyResourceType_IsValid(int value);
const GeographyResourceType GeographyResourceType_MIN = GEOGRAPHYRESOURCETYPE_UNKNOWN;
const GeographyResourceType GeographyResourceType_MAX = GEOGRAPHYRESOURCETYPE_BITMAP;
const int GeographyResourceType_ARRAYSIZE = GeographyResourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GeographyResourceType_descriptor();
inline const ::std::string& GeographyResourceType_Name(GeographyResourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GeographyResourceType_descriptor(), value);
}
inline bool GeographyResourceType_Parse(
    const ::std::string& name, GeographyResourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GeographyResourceType>(
    GeographyResourceType_descriptor(), name, value);
}
enum Operation {
  OPERATION_UNKOWN = 0,
  OPERATION_ADD = 1,
  OPERATION_UPDATE = 2,
  OPERATION_REMOVE = 3,
  Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Operation_IsValid(int value);
const Operation Operation_MIN = OPERATION_UNKOWN;
const Operation Operation_MAX = OPERATION_REMOVE;
const int Operation_ARRAYSIZE = Operation_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_descriptor();
inline const ::std::string& Operation_Name(Operation value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_descriptor(), value);
}
inline bool Operation_Parse(
    const ::std::string& name, Operation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation>(
    Operation_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace geo
}  // namespace mtm

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mtm::geo::model::GeographyDashStyle> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mtm::geo::model::GeographyDashStyle>() {
  return ::mtm::geo::model::GeographyDashStyle_descriptor();
}
template <> struct is_proto_enum< ::mtm::geo::model::GeographyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mtm::geo::model::GeographyType>() {
  return ::mtm::geo::model::GeographyType_descriptor();
}
template <> struct is_proto_enum< ::mtm::geo::model::Permission> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mtm::geo::model::Permission>() {
  return ::mtm::geo::model::Permission_descriptor();
}
template <> struct is_proto_enum< ::mtm::geo::model::GeographyResourceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mtm::geo::model::GeographyResourceType>() {
  return ::mtm::geo::model::GeographyResourceType_descriptor();
}
template <> struct is_proto_enum< ::mtm::geo::model::Operation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mtm::geo::model::Operation>() {
  return ::mtm::geo::model::Operation_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto__INCLUDED
