// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/geography.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtm/geo/model/geography.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mtm {
namespace geo {
namespace model {

namespace {

const ::google::protobuf::Descriptor* Geography_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Geography_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeographyMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeographyMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeographyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeographyList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto() {
  protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mtm/geo/model/geography.proto");
  GOOGLE_CHECK(file != NULL);
  Geography_descriptor_ = file->message_type(0);
  static const int Geography_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, primary_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, geography_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, created_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, edited_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, edited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, valid_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, valid_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, is_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, wkt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, public_permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, meta_properties_),
  };
  Geography_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Geography_descriptor_,
      Geography::default_instance_,
      Geography_offsets_,
      -1,
      -1,
      -1,
      sizeof(Geography),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geography, _is_default_instance_));
  GeographyMeta_descriptor_ = file->message_type(1);
  static const int GeographyMeta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyMeta, texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyMeta, path_),
  };
  GeographyMeta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GeographyMeta_descriptor_,
      GeographyMeta::default_instance_,
      GeographyMeta_offsets_,
      -1,
      -1,
      -1,
      sizeof(GeographyMeta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyMeta, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyMeta, _is_default_instance_));
  GeographyList_descriptor_ = file->message_type(2);
  static const int GeographyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyList, geographies_),
  };
  GeographyList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GeographyList_descriptor_,
      GeographyList::default_instance_,
      GeographyList_offsets_,
      -1,
      -1,
      -1,
      sizeof(GeographyList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Geography_descriptor_, &Geography::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GeographyMeta_descriptor_, &GeographyMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GeographyList_descriptor_, &GeographyList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeography_2eproto() {
  delete Geography::default_instance_;
  delete Geography_reflection_;
  delete GeographyMeta::default_instance_;
  delete GeographyMeta_reflection_;
  delete GeographyList::default_instance_;
  delete GeographyList_reflection_;
}

void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::mtm::protobuf_AddDesc_mtm_2fcommon_5ftypes_2eproto();
  ::mtm::geo::model::protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035mtm/geo/model/geography.proto\022\rmtm.geo"
    ".model\032\037google/protobuf/timestamp.proto\032"
    "\036google/protobuf/wrappers.proto\032\026mtm/com"
    "mon_types.proto\032%mtm/geo/model/geo_servi"
    "ce_enums.proto\"\200\005\n\tGeography\022\023\n\013primary_"
    "key\030\001 \001(\005\022\025\n\002id\030\002 \001(\0132\t.mtm.Uuid\0224\n\016geog"
    "raphy_type\030\003 \001(\0162\034.mtm.geo.model.Geograp"
    "hyType\022*\n\004name\030\004 \001(\0132\034.google.protobuf.S"
    "tringValue\022\022\n\ncreated_by\030\005 \001(\r\022+\n\007create"
    "d\030\006 \001(\0132\032.google.protobuf.Timestamp\022\021\n\te"
    "dited_by\030\007 \001(\r\022*\n\006edited\030\010 \001(\0132\032.google."
    "protobuf.Timestamp\0221\n\013description\030\t \001(\0132"
    "\034.google.protobuf.StringValue\022.\n\nvalid_f"
    "rom\030\n \001(\0132\032.google.protobuf.Timestamp\022,\n"
    "\010valid_to\030\013 \001(\0132\032.google.protobuf.Timest"
    "amp\022\020\n\010is_valid\030\014 \001(\010\022)\n\003wkt\030\r \001(\0132\034.goo"
    "gle.protobuf.StringValue\022*\n\004meta\030\016 \001(\0132\034"
    ".google.protobuf.StringValue\0224\n\021public_p"
    "ermission\030\017 \001(\0162\031.mtm.geo.model.Permissi"
    "on\0225\n\017meta_properties\030\021 \001(\0132\034.mtm.geo.mo"
    "del.GeographyMeta\"j\n\rGeographyMeta\022-\n\007te"
    "xture\030\001 \001(\0132\034.google.protobuf.StringValu"
    "e\022*\n\004path\030\002 \001(\0132\034.google.protobuf.String"
    "Value\">\n\rGeographyList\022-\n\013geographies\030\001 "
    "\003(\0132\030.mtm.geo.model.Geographyb\006proto3", 997);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/geo/model/geography.proto", &protobuf_RegisterTypes);
  Geography::default_instance_ = new Geography();
  GeographyMeta::default_instance_ = new GeographyMeta();
  GeographyList::default_instance_ = new GeographyList();
  Geography::default_instance_->InitAsDefaultInstance();
  GeographyMeta::default_instance_->InitAsDefaultInstance();
  GeographyList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeography_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtm_2fgeo_2fmodel_2fgeography_2eproto {
  StaticDescriptorInitializer_mtm_2fgeo_2fmodel_2fgeography_2eproto() {
    protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto();
  }
} static_descriptor_initializer_mtm_2fgeo_2fmodel_2fgeography_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Geography::kPrimaryKeyFieldNumber;
const int Geography::kIdFieldNumber;
const int Geography::kGeographyTypeFieldNumber;
const int Geography::kNameFieldNumber;
const int Geography::kCreatedByFieldNumber;
const int Geography::kCreatedFieldNumber;
const int Geography::kEditedByFieldNumber;
const int Geography::kEditedFieldNumber;
const int Geography::kDescriptionFieldNumber;
const int Geography::kValidFromFieldNumber;
const int Geography::kValidToFieldNumber;
const int Geography::kIsValidFieldNumber;
const int Geography::kWktFieldNumber;
const int Geography::kMetaFieldNumber;
const int Geography::kPublicPermissionFieldNumber;
const int Geography::kMetaPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Geography::Geography()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.Geography)
}

void Geography::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  id_ = const_cast< ::mtm::Uuid*>(&::mtm::Uuid::default_instance());
  name_ = const_cast< ::google::protobuf::StringValue*>(&::google::protobuf::StringValue::default_instance());
  created_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  edited_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  description_ = const_cast< ::google::protobuf::StringValue*>(&::google::protobuf::StringValue::default_instance());
  valid_from_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  valid_to_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  wkt_ = const_cast< ::google::protobuf::StringValue*>(&::google::protobuf::StringValue::default_instance());
  meta_ = const_cast< ::google::protobuf::StringValue*>(&::google::protobuf::StringValue::default_instance());
  meta_properties_ = const_cast< ::mtm::geo::model::GeographyMeta*>(&::mtm::geo::model::GeographyMeta::default_instance());
}

Geography::Geography(const Geography& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.Geography)
}

void Geography::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  primary_key_ = 0;
  id_ = NULL;
  geography_type_ = 0;
  name_ = NULL;
  created_by_ = 0u;
  created_ = NULL;
  edited_by_ = 0u;
  edited_ = NULL;
  description_ = NULL;
  valid_from_ = NULL;
  valid_to_ = NULL;
  is_valid_ = false;
  wkt_ = NULL;
  meta_ = NULL;
  public_permission_ = 0;
  meta_properties_ = NULL;
}

Geography::~Geography() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.Geography)
  SharedDtor();
}

void Geography::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete name_;
    delete created_;
    delete edited_;
    delete description_;
    delete valid_from_;
    delete valid_to_;
    delete wkt_;
    delete meta_;
    delete meta_properties_;
  }
}

void Geography::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Geography::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Geography_descriptor_;
}

const Geography& Geography::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto();
  return *default_instance_;
}

Geography* Geography::default_instance_ = NULL;

Geography* Geography::New(::google::protobuf::Arena* arena) const {
  Geography* n = new Geography;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Geography::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.Geography)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Geography, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Geography*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(primary_key_, geography_type_);
  ZR_(created_by_, edited_by_);
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && name_ != NULL) delete name_;
  name_ = NULL;
  if (GetArenaNoVirtual() == NULL && created_ != NULL) delete created_;
  created_ = NULL;
  if (GetArenaNoVirtual() == NULL && edited_ != NULL) delete edited_;
  edited_ = NULL;
  ZR_(is_valid_, public_permission_);
  if (GetArenaNoVirtual() == NULL && description_ != NULL) delete description_;
  description_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) delete valid_from_;
  valid_from_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) delete valid_to_;
  valid_to_ = NULL;
  if (GetArenaNoVirtual() == NULL && wkt_ != NULL) delete wkt_;
  wkt_ = NULL;
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
  if (GetArenaNoVirtual() == NULL && meta_properties_ != NULL) delete meta_properties_;
  meta_properties_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Geography::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.Geography)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 primary_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional .mtm.Uuid id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_geography_type;
        break;
      }

      // optional .mtm.geo.model.GeographyType geography_type = 3;
      case 3: {
        if (tag == 24) {
         parse_geography_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_geography_type(static_cast< ::mtm::geo::model::GeographyType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional .google.protobuf.StringValue name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_created_by;
        break;
      }

      // optional uint32 created_by = 5;
      case 5: {
        if (tag == 40) {
         parse_created_by:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &created_by_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_created;
        break;
      }

      // optional .google.protobuf.Timestamp created = 6;
      case 6: {
        if (tag == 50) {
         parse_created:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_created()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_edited_by;
        break;
      }

      // optional uint32 edited_by = 7;
      case 7: {
        if (tag == 56) {
         parse_edited_by:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &edited_by_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_edited;
        break;
      }

      // optional .google.protobuf.Timestamp edited = 8;
      case 8: {
        if (tag == 66) {
         parse_edited:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edited()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_description;
        break;
      }

      // optional .google.protobuf.StringValue description = 9;
      case 9: {
        if (tag == 74) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_valid_from;
        break;
      }

      // optional .google.protobuf.Timestamp valid_from = 10;
      case 10: {
        if (tag == 82) {
         parse_valid_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valid_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_valid_to;
        break;
      }

      // optional .google.protobuf.Timestamp valid_to = 11;
      case 11: {
        if (tag == 90) {
         parse_valid_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valid_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_valid;
        break;
      }

      // optional bool is_valid = 12;
      case 12: {
        if (tag == 96) {
         parse_is_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_wkt;
        break;
      }

      // optional .google.protobuf.StringValue wkt = 13;
      case 13: {
        if (tag == 106) {
         parse_wkt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wkt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_meta;
        break;
      }

      // optional .google.protobuf.StringValue meta = 14;
      case 14: {
        if (tag == 114) {
         parse_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_public_permission;
        break;
      }

      // optional .mtm.geo.model.Permission public_permission = 15;
      case 15: {
        if (tag == 120) {
         parse_public_permission:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_public_permission(static_cast< ::mtm::geo::model::Permission >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_meta_properties;
        break;
      }

      // optional .mtm.geo.model.GeographyMeta meta_properties = 17;
      case 17: {
        if (tag == 138) {
         parse_meta_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.Geography)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.Geography)
  return false;
#undef DO_
}

void Geography::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.Geography)
  // optional int32 primary_key = 1;
  if (this->primary_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->primary_key(), output);
  }

  // optional .mtm.Uuid id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->id_, output);
  }

  // optional .mtm.geo.model.GeographyType geography_type = 3;
  if (this->geography_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->geography_type(), output);
  }

  // optional .google.protobuf.StringValue name = 4;
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->name_, output);
  }

  // optional uint32 created_by = 5;
  if (this->created_by() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->created_by(), output);
  }

  // optional .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->created_, output);
  }

  // optional uint32 edited_by = 7;
  if (this->edited_by() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->edited_by(), output);
  }

  // optional .google.protobuf.Timestamp edited = 8;
  if (this->has_edited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->edited_, output);
  }

  // optional .google.protobuf.StringValue description = 9;
  if (this->has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->description_, output);
  }

  // optional .google.protobuf.Timestamp valid_from = 10;
  if (this->has_valid_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->valid_from_, output);
  }

  // optional .google.protobuf.Timestamp valid_to = 11;
  if (this->has_valid_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->valid_to_, output);
  }

  // optional bool is_valid = 12;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_valid(), output);
  }

  // optional .google.protobuf.StringValue wkt = 13;
  if (this->has_wkt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->wkt_, output);
  }

  // optional .google.protobuf.StringValue meta = 14;
  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->meta_, output);
  }

  // optional .mtm.geo.model.Permission public_permission = 15;
  if (this->public_permission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->public_permission(), output);
  }

  // optional .mtm.geo.model.GeographyMeta meta_properties = 17;
  if (this->has_meta_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->meta_properties_, output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.geo.model.Geography)
}

::google::protobuf::uint8* Geography::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.Geography)
  // optional int32 primary_key = 1;
  if (this->primary_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->primary_key(), target);
  }

  // optional .mtm.Uuid id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->id_, false, target);
  }

  // optional .mtm.geo.model.GeographyType geography_type = 3;
  if (this->geography_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->geography_type(), target);
  }

  // optional .google.protobuf.StringValue name = 4;
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->name_, false, target);
  }

  // optional uint32 created_by = 5;
  if (this->created_by() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->created_by(), target);
  }

  // optional .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->created_, false, target);
  }

  // optional uint32 edited_by = 7;
  if (this->edited_by() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->edited_by(), target);
  }

  // optional .google.protobuf.Timestamp edited = 8;
  if (this->has_edited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->edited_, false, target);
  }

  // optional .google.protobuf.StringValue description = 9;
  if (this->has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->description_, false, target);
  }

  // optional .google.protobuf.Timestamp valid_from = 10;
  if (this->has_valid_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->valid_from_, false, target);
  }

  // optional .google.protobuf.Timestamp valid_to = 11;
  if (this->has_valid_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->valid_to_, false, target);
  }

  // optional bool is_valid = 12;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_valid(), target);
  }

  // optional .google.protobuf.StringValue wkt = 13;
  if (this->has_wkt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->wkt_, false, target);
  }

  // optional .google.protobuf.StringValue meta = 14;
  if (this->has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->meta_, false, target);
  }

  // optional .mtm.geo.model.Permission public_permission = 15;
  if (this->public_permission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->public_permission(), target);
  }

  // optional .mtm.geo.model.GeographyMeta meta_properties = 17;
  if (this->has_meta_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->meta_properties_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.Geography)
  return target;
}

int Geography::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.Geography)
  int total_size = 0;

  // optional int32 primary_key = 1;
  if (this->primary_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->primary_key());
  }

  // optional .mtm.Uuid id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // optional .mtm.geo.model.GeographyType geography_type = 3;
  if (this->geography_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->geography_type());
  }

  // optional .google.protobuf.StringValue name = 4;
  if (this->has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->name_);
  }

  // optional uint32 created_by = 5;
  if (this->created_by() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->created_by());
  }

  // optional .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->created_);
  }

  // optional uint32 edited_by = 7;
  if (this->edited_by() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->edited_by());
  }

  // optional .google.protobuf.Timestamp edited = 8;
  if (this->has_edited()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->edited_);
  }

  // optional .google.protobuf.StringValue description = 9;
  if (this->has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->description_);
  }

  // optional .google.protobuf.Timestamp valid_from = 10;
  if (this->has_valid_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->valid_from_);
  }

  // optional .google.protobuf.Timestamp valid_to = 11;
  if (this->has_valid_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->valid_to_);
  }

  // optional bool is_valid = 12;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // optional .google.protobuf.StringValue wkt = 13;
  if (this->has_wkt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wkt_);
  }

  // optional .google.protobuf.StringValue meta = 14;
  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meta_);
  }

  // optional .mtm.geo.model.Permission public_permission = 15;
  if (this->public_permission() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->public_permission());
  }

  // optional .mtm.geo.model.GeographyMeta meta_properties = 17;
  if (this->has_meta_properties()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meta_properties_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Geography::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.Geography)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Geography* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Geography>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.Geography)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.Geography)
    MergeFrom(*source);
  }
}

void Geography::MergeFrom(const Geography& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.Geography)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.primary_key() != 0) {
    set_primary_key(from.primary_key());
  }
  if (from.has_id()) {
    mutable_id()->::mtm::Uuid::MergeFrom(from.id());
  }
  if (from.geography_type() != 0) {
    set_geography_type(from.geography_type());
  }
  if (from.has_name()) {
    mutable_name()->::google::protobuf::StringValue::MergeFrom(from.name());
  }
  if (from.created_by() != 0) {
    set_created_by(from.created_by());
  }
  if (from.has_created()) {
    mutable_created()->::google::protobuf::Timestamp::MergeFrom(from.created());
  }
  if (from.edited_by() != 0) {
    set_edited_by(from.edited_by());
  }
  if (from.has_edited()) {
    mutable_edited()->::google::protobuf::Timestamp::MergeFrom(from.edited());
  }
  if (from.has_description()) {
    mutable_description()->::google::protobuf::StringValue::MergeFrom(from.description());
  }
  if (from.has_valid_from()) {
    mutable_valid_from()->::google::protobuf::Timestamp::MergeFrom(from.valid_from());
  }
  if (from.has_valid_to()) {
    mutable_valid_to()->::google::protobuf::Timestamp::MergeFrom(from.valid_to());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
  if (from.has_wkt()) {
    mutable_wkt()->::google::protobuf::StringValue::MergeFrom(from.wkt());
  }
  if (from.has_meta()) {
    mutable_meta()->::google::protobuf::StringValue::MergeFrom(from.meta());
  }
  if (from.public_permission() != 0) {
    set_public_permission(from.public_permission());
  }
  if (from.has_meta_properties()) {
    mutable_meta_properties()->::mtm::geo::model::GeographyMeta::MergeFrom(from.meta_properties());
  }
}

void Geography::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.Geography)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geography::CopyFrom(const Geography& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.Geography)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geography::IsInitialized() const {

  return true;
}

void Geography::Swap(Geography* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Geography::InternalSwap(Geography* other) {
  std::swap(primary_key_, other->primary_key_);
  std::swap(id_, other->id_);
  std::swap(geography_type_, other->geography_type_);
  std::swap(name_, other->name_);
  std::swap(created_by_, other->created_by_);
  std::swap(created_, other->created_);
  std::swap(edited_by_, other->edited_by_);
  std::swap(edited_, other->edited_);
  std::swap(description_, other->description_);
  std::swap(valid_from_, other->valid_from_);
  std::swap(valid_to_, other->valid_to_);
  std::swap(is_valid_, other->is_valid_);
  std::swap(wkt_, other->wkt_);
  std::swap(meta_, other->meta_);
  std::swap(public_permission_, other->public_permission_);
  std::swap(meta_properties_, other->meta_properties_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Geography::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Geography_descriptor_;
  metadata.reflection = Geography_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Geography

// optional int32 primary_key = 1;
void Geography::clear_primary_key() {
  primary_key_ = 0;
}
 ::google::protobuf::int32 Geography::primary_key() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.primary_key)
  return primary_key_;
}
 void Geography::set_primary_key(::google::protobuf::int32 value) {
  
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.primary_key)
}

// optional .mtm.Uuid id = 2;
bool Geography::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
void Geography::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::mtm::Uuid& Geography::id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::mtm::Uuid* Geography::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.id)
  return id_;
}
::mtm::Uuid* Geography::release_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.id)
  
  ::mtm::Uuid* temp = id_;
  id_ = NULL;
  return temp;
}
void Geography::set_allocated_id(::mtm::Uuid* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.id)
}

// optional .mtm.geo.model.GeographyType geography_type = 3;
void Geography::clear_geography_type() {
  geography_type_ = 0;
}
 ::mtm::geo::model::GeographyType Geography::geography_type() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.geography_type)
  return static_cast< ::mtm::geo::model::GeographyType >(geography_type_);
}
 void Geography::set_geography_type(::mtm::geo::model::GeographyType value) {
  
  geography_type_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.geography_type)
}

// optional .google.protobuf.StringValue name = 4;
bool Geography::has_name() const {
  return !_is_default_instance_ && name_ != NULL;
}
void Geography::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) delete name_;
  name_ = NULL;
}
const ::google::protobuf::StringValue& Geography::name() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.name)
  return name_ != NULL ? *name_ : *default_instance_->name_;
}
::google::protobuf::StringValue* Geography::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.name)
  return name_;
}
::google::protobuf::StringValue* Geography::release_name() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.name)
  
  ::google::protobuf::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
void Geography::set_allocated_name(::google::protobuf::StringValue* name) {
  delete name_;
  if (name != NULL && name->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_name = new ::google::protobuf::StringValue;
    new_name->CopyFrom(*name);
    name = new_name;
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.name)
}

// optional uint32 created_by = 5;
void Geography::clear_created_by() {
  created_by_ = 0u;
}
 ::google::protobuf::uint32 Geography::created_by() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.created_by)
  return created_by_;
}
 void Geography::set_created_by(::google::protobuf::uint32 value) {
  
  created_by_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.created_by)
}

// optional .google.protobuf.Timestamp created = 6;
bool Geography::has_created() const {
  return !_is_default_instance_ && created_ != NULL;
}
void Geography::clear_created() {
  if (GetArenaNoVirtual() == NULL && created_ != NULL) delete created_;
  created_ = NULL;
}
const ::google::protobuf::Timestamp& Geography::created() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.created)
  return created_ != NULL ? *created_ : *default_instance_->created_;
}
::google::protobuf::Timestamp* Geography::mutable_created() {
  
  if (created_ == NULL) {
    created_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.created)
  return created_;
}
::google::protobuf::Timestamp* Geography::release_created() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.created)
  
  ::google::protobuf::Timestamp* temp = created_;
  created_ = NULL;
  return temp;
}
void Geography::set_allocated_created(::google::protobuf::Timestamp* created) {
  delete created_;
  if (created != NULL && created->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_created = new ::google::protobuf::Timestamp;
    new_created->CopyFrom(*created);
    created = new_created;
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.created)
}

// optional uint32 edited_by = 7;
void Geography::clear_edited_by() {
  edited_by_ = 0u;
}
 ::google::protobuf::uint32 Geography::edited_by() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.edited_by)
  return edited_by_;
}
 void Geography::set_edited_by(::google::protobuf::uint32 value) {
  
  edited_by_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.edited_by)
}

// optional .google.protobuf.Timestamp edited = 8;
bool Geography::has_edited() const {
  return !_is_default_instance_ && edited_ != NULL;
}
void Geography::clear_edited() {
  if (GetArenaNoVirtual() == NULL && edited_ != NULL) delete edited_;
  edited_ = NULL;
}
const ::google::protobuf::Timestamp& Geography::edited() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.edited)
  return edited_ != NULL ? *edited_ : *default_instance_->edited_;
}
::google::protobuf::Timestamp* Geography::mutable_edited() {
  
  if (edited_ == NULL) {
    edited_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.edited)
  return edited_;
}
::google::protobuf::Timestamp* Geography::release_edited() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.edited)
  
  ::google::protobuf::Timestamp* temp = edited_;
  edited_ = NULL;
  return temp;
}
void Geography::set_allocated_edited(::google::protobuf::Timestamp* edited) {
  delete edited_;
  if (edited != NULL && edited->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_edited = new ::google::protobuf::Timestamp;
    new_edited->CopyFrom(*edited);
    edited = new_edited;
  }
  edited_ = edited;
  if (edited) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.edited)
}

// optional .google.protobuf.StringValue description = 9;
bool Geography::has_description() const {
  return !_is_default_instance_ && description_ != NULL;
}
void Geography::clear_description() {
  if (GetArenaNoVirtual() == NULL && description_ != NULL) delete description_;
  description_ = NULL;
}
const ::google::protobuf::StringValue& Geography::description() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.description)
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
::google::protobuf::StringValue* Geography::mutable_description() {
  
  if (description_ == NULL) {
    description_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.description)
  return description_;
}
::google::protobuf::StringValue* Geography::release_description() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.description)
  
  ::google::protobuf::StringValue* temp = description_;
  description_ = NULL;
  return temp;
}
void Geography::set_allocated_description(::google::protobuf::StringValue* description) {
  delete description_;
  if (description != NULL && description->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_description = new ::google::protobuf::StringValue;
    new_description->CopyFrom(*description);
    description = new_description;
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.description)
}

// optional .google.protobuf.Timestamp valid_from = 10;
bool Geography::has_valid_from() const {
  return !_is_default_instance_ && valid_from_ != NULL;
}
void Geography::clear_valid_from() {
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) delete valid_from_;
  valid_from_ = NULL;
}
const ::google::protobuf::Timestamp& Geography::valid_from() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.valid_from)
  return valid_from_ != NULL ? *valid_from_ : *default_instance_->valid_from_;
}
::google::protobuf::Timestamp* Geography::mutable_valid_from() {
  
  if (valid_from_ == NULL) {
    valid_from_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.valid_from)
  return valid_from_;
}
::google::protobuf::Timestamp* Geography::release_valid_from() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.valid_from)
  
  ::google::protobuf::Timestamp* temp = valid_from_;
  valid_from_ = NULL;
  return temp;
}
void Geography::set_allocated_valid_from(::google::protobuf::Timestamp* valid_from) {
  delete valid_from_;
  if (valid_from != NULL && valid_from->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_valid_from = new ::google::protobuf::Timestamp;
    new_valid_from->CopyFrom(*valid_from);
    valid_from = new_valid_from;
  }
  valid_from_ = valid_from;
  if (valid_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.valid_from)
}

// optional .google.protobuf.Timestamp valid_to = 11;
bool Geography::has_valid_to() const {
  return !_is_default_instance_ && valid_to_ != NULL;
}
void Geography::clear_valid_to() {
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) delete valid_to_;
  valid_to_ = NULL;
}
const ::google::protobuf::Timestamp& Geography::valid_to() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.valid_to)
  return valid_to_ != NULL ? *valid_to_ : *default_instance_->valid_to_;
}
::google::protobuf::Timestamp* Geography::mutable_valid_to() {
  
  if (valid_to_ == NULL) {
    valid_to_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.valid_to)
  return valid_to_;
}
::google::protobuf::Timestamp* Geography::release_valid_to() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.valid_to)
  
  ::google::protobuf::Timestamp* temp = valid_to_;
  valid_to_ = NULL;
  return temp;
}
void Geography::set_allocated_valid_to(::google::protobuf::Timestamp* valid_to) {
  delete valid_to_;
  if (valid_to != NULL && valid_to->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_valid_to = new ::google::protobuf::Timestamp;
    new_valid_to->CopyFrom(*valid_to);
    valid_to = new_valid_to;
  }
  valid_to_ = valid_to;
  if (valid_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.valid_to)
}

// optional bool is_valid = 12;
void Geography::clear_is_valid() {
  is_valid_ = false;
}
 bool Geography::is_valid() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.is_valid)
  return is_valid_;
}
 void Geography::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.is_valid)
}

// optional .google.protobuf.StringValue wkt = 13;
bool Geography::has_wkt() const {
  return !_is_default_instance_ && wkt_ != NULL;
}
void Geography::clear_wkt() {
  if (GetArenaNoVirtual() == NULL && wkt_ != NULL) delete wkt_;
  wkt_ = NULL;
}
const ::google::protobuf::StringValue& Geography::wkt() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.wkt)
  return wkt_ != NULL ? *wkt_ : *default_instance_->wkt_;
}
::google::protobuf::StringValue* Geography::mutable_wkt() {
  
  if (wkt_ == NULL) {
    wkt_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.wkt)
  return wkt_;
}
::google::protobuf::StringValue* Geography::release_wkt() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.wkt)
  
  ::google::protobuf::StringValue* temp = wkt_;
  wkt_ = NULL;
  return temp;
}
void Geography::set_allocated_wkt(::google::protobuf::StringValue* wkt) {
  delete wkt_;
  if (wkt != NULL && wkt->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_wkt = new ::google::protobuf::StringValue;
    new_wkt->CopyFrom(*wkt);
    wkt = new_wkt;
  }
  wkt_ = wkt;
  if (wkt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.wkt)
}

// optional .google.protobuf.StringValue meta = 14;
bool Geography::has_meta() const {
  return !_is_default_instance_ && meta_ != NULL;
}
void Geography::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
const ::google::protobuf::StringValue& Geography::meta() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.meta)
  return meta_ != NULL ? *meta_ : *default_instance_->meta_;
}
::google::protobuf::StringValue* Geography::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.meta)
  return meta_;
}
::google::protobuf::StringValue* Geography::release_meta() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.meta)
  
  ::google::protobuf::StringValue* temp = meta_;
  meta_ = NULL;
  return temp;
}
void Geography::set_allocated_meta(::google::protobuf::StringValue* meta) {
  delete meta_;
  if (meta != NULL && meta->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_meta = new ::google::protobuf::StringValue;
    new_meta->CopyFrom(*meta);
    meta = new_meta;
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.meta)
}

// optional .mtm.geo.model.Permission public_permission = 15;
void Geography::clear_public_permission() {
  public_permission_ = 0;
}
 ::mtm::geo::model::Permission Geography::public_permission() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.public_permission)
  return static_cast< ::mtm::geo::model::Permission >(public_permission_);
}
 void Geography::set_public_permission(::mtm::geo::model::Permission value) {
  
  public_permission_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.public_permission)
}

// optional .mtm.geo.model.GeographyMeta meta_properties = 17;
bool Geography::has_meta_properties() const {
  return !_is_default_instance_ && meta_properties_ != NULL;
}
void Geography::clear_meta_properties() {
  if (GetArenaNoVirtual() == NULL && meta_properties_ != NULL) delete meta_properties_;
  meta_properties_ = NULL;
}
const ::mtm::geo::model::GeographyMeta& Geography::meta_properties() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.meta_properties)
  return meta_properties_ != NULL ? *meta_properties_ : *default_instance_->meta_properties_;
}
::mtm::geo::model::GeographyMeta* Geography::mutable_meta_properties() {
  
  if (meta_properties_ == NULL) {
    meta_properties_ = new ::mtm::geo::model::GeographyMeta;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.meta_properties)
  return meta_properties_;
}
::mtm::geo::model::GeographyMeta* Geography::release_meta_properties() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.meta_properties)
  
  ::mtm::geo::model::GeographyMeta* temp = meta_properties_;
  meta_properties_ = NULL;
  return temp;
}
void Geography::set_allocated_meta_properties(::mtm::geo::model::GeographyMeta* meta_properties) {
  delete meta_properties_;
  meta_properties_ = meta_properties;
  if (meta_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.meta_properties)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeographyMeta::kTextureFieldNumber;
const int GeographyMeta::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeographyMeta::GeographyMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.GeographyMeta)
}

void GeographyMeta::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  texture_ = const_cast< ::google::protobuf::StringValue*>(&::google::protobuf::StringValue::default_instance());
  path_ = const_cast< ::google::protobuf::StringValue*>(&::google::protobuf::StringValue::default_instance());
}

GeographyMeta::GeographyMeta(const GeographyMeta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.GeographyMeta)
}

void GeographyMeta::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  texture_ = NULL;
  path_ = NULL;
}

GeographyMeta::~GeographyMeta() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.GeographyMeta)
  SharedDtor();
}

void GeographyMeta::SharedDtor() {
  if (this != default_instance_) {
    delete texture_;
    delete path_;
  }
}

void GeographyMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeographyMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeographyMeta_descriptor_;
}

const GeographyMeta& GeographyMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto();
  return *default_instance_;
}

GeographyMeta* GeographyMeta::default_instance_ = NULL;

GeographyMeta* GeographyMeta::New(::google::protobuf::Arena* arena) const {
  GeographyMeta* n = new GeographyMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeographyMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.GeographyMeta)
  if (GetArenaNoVirtual() == NULL && texture_ != NULL) delete texture_;
  texture_ = NULL;
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}

bool GeographyMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.GeographyMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.StringValue texture = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional .google.protobuf.StringValue path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.GeographyMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.GeographyMeta)
  return false;
#undef DO_
}

void GeographyMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.GeographyMeta)
  // optional .google.protobuf.StringValue texture = 1;
  if (this->has_texture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->texture_, output);
  }

  // optional .google.protobuf.StringValue path = 2;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->path_, output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.geo.model.GeographyMeta)
}

::google::protobuf::uint8* GeographyMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.GeographyMeta)
  // optional .google.protobuf.StringValue texture = 1;
  if (this->has_texture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->texture_, false, target);
  }

  // optional .google.protobuf.StringValue path = 2;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->path_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.GeographyMeta)
  return target;
}

int GeographyMeta::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.GeographyMeta)
  int total_size = 0;

  // optional .google.protobuf.StringValue texture = 1;
  if (this->has_texture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->texture_);
  }

  // optional .google.protobuf.StringValue path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->path_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeographyMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.GeographyMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GeographyMeta* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GeographyMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.GeographyMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.GeographyMeta)
    MergeFrom(*source);
  }
}

void GeographyMeta::MergeFrom(const GeographyMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.GeographyMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_texture()) {
    mutable_texture()->::google::protobuf::StringValue::MergeFrom(from.texture());
  }
  if (from.has_path()) {
    mutable_path()->::google::protobuf::StringValue::MergeFrom(from.path());
  }
}

void GeographyMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.GeographyMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeographyMeta::CopyFrom(const GeographyMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.GeographyMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeographyMeta::IsInitialized() const {

  return true;
}

void GeographyMeta::Swap(GeographyMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeographyMeta::InternalSwap(GeographyMeta* other) {
  std::swap(texture_, other->texture_);
  std::swap(path_, other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeographyMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeographyMeta_descriptor_;
  metadata.reflection = GeographyMeta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeographyMeta

// optional .google.protobuf.StringValue texture = 1;
bool GeographyMeta::has_texture() const {
  return !_is_default_instance_ && texture_ != NULL;
}
void GeographyMeta::clear_texture() {
  if (GetArenaNoVirtual() == NULL && texture_ != NULL) delete texture_;
  texture_ = NULL;
}
const ::google::protobuf::StringValue& GeographyMeta::texture() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyMeta.texture)
  return texture_ != NULL ? *texture_ : *default_instance_->texture_;
}
::google::protobuf::StringValue* GeographyMeta::mutable_texture() {
  
  if (texture_ == NULL) {
    texture_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyMeta.texture)
  return texture_;
}
::google::protobuf::StringValue* GeographyMeta::release_texture() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyMeta.texture)
  
  ::google::protobuf::StringValue* temp = texture_;
  texture_ = NULL;
  return temp;
}
void GeographyMeta::set_allocated_texture(::google::protobuf::StringValue* texture) {
  delete texture_;
  if (texture != NULL && texture->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_texture = new ::google::protobuf::StringValue;
    new_texture->CopyFrom(*texture);
    texture = new_texture;
  }
  texture_ = texture;
  if (texture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyMeta.texture)
}

// optional .google.protobuf.StringValue path = 2;
bool GeographyMeta::has_path() const {
  return !_is_default_instance_ && path_ != NULL;
}
void GeographyMeta::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
const ::google::protobuf::StringValue& GeographyMeta::path() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyMeta.path)
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
::google::protobuf::StringValue* GeographyMeta::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyMeta.path)
  return path_;
}
::google::protobuf::StringValue* GeographyMeta::release_path() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyMeta.path)
  
  ::google::protobuf::StringValue* temp = path_;
  path_ = NULL;
  return temp;
}
void GeographyMeta::set_allocated_path(::google::protobuf::StringValue* path) {
  delete path_;
  if (path != NULL && path->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_path = new ::google::protobuf::StringValue;
    new_path->CopyFrom(*path);
    path = new_path;
  }
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyMeta.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeographyList::kGeographiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeographyList::GeographyList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.GeographyList)
}

void GeographyList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GeographyList::GeographyList(const GeographyList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.GeographyList)
}

void GeographyList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GeographyList::~GeographyList() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.GeographyList)
  SharedDtor();
}

void GeographyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeographyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeographyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeographyList_descriptor_;
}

const GeographyList& GeographyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto();
  return *default_instance_;
}

GeographyList* GeographyList::default_instance_ = NULL;

GeographyList* GeographyList::New(::google::protobuf::Arena* arena) const {
  GeographyList* n = new GeographyList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeographyList::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.GeographyList)
  geographies_.Clear();
}

bool GeographyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.GeographyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mtm.geo.model.Geography geographies = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_geographies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_geographies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_geographies;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.GeographyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.GeographyList)
  return false;
#undef DO_
}

void GeographyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.GeographyList)
  // repeated .mtm.geo.model.Geography geographies = 1;
  for (unsigned int i = 0, n = this->geographies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geographies(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.geo.model.GeographyList)
}

::google::protobuf::uint8* GeographyList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.GeographyList)
  // repeated .mtm.geo.model.Geography geographies = 1;
  for (unsigned int i = 0, n = this->geographies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->geographies(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.GeographyList)
  return target;
}

int GeographyList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.GeographyList)
  int total_size = 0;

  // repeated .mtm.geo.model.Geography geographies = 1;
  total_size += 1 * this->geographies_size();
  for (int i = 0; i < this->geographies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->geographies(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeographyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.GeographyList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GeographyList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GeographyList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.GeographyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.GeographyList)
    MergeFrom(*source);
  }
}

void GeographyList::MergeFrom(const GeographyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.GeographyList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  geographies_.MergeFrom(from.geographies_);
}

void GeographyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.GeographyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeographyList::CopyFrom(const GeographyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.GeographyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeographyList::IsInitialized() const {

  return true;
}

void GeographyList::Swap(GeographyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeographyList::InternalSwap(GeographyList* other) {
  geographies_.UnsafeArenaSwap(&other->geographies_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeographyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeographyList_descriptor_;
  metadata.reflection = GeographyList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeographyList

// repeated .mtm.geo.model.Geography geographies = 1;
int GeographyList::geographies_size() const {
  return geographies_.size();
}
void GeographyList::clear_geographies() {
  geographies_.Clear();
}
const ::mtm::geo::model::Geography& GeographyList::geographies(int index) const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyList.geographies)
  return geographies_.Get(index);
}
::mtm::geo::model::Geography* GeographyList::mutable_geographies(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyList.geographies)
  return geographies_.Mutable(index);
}
::mtm::geo::model::Geography* GeographyList::add_geographies() {
  // @@protoc_insertion_point(field_add:mtm.geo.model.GeographyList.geographies)
  return geographies_.Add();
}
::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Geography >*
GeographyList::mutable_geographies() {
  // @@protoc_insertion_point(field_mutable_list:mtm.geo.model.GeographyList.geographies)
  return &geographies_;
}
const ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Geography >&
GeographyList::geographies() const {
  // @@protoc_insertion_point(field_list:mtm.geo.model.GeographyList.geographies)
  return geographies_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace geo
}  // namespace mtm

// @@protoc_insertion_point(global_scope)
