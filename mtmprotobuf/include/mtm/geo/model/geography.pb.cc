// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/geography.proto

#include "mtm/geo/model/geography.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringValue;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_mtm_2fcommon_5ftypes_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fcommon_5ftypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Uuid;
}  // namespace protobuf_mtm_2fcommon_5ftypes_2eproto
namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GeographyMeta;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Geography;
}  // namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto
namespace mtm {
namespace geo {
namespace model {
class GeographyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Geography>
      _instance;
} _Geography_default_instance_;
class GeographyMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeographyMeta>
      _instance;
} _GeographyMeta_default_instance_;
class GeographyListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeographyList>
      _instance;
} _GeographyList_default_instance_;
}  // namespace model
}  // namespace geo
}  // namespace mtm
namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto {
static void InitDefaultsGeography() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mtm::geo::model::_Geography_default_instance_;
    new (ptr) ::mtm::geo::model::Geography();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mtm::geo::model::Geography::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Geography =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsGeography}, {
      &protobuf_mtm_2fcommon_5ftypes_2eproto::scc_info_Uuid.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::scc_info_GeographyMeta.base,}};

static void InitDefaultsGeographyMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mtm::geo::model::_GeographyMeta_default_instance_;
    new (ptr) ::mtm::geo::model::GeographyMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mtm::geo::model::GeographyMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GeographyMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGeographyMeta}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,}};

static void InitDefaultsGeographyList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mtm::geo::model::_GeographyList_default_instance_;
    new (ptr) ::mtm::geo::model::GeographyList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mtm::geo::model::GeographyList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GeographyList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGeographyList}, {
      &protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::scc_info_Geography.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Geography.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeographyMeta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeographyList.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, primary_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, geography_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, created_by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, edited_by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, edited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, valid_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, valid_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, is_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, wkt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, public_permission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Geography, meta_properties_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyMeta, texture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyMeta, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyList, geographies_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mtm::geo::model::Geography)},
  { 21, -1, sizeof(::mtm::geo::model::GeographyMeta)},
  { 28, -1, sizeof(::mtm::geo::model::GeographyList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mtm::geo::model::_Geography_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mtm::geo::model::_GeographyMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mtm::geo::model::_GeographyList_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mtm/geo/model/geography.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035mtm/geo/model/geography.proto\022\rmtm.geo"
      ".model\032\037google/protobuf/timestamp.proto\032"
      "\036google/protobuf/wrappers.proto\032\026mtm/com"
      "mon_types.proto\032%mtm/geo/model/geo_servi"
      "ce_enums.proto\"\200\005\n\tGeography\022\023\n\013primary_"
      "key\030\001 \001(\005\022\025\n\002id\030\002 \001(\0132\t.mtm.Uuid\0224\n\016geog"
      "raphy_type\030\003 \001(\0162\034.mtm.geo.model.Geograp"
      "hyType\022*\n\004name\030\004 \001(\0132\034.google.protobuf.S"
      "tringValue\022\022\n\ncreated_by\030\005 \001(\r\022+\n\007create"
      "d\030\006 \001(\0132\032.google.protobuf.Timestamp\022\021\n\te"
      "dited_by\030\007 \001(\r\022*\n\006edited\030\010 \001(\0132\032.google."
      "protobuf.Timestamp\0221\n\013description\030\t \001(\0132"
      "\034.google.protobuf.StringValue\022.\n\nvalid_f"
      "rom\030\n \001(\0132\032.google.protobuf.Timestamp\022,\n"
      "\010valid_to\030\013 \001(\0132\032.google.protobuf.Timest"
      "amp\022\020\n\010is_valid\030\014 \001(\010\022)\n\003wkt\030\r \001(\0132\034.goo"
      "gle.protobuf.StringValue\022*\n\004meta\030\016 \001(\0132\034"
      ".google.protobuf.StringValue\0224\n\021public_p"
      "ermission\030\017 \001(\0162\031.mtm.geo.model.Permissi"
      "on\0225\n\017meta_properties\030\021 \001(\0132\034.mtm.geo.mo"
      "del.GeographyMeta\"j\n\rGeographyMeta\022-\n\007te"
      "xture\030\001 \001(\0132\034.google.protobuf.StringValu"
      "e\022*\n\004path\030\002 \001(\0132\034.google.protobuf.String"
      "Value\">\n\rGeographyList\022-\n\013geographies\030\001 "
      "\003(\0132\030.mtm.geo.model.Geographyb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 997);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/geo/model/geography.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_mtm_2fcommon_5ftypes_2eproto::AddDescriptors();
  ::protobuf_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto
namespace mtm {
namespace geo {
namespace model {

// ===================================================================

void Geography::InitAsDefaultInstance() {
  ::mtm::geo::model::_Geography_default_instance_._instance.get_mutable()->id_ = const_cast< ::mtm::Uuid*>(
      ::mtm::Uuid::internal_default_instance());
  ::mtm::geo::model::_Geography_default_instance_._instance.get_mutable()->name_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::mtm::geo::model::_Geography_default_instance_._instance.get_mutable()->created_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::mtm::geo::model::_Geography_default_instance_._instance.get_mutable()->edited_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::mtm::geo::model::_Geography_default_instance_._instance.get_mutable()->description_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::mtm::geo::model::_Geography_default_instance_._instance.get_mutable()->valid_from_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::mtm::geo::model::_Geography_default_instance_._instance.get_mutable()->valid_to_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::mtm::geo::model::_Geography_default_instance_._instance.get_mutable()->wkt_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::mtm::geo::model::_Geography_default_instance_._instance.get_mutable()->meta_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::mtm::geo::model::_Geography_default_instance_._instance.get_mutable()->meta_properties_ = const_cast< ::mtm::geo::model::GeographyMeta*>(
      ::mtm::geo::model::GeographyMeta::internal_default_instance());
}
void Geography::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void Geography::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
void Geography::clear_created() {
  if (GetArenaNoVirtual() == NULL && created_ != NULL) {
    delete created_;
  }
  created_ = NULL;
}
void Geography::clear_edited() {
  if (GetArenaNoVirtual() == NULL && edited_ != NULL) {
    delete edited_;
  }
  edited_ = NULL;
}
void Geography::clear_description() {
  if (GetArenaNoVirtual() == NULL && description_ != NULL) {
    delete description_;
  }
  description_ = NULL;
}
void Geography::clear_valid_from() {
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) {
    delete valid_from_;
  }
  valid_from_ = NULL;
}
void Geography::clear_valid_to() {
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) {
    delete valid_to_;
  }
  valid_to_ = NULL;
}
void Geography::clear_wkt() {
  if (GetArenaNoVirtual() == NULL && wkt_ != NULL) {
    delete wkt_;
  }
  wkt_ = NULL;
}
void Geography::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Geography::kPrimaryKeyFieldNumber;
const int Geography::kIdFieldNumber;
const int Geography::kGeographyTypeFieldNumber;
const int Geography::kNameFieldNumber;
const int Geography::kCreatedByFieldNumber;
const int Geography::kCreatedFieldNumber;
const int Geography::kEditedByFieldNumber;
const int Geography::kEditedFieldNumber;
const int Geography::kDescriptionFieldNumber;
const int Geography::kValidFromFieldNumber;
const int Geography::kValidToFieldNumber;
const int Geography::kIsValidFieldNumber;
const int Geography::kWktFieldNumber;
const int Geography::kMetaFieldNumber;
const int Geography::kPublicPermissionFieldNumber;
const int Geography::kMetaPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Geography::Geography()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::scc_info_Geography.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.Geography)
}
Geography::Geography(const Geography& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::mtm::Uuid(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_name()) {
    name_ = new ::google::protobuf::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  if (from.has_created()) {
    created_ = new ::google::protobuf::Timestamp(*from.created_);
  } else {
    created_ = NULL;
  }
  if (from.has_edited()) {
    edited_ = new ::google::protobuf::Timestamp(*from.edited_);
  } else {
    edited_ = NULL;
  }
  if (from.has_description()) {
    description_ = new ::google::protobuf::StringValue(*from.description_);
  } else {
    description_ = NULL;
  }
  if (from.has_valid_from()) {
    valid_from_ = new ::google::protobuf::Timestamp(*from.valid_from_);
  } else {
    valid_from_ = NULL;
  }
  if (from.has_valid_to()) {
    valid_to_ = new ::google::protobuf::Timestamp(*from.valid_to_);
  } else {
    valid_to_ = NULL;
  }
  if (from.has_wkt()) {
    wkt_ = new ::google::protobuf::StringValue(*from.wkt_);
  } else {
    wkt_ = NULL;
  }
  if (from.has_meta()) {
    meta_ = new ::google::protobuf::StringValue(*from.meta_);
  } else {
    meta_ = NULL;
  }
  if (from.has_meta_properties()) {
    meta_properties_ = new ::mtm::geo::model::GeographyMeta(*from.meta_properties_);
  } else {
    meta_properties_ = NULL;
  }
  ::memcpy(&primary_key_, &from.primary_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&public_permission_) -
    reinterpret_cast<char*>(&primary_key_)) + sizeof(public_permission_));
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.Geography)
}

void Geography::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_permission_) -
      reinterpret_cast<char*>(&id_)) + sizeof(public_permission_));
}

Geography::~Geography() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.Geography)
  SharedDtor();
}

void Geography::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete created_;
  if (this != internal_default_instance()) delete edited_;
  if (this != internal_default_instance()) delete description_;
  if (this != internal_default_instance()) delete valid_from_;
  if (this != internal_default_instance()) delete valid_to_;
  if (this != internal_default_instance()) delete wkt_;
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete meta_properties_;
}

void Geography::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Geography::descriptor() {
  ::protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Geography& Geography::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::scc_info_Geography.base);
  return *internal_default_instance();
}


void Geography::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.Geography)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  if (GetArenaNoVirtual() == NULL && created_ != NULL) {
    delete created_;
  }
  created_ = NULL;
  if (GetArenaNoVirtual() == NULL && edited_ != NULL) {
    delete edited_;
  }
  edited_ = NULL;
  if (GetArenaNoVirtual() == NULL && description_ != NULL) {
    delete description_;
  }
  description_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) {
    delete valid_from_;
  }
  valid_from_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) {
    delete valid_to_;
  }
  valid_to_ = NULL;
  if (GetArenaNoVirtual() == NULL && wkt_ != NULL) {
    delete wkt_;
  }
  wkt_ = NULL;
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
  if (GetArenaNoVirtual() == NULL && meta_properties_ != NULL) {
    delete meta_properties_;
  }
  meta_properties_ = NULL;
  ::memset(&primary_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_permission_) -
      reinterpret_cast<char*>(&primary_key_)) + sizeof(public_permission_));
  _internal_metadata_.Clear();
}

bool Geography::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.Geography)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 primary_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.Uuid id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.geo.model.GeographyType geography_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_geography_type(static_cast< ::mtm::geo::model::GeographyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 created_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &created_by_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 edited_by = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &edited_by_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp edited = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_edited()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue description = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp valid_from = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_valid_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp valid_to = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_valid_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_valid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue wkt = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wkt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue meta = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.geo.model.Permission public_permission = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_public_permission(static_cast< ::mtm::geo::model::Permission >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.geo.model.GeographyMeta meta_properties = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.Geography)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.Geography)
  return false;
#undef DO_
}

void Geography::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.Geography)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 primary_key = 1;
  if (this->primary_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->primary_key(), output);
  }

  // .mtm.Uuid id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_id(), output);
  }

  // .mtm.geo.model.GeographyType geography_type = 3;
  if (this->geography_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->geography_type(), output);
  }

  // .google.protobuf.StringValue name = 4;
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_name(), output);
  }

  // uint32 created_by = 5;
  if (this->created_by() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->created_by(), output);
  }

  // .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_created(), output);
  }

  // uint32 edited_by = 7;
  if (this->edited_by() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->edited_by(), output);
  }

  // .google.protobuf.Timestamp edited = 8;
  if (this->has_edited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_edited(), output);
  }

  // .google.protobuf.StringValue description = 9;
  if (this->has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_description(), output);
  }

  // .google.protobuf.Timestamp valid_from = 10;
  if (this->has_valid_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_valid_from(), output);
  }

  // .google.protobuf.Timestamp valid_to = 11;
  if (this->has_valid_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_valid_to(), output);
  }

  // bool is_valid = 12;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_valid(), output);
  }

  // .google.protobuf.StringValue wkt = 13;
  if (this->has_wkt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_wkt(), output);
  }

  // .google.protobuf.StringValue meta = 14;
  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_meta(), output);
  }

  // .mtm.geo.model.Permission public_permission = 15;
  if (this->public_permission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->public_permission(), output);
  }

  // .mtm.geo.model.GeographyMeta meta_properties = 17;
  if (this->has_meta_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_meta_properties(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mtm.geo.model.Geography)
}

::google::protobuf::uint8* Geography::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.Geography)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 primary_key = 1;
  if (this->primary_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->primary_key(), target);
  }

  // .mtm.Uuid id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_id(), deterministic, target);
  }

  // .mtm.geo.model.GeographyType geography_type = 3;
  if (this->geography_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->geography_type(), target);
  }

  // .google.protobuf.StringValue name = 4;
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_name(), deterministic, target);
  }

  // uint32 created_by = 5;
  if (this->created_by() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->created_by(), target);
  }

  // .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_created(), deterministic, target);
  }

  // uint32 edited_by = 7;
  if (this->edited_by() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->edited_by(), target);
  }

  // .google.protobuf.Timestamp edited = 8;
  if (this->has_edited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_edited(), deterministic, target);
  }

  // .google.protobuf.StringValue description = 9;
  if (this->has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_description(), deterministic, target);
  }

  // .google.protobuf.Timestamp valid_from = 10;
  if (this->has_valid_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_valid_from(), deterministic, target);
  }

  // .google.protobuf.Timestamp valid_to = 11;
  if (this->has_valid_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_valid_to(), deterministic, target);
  }

  // bool is_valid = 12;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_valid(), target);
  }

  // .google.protobuf.StringValue wkt = 13;
  if (this->has_wkt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_wkt(), deterministic, target);
  }

  // .google.protobuf.StringValue meta = 14;
  if (this->has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_meta(), deterministic, target);
  }

  // .mtm.geo.model.Permission public_permission = 15;
  if (this->public_permission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->public_permission(), target);
  }

  // .mtm.geo.model.GeographyMeta meta_properties = 17;
  if (this->has_meta_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_meta_properties(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.Geography)
  return target;
}

size_t Geography::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.Geography)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mtm.Uuid id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .google.protobuf.StringValue name = 4;
  if (this->has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *name_);
  }

  // .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // .google.protobuf.Timestamp edited = 8;
  if (this->has_edited()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *edited_);
  }

  // .google.protobuf.StringValue description = 9;
  if (this->has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *description_);
  }

  // .google.protobuf.Timestamp valid_from = 10;
  if (this->has_valid_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *valid_from_);
  }

  // .google.protobuf.Timestamp valid_to = 11;
  if (this->has_valid_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *valid_to_);
  }

  // .google.protobuf.StringValue wkt = 13;
  if (this->has_wkt()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *wkt_);
  }

  // .google.protobuf.StringValue meta = 14;
  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .mtm.geo.model.GeographyMeta meta_properties = 17;
  if (this->has_meta_properties()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *meta_properties_);
  }

  // int32 primary_key = 1;
  if (this->primary_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->primary_key());
  }

  // .mtm.geo.model.GeographyType geography_type = 3;
  if (this->geography_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->geography_type());
  }

  // uint32 created_by = 5;
  if (this->created_by() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->created_by());
  }

  // uint32 edited_by = 7;
  if (this->edited_by() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->edited_by());
  }

  // bool is_valid = 12;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // .mtm.geo.model.Permission public_permission = 15;
  if (this->public_permission() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->public_permission());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Geography::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.Geography)
  GOOGLE_DCHECK_NE(&from, this);
  const Geography* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Geography>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.Geography)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.Geography)
    MergeFrom(*source);
  }
}

void Geography::MergeFrom(const Geography& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.Geography)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::mtm::Uuid::MergeFrom(from.id());
  }
  if (from.has_name()) {
    mutable_name()->::google::protobuf::StringValue::MergeFrom(from.name());
  }
  if (from.has_created()) {
    mutable_created()->::google::protobuf::Timestamp::MergeFrom(from.created());
  }
  if (from.has_edited()) {
    mutable_edited()->::google::protobuf::Timestamp::MergeFrom(from.edited());
  }
  if (from.has_description()) {
    mutable_description()->::google::protobuf::StringValue::MergeFrom(from.description());
  }
  if (from.has_valid_from()) {
    mutable_valid_from()->::google::protobuf::Timestamp::MergeFrom(from.valid_from());
  }
  if (from.has_valid_to()) {
    mutable_valid_to()->::google::protobuf::Timestamp::MergeFrom(from.valid_to());
  }
  if (from.has_wkt()) {
    mutable_wkt()->::google::protobuf::StringValue::MergeFrom(from.wkt());
  }
  if (from.has_meta()) {
    mutable_meta()->::google::protobuf::StringValue::MergeFrom(from.meta());
  }
  if (from.has_meta_properties()) {
    mutable_meta_properties()->::mtm::geo::model::GeographyMeta::MergeFrom(from.meta_properties());
  }
  if (from.primary_key() != 0) {
    set_primary_key(from.primary_key());
  }
  if (from.geography_type() != 0) {
    set_geography_type(from.geography_type());
  }
  if (from.created_by() != 0) {
    set_created_by(from.created_by());
  }
  if (from.edited_by() != 0) {
    set_edited_by(from.edited_by());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
  if (from.public_permission() != 0) {
    set_public_permission(from.public_permission());
  }
}

void Geography::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.Geography)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geography::CopyFrom(const Geography& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.Geography)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geography::IsInitialized() const {
  return true;
}

void Geography::Swap(Geography* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Geography::InternalSwap(Geography* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(name_, other->name_);
  swap(created_, other->created_);
  swap(edited_, other->edited_);
  swap(description_, other->description_);
  swap(valid_from_, other->valid_from_);
  swap(valid_to_, other->valid_to_);
  swap(wkt_, other->wkt_);
  swap(meta_, other->meta_);
  swap(meta_properties_, other->meta_properties_);
  swap(primary_key_, other->primary_key_);
  swap(geography_type_, other->geography_type_);
  swap(created_by_, other->created_by_);
  swap(edited_by_, other->edited_by_);
  swap(is_valid_, other->is_valid_);
  swap(public_permission_, other->public_permission_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Geography::GetMetadata() const {
  protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GeographyMeta::InitAsDefaultInstance() {
  ::mtm::geo::model::_GeographyMeta_default_instance_._instance.get_mutable()->texture_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::mtm::geo::model::_GeographyMeta_default_instance_._instance.get_mutable()->path_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}
void GeographyMeta::clear_texture() {
  if (GetArenaNoVirtual() == NULL && texture_ != NULL) {
    delete texture_;
  }
  texture_ = NULL;
}
void GeographyMeta::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeographyMeta::kTextureFieldNumber;
const int GeographyMeta::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeographyMeta::GeographyMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::scc_info_GeographyMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.GeographyMeta)
}
GeographyMeta::GeographyMeta(const GeographyMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_texture()) {
    texture_ = new ::google::protobuf::StringValue(*from.texture_);
  } else {
    texture_ = NULL;
  }
  if (from.has_path()) {
    path_ = new ::google::protobuf::StringValue(*from.path_);
  } else {
    path_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.GeographyMeta)
}

void GeographyMeta::SharedCtor() {
  ::memset(&texture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_) -
      reinterpret_cast<char*>(&texture_)) + sizeof(path_));
}

GeographyMeta::~GeographyMeta() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.GeographyMeta)
  SharedDtor();
}

void GeographyMeta::SharedDtor() {
  if (this != internal_default_instance()) delete texture_;
  if (this != internal_default_instance()) delete path_;
}

void GeographyMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeographyMeta::descriptor() {
  ::protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeographyMeta& GeographyMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::scc_info_GeographyMeta.base);
  return *internal_default_instance();
}


void GeographyMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.GeographyMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && texture_ != NULL) {
    delete texture_;
  }
  texture_ = NULL;
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
  _internal_metadata_.Clear();
}

bool GeographyMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.GeographyMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.StringValue texture = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_texture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.GeographyMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.GeographyMeta)
  return false;
#undef DO_
}

void GeographyMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.GeographyMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue texture = 1;
  if (this->has_texture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_texture(), output);
  }

  // .google.protobuf.StringValue path = 2;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mtm.geo.model.GeographyMeta)
}

::google::protobuf::uint8* GeographyMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.GeographyMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue texture = 1;
  if (this->has_texture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_texture(), deterministic, target);
  }

  // .google.protobuf.StringValue path = 2;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_path(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.GeographyMeta)
  return target;
}

size_t GeographyMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.GeographyMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.StringValue texture = 1;
  if (this->has_texture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *texture_);
  }

  // .google.protobuf.StringValue path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeographyMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.GeographyMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const GeographyMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeographyMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.GeographyMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.GeographyMeta)
    MergeFrom(*source);
  }
}

void GeographyMeta::MergeFrom(const GeographyMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.GeographyMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_texture()) {
    mutable_texture()->::google::protobuf::StringValue::MergeFrom(from.texture());
  }
  if (from.has_path()) {
    mutable_path()->::google::protobuf::StringValue::MergeFrom(from.path());
  }
}

void GeographyMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.GeographyMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeographyMeta::CopyFrom(const GeographyMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.GeographyMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeographyMeta::IsInitialized() const {
  return true;
}

void GeographyMeta::Swap(GeographyMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeographyMeta::InternalSwap(GeographyMeta* other) {
  using std::swap;
  swap(texture_, other->texture_);
  swap(path_, other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeographyMeta::GetMetadata() const {
  protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GeographyList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeographyList::kGeographiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeographyList::GeographyList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::scc_info_GeographyList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.GeographyList)
}
GeographyList::GeographyList(const GeographyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      geographies_(from.geographies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.GeographyList)
}

void GeographyList::SharedCtor() {
}

GeographyList::~GeographyList() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.GeographyList)
  SharedDtor();
}

void GeographyList::SharedDtor() {
}

void GeographyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeographyList::descriptor() {
  ::protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeographyList& GeographyList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::scc_info_GeographyList.base);
  return *internal_default_instance();
}


void GeographyList::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.GeographyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geographies_.Clear();
  _internal_metadata_.Clear();
}

bool GeographyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.GeographyList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mtm.geo.model.Geography geographies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_geographies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.GeographyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.GeographyList)
  return false;
#undef DO_
}

void GeographyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.GeographyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mtm.geo.model.Geography geographies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geographies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->geographies(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mtm.geo.model.GeographyList)
}

::google::protobuf::uint8* GeographyList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.GeographyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mtm.geo.model.Geography geographies = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geographies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->geographies(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.GeographyList)
  return target;
}

size_t GeographyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.GeographyList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .mtm.geo.model.Geography geographies = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->geographies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->geographies(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeographyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.GeographyList)
  GOOGLE_DCHECK_NE(&from, this);
  const GeographyList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeographyList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.GeographyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.GeographyList)
    MergeFrom(*source);
  }
}

void GeographyList::MergeFrom(const GeographyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.GeographyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geographies_.MergeFrom(from.geographies_);
}

void GeographyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.GeographyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeographyList::CopyFrom(const GeographyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.GeographyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeographyList::IsInitialized() const {
  return true;
}

void GeographyList::Swap(GeographyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeographyList::InternalSwap(GeographyList* other) {
  using std::swap;
  CastToBase(&geographies_)->InternalSwap(CastToBase(&other->geographies_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeographyList::GetMetadata() const {
  protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace geo
}  // namespace mtm
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mtm::geo::model::Geography* Arena::CreateMaybeMessage< ::mtm::geo::model::Geography >(Arena* arena) {
  return Arena::CreateInternal< ::mtm::geo::model::Geography >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mtm::geo::model::GeographyMeta* Arena::CreateMaybeMessage< ::mtm::geo::model::GeographyMeta >(Arena* arena) {
  return Arena::CreateInternal< ::mtm::geo::model::GeographyMeta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mtm::geo::model::GeographyList* Arena::CreateMaybeMessage< ::mtm::geo::model::GeographyList >(Arena* arena) {
  return Arena::CreateInternal< ::mtm::geo::model::GeographyList >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
