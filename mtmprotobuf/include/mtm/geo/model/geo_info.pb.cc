// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/geo_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtm/geo/model/geo_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mtm {
namespace geo {
namespace model {

namespace {

const ::google::protobuf::Descriptor* GeoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeo_5finfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeo_5finfo_2eproto() {
  protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeo_5finfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mtm/geo/model/geo_info.proto");
  GOOGLE_CHECK(file != NULL);
  GeoInfo_descriptor_ = file->message_type(0);
  static const int GeoInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo, source_),
  };
  GeoInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GeoInfo_descriptor_,
      GeoInfo::default_instance_,
      GeoInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GeoInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoInfo, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeo_5finfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GeoInfo_descriptor_, &GeoInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeo_5finfo_2eproto() {
  delete GeoInfo::default_instance_;
  delete GeoInfo_reflection_;
}

void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeo_5finfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeo_5finfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034mtm/geo/model/geo_info.proto\022\rmtm.geo."
    "model\"\031\n\007GeoInfo\022\016\n\006source\030\001 \001(\rb\006proto3", 80);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/geo/model/geo_info.proto", &protobuf_RegisterTypes);
  GeoInfo::default_instance_ = new GeoInfo();
  GeoInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeo_5finfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtm_2fgeo_2fmodel_2fgeo_5finfo_2eproto {
  StaticDescriptorInitializer_mtm_2fgeo_2fmodel_2fgeo_5finfo_2eproto() {
    protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeo_5finfo_2eproto();
  }
} static_descriptor_initializer_mtm_2fgeo_2fmodel_2fgeo_5finfo_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoInfo::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoInfo::GeoInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.GeoInfo)
}

void GeoInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GeoInfo::GeoInfo(const GeoInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.GeoInfo)
}

void GeoInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  source_ = 0u;
}

GeoInfo::~GeoInfo() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.GeoInfo)
  SharedDtor();
}

void GeoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoInfo_descriptor_;
}

const GeoInfo& GeoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeo_5finfo_2eproto();
  return *default_instance_;
}

GeoInfo* GeoInfo::default_instance_ = NULL;

GeoInfo* GeoInfo::New(::google::protobuf::Arena* arena) const {
  GeoInfo* n = new GeoInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.GeoInfo)
  source_ = 0u;
}

bool GeoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.GeoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.GeoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.GeoInfo)
  return false;
#undef DO_
}

void GeoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.GeoInfo)
  // optional uint32 source = 1;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source(), output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.geo.model.GeoInfo)
}

::google::protobuf::uint8* GeoInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.GeoInfo)
  // optional uint32 source = 1;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.GeoInfo)
  return target;
}

int GeoInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.GeoInfo)
  int total_size = 0;

  // optional uint32 source = 1;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.GeoInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GeoInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.GeoInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.GeoInfo)
    MergeFrom(*source);
  }
}

void GeoInfo::MergeFrom(const GeoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.GeoInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
}

void GeoInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.GeoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoInfo::CopyFrom(const GeoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.GeoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoInfo::IsInitialized() const {

  return true;
}

void GeoInfo::Swap(GeoInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoInfo::InternalSwap(GeoInfo* other) {
  std::swap(source_, other->source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoInfo_descriptor_;
  metadata.reflection = GeoInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoInfo

// optional uint32 source = 1;
void GeoInfo::clear_source() {
  source_ = 0u;
}
 ::google::protobuf::uint32 GeoInfo::source() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeoInfo.source)
  return source_;
}
 void GeoInfo::set_source(::google::protobuf::uint32 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.GeoInfo.source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace geo
}  // namespace mtm

// @@protoc_insertion_point(global_scope)
