// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/geography_resource.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtm/geo/model/geography_resource.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mtm {
namespace geo {
namespace model {

namespace {

const ::google::protobuf::Descriptor* GeographyResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeographyResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeographyResourceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeographyResourceList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto() {
  protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mtm/geo/model/geography_resource.proto");
  GOOGLE_CHECK(file != NULL);
  GeographyResource_descriptor_ = file->message_type(0);
  static const int GeographyResource_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResource, primary_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResource, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResource, geography_resource_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResource, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResource, created_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResource, created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResource, valid_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResource, valid_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResource, is_valid_),
  };
  GeographyResource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GeographyResource_descriptor_,
      GeographyResource::default_instance_,
      GeographyResource_offsets_,
      -1,
      -1,
      -1,
      sizeof(GeographyResource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResource, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResource, _is_default_instance_));
  GeographyResourceList_descriptor_ = file->message_type(1);
  static const int GeographyResourceList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResourceList, geographyresources_),
  };
  GeographyResourceList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GeographyResourceList_descriptor_,
      GeographyResourceList::default_instance_,
      GeographyResourceList_offsets_,
      -1,
      -1,
      -1,
      sizeof(GeographyResourceList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResourceList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeographyResourceList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GeographyResource_descriptor_, &GeographyResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GeographyResourceList_descriptor_, &GeographyResourceList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto() {
  delete GeographyResource::default_instance_;
  delete GeographyResource_reflection_;
  delete GeographyResourceList::default_instance_;
  delete GeographyResourceList_reflection_;
}

void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::mtm::protobuf_AddDesc_mtm_2fcommon_5ftypes_2eproto();
  ::mtm::geo::model::protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&mtm/geo/model/geography_resource.proto"
    "\022\rmtm.geo.model\032\037google/protobuf/timesta"
    "mp.proto\032\036google/protobuf/wrappers.proto"
    "\032\026mtm/common_types.proto\032%mtm/geo/model/"
    "geo_service_enums.proto\"\343\002\n\021GeographyRes"
    "ource\022\023\n\013primary_key\030\001 \001(\005\022\025\n\002id\030\002 \001(\0132\t"
    ".mtm.Uuid\022E\n\027geography_resource_type\030\003 \001"
    "(\0162$.mtm.geo.model.GeographyResourceType"
    "\022*\n\004name\030\004 \001(\0132\034.google.protobuf.StringV"
    "alue\022\022\n\ncreated_by\030\005 \001(\r\022+\n\007created\030\006 \001("
    "\0132\032.google.protobuf.Timestamp\022.\n\nvalid_f"
    "rom\030\007 \001(\0132\032.google.protobuf.Timestamp\022,\n"
    "\010valid_to\030\010 \001(\0132\032.google.protobuf.Timest"
    "amp\022\020\n\010is_valid\030\t \001(\010\"U\n\025GeographyResour"
    "ceList\022<\n\022geographyResources\030\001 \003(\0132 .mtm"
    ".geo.model.GeographyResourceb\006proto3", 636);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/geo/model/geography_resource.proto", &protobuf_RegisterTypes);
  GeographyResource::default_instance_ = new GeographyResource();
  GeographyResourceList::default_instance_ = new GeographyResourceList();
  GeographyResource::default_instance_->InitAsDefaultInstance();
  GeographyResourceList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto {
  StaticDescriptorInitializer_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto() {
    protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto();
  }
} static_descriptor_initializer_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeographyResource::kPrimaryKeyFieldNumber;
const int GeographyResource::kIdFieldNumber;
const int GeographyResource::kGeographyResourceTypeFieldNumber;
const int GeographyResource::kNameFieldNumber;
const int GeographyResource::kCreatedByFieldNumber;
const int GeographyResource::kCreatedFieldNumber;
const int GeographyResource::kValidFromFieldNumber;
const int GeographyResource::kValidToFieldNumber;
const int GeographyResource::kIsValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeographyResource::GeographyResource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.GeographyResource)
}

void GeographyResource::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  id_ = const_cast< ::mtm::Uuid*>(&::mtm::Uuid::default_instance());
  name_ = const_cast< ::google::protobuf::StringValue*>(&::google::protobuf::StringValue::default_instance());
  created_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  valid_from_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  valid_to_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
}

GeographyResource::GeographyResource(const GeographyResource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.GeographyResource)
}

void GeographyResource::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  primary_key_ = 0;
  id_ = NULL;
  geography_resource_type_ = 0;
  name_ = NULL;
  created_by_ = 0u;
  created_ = NULL;
  valid_from_ = NULL;
  valid_to_ = NULL;
  is_valid_ = false;
}

GeographyResource::~GeographyResource() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.GeographyResource)
  SharedDtor();
}

void GeographyResource::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete name_;
    delete created_;
    delete valid_from_;
    delete valid_to_;
  }
}

void GeographyResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeographyResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeographyResource_descriptor_;
}

const GeographyResource& GeographyResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto();
  return *default_instance_;
}

GeographyResource* GeographyResource::default_instance_ = NULL;

GeographyResource* GeographyResource::New(::google::protobuf::Arena* arena) const {
  GeographyResource* n = new GeographyResource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeographyResource::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.GeographyResource)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GeographyResource, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GeographyResource*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(primary_key_, geography_resource_type_);
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && name_ != NULL) delete name_;
  name_ = NULL;
  created_by_ = 0u;
  if (GetArenaNoVirtual() == NULL && created_ != NULL) delete created_;
  created_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) delete valid_from_;
  valid_from_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) delete valid_to_;
  valid_to_ = NULL;
  is_valid_ = false;

#undef ZR_HELPER_
#undef ZR_

}

bool GeographyResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.GeographyResource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 primary_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional .mtm.Uuid id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_geography_resource_type;
        break;
      }

      // optional .mtm.geo.model.GeographyResourceType geography_resource_type = 3;
      case 3: {
        if (tag == 24) {
         parse_geography_resource_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_geography_resource_type(static_cast< ::mtm::geo::model::GeographyResourceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional .google.protobuf.StringValue name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_created_by;
        break;
      }

      // optional uint32 created_by = 5;
      case 5: {
        if (tag == 40) {
         parse_created_by:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &created_by_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_created;
        break;
      }

      // optional .google.protobuf.Timestamp created = 6;
      case 6: {
        if (tag == 50) {
         parse_created:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_created()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_valid_from;
        break;
      }

      // optional .google.protobuf.Timestamp valid_from = 7;
      case 7: {
        if (tag == 58) {
         parse_valid_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valid_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_valid_to;
        break;
      }

      // optional .google.protobuf.Timestamp valid_to = 8;
      case 8: {
        if (tag == 66) {
         parse_valid_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valid_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_valid;
        break;
      }

      // optional bool is_valid = 9;
      case 9: {
        if (tag == 72) {
         parse_is_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.GeographyResource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.GeographyResource)
  return false;
#undef DO_
}

void GeographyResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.GeographyResource)
  // optional int32 primary_key = 1;
  if (this->primary_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->primary_key(), output);
  }

  // optional .mtm.Uuid id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->id_, output);
  }

  // optional .mtm.geo.model.GeographyResourceType geography_resource_type = 3;
  if (this->geography_resource_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->geography_resource_type(), output);
  }

  // optional .google.protobuf.StringValue name = 4;
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->name_, output);
  }

  // optional uint32 created_by = 5;
  if (this->created_by() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->created_by(), output);
  }

  // optional .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->created_, output);
  }

  // optional .google.protobuf.Timestamp valid_from = 7;
  if (this->has_valid_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->valid_from_, output);
  }

  // optional .google.protobuf.Timestamp valid_to = 8;
  if (this->has_valid_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->valid_to_, output);
  }

  // optional bool is_valid = 9;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_valid(), output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.geo.model.GeographyResource)
}

::google::protobuf::uint8* GeographyResource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.GeographyResource)
  // optional int32 primary_key = 1;
  if (this->primary_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->primary_key(), target);
  }

  // optional .mtm.Uuid id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->id_, false, target);
  }

  // optional .mtm.geo.model.GeographyResourceType geography_resource_type = 3;
  if (this->geography_resource_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->geography_resource_type(), target);
  }

  // optional .google.protobuf.StringValue name = 4;
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->name_, false, target);
  }

  // optional uint32 created_by = 5;
  if (this->created_by() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->created_by(), target);
  }

  // optional .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->created_, false, target);
  }

  // optional .google.protobuf.Timestamp valid_from = 7;
  if (this->has_valid_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->valid_from_, false, target);
  }

  // optional .google.protobuf.Timestamp valid_to = 8;
  if (this->has_valid_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->valid_to_, false, target);
  }

  // optional bool is_valid = 9;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_valid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.GeographyResource)
  return target;
}

int GeographyResource::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.GeographyResource)
  int total_size = 0;

  // optional int32 primary_key = 1;
  if (this->primary_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->primary_key());
  }

  // optional .mtm.Uuid id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // optional .mtm.geo.model.GeographyResourceType geography_resource_type = 3;
  if (this->geography_resource_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->geography_resource_type());
  }

  // optional .google.protobuf.StringValue name = 4;
  if (this->has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->name_);
  }

  // optional uint32 created_by = 5;
  if (this->created_by() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->created_by());
  }

  // optional .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->created_);
  }

  // optional .google.protobuf.Timestamp valid_from = 7;
  if (this->has_valid_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->valid_from_);
  }

  // optional .google.protobuf.Timestamp valid_to = 8;
  if (this->has_valid_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->valid_to_);
  }

  // optional bool is_valid = 9;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeographyResource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.GeographyResource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GeographyResource* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GeographyResource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.GeographyResource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.GeographyResource)
    MergeFrom(*source);
  }
}

void GeographyResource::MergeFrom(const GeographyResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.GeographyResource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.primary_key() != 0) {
    set_primary_key(from.primary_key());
  }
  if (from.has_id()) {
    mutable_id()->::mtm::Uuid::MergeFrom(from.id());
  }
  if (from.geography_resource_type() != 0) {
    set_geography_resource_type(from.geography_resource_type());
  }
  if (from.has_name()) {
    mutable_name()->::google::protobuf::StringValue::MergeFrom(from.name());
  }
  if (from.created_by() != 0) {
    set_created_by(from.created_by());
  }
  if (from.has_created()) {
    mutable_created()->::google::protobuf::Timestamp::MergeFrom(from.created());
  }
  if (from.has_valid_from()) {
    mutable_valid_from()->::google::protobuf::Timestamp::MergeFrom(from.valid_from());
  }
  if (from.has_valid_to()) {
    mutable_valid_to()->::google::protobuf::Timestamp::MergeFrom(from.valid_to());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
}

void GeographyResource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.GeographyResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeographyResource::CopyFrom(const GeographyResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.GeographyResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeographyResource::IsInitialized() const {

  return true;
}

void GeographyResource::Swap(GeographyResource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeographyResource::InternalSwap(GeographyResource* other) {
  std::swap(primary_key_, other->primary_key_);
  std::swap(id_, other->id_);
  std::swap(geography_resource_type_, other->geography_resource_type_);
  std::swap(name_, other->name_);
  std::swap(created_by_, other->created_by_);
  std::swap(created_, other->created_);
  std::swap(valid_from_, other->valid_from_);
  std::swap(valid_to_, other->valid_to_);
  std::swap(is_valid_, other->is_valid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeographyResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeographyResource_descriptor_;
  metadata.reflection = GeographyResource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeographyResource

// optional int32 primary_key = 1;
void GeographyResource::clear_primary_key() {
  primary_key_ = 0;
}
 ::google::protobuf::int32 GeographyResource::primary_key() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.primary_key)
  return primary_key_;
}
 void GeographyResource::set_primary_key(::google::protobuf::int32 value) {
  
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.GeographyResource.primary_key)
}

// optional .mtm.Uuid id = 2;
bool GeographyResource::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
void GeographyResource::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::mtm::Uuid& GeographyResource::id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::mtm::Uuid* GeographyResource::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyResource.id)
  return id_;
}
::mtm::Uuid* GeographyResource::release_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyResource.id)
  
  ::mtm::Uuid* temp = id_;
  id_ = NULL;
  return temp;
}
void GeographyResource::set_allocated_id(::mtm::Uuid* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyResource.id)
}

// optional .mtm.geo.model.GeographyResourceType geography_resource_type = 3;
void GeographyResource::clear_geography_resource_type() {
  geography_resource_type_ = 0;
}
 ::mtm::geo::model::GeographyResourceType GeographyResource::geography_resource_type() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.geography_resource_type)
  return static_cast< ::mtm::geo::model::GeographyResourceType >(geography_resource_type_);
}
 void GeographyResource::set_geography_resource_type(::mtm::geo::model::GeographyResourceType value) {
  
  geography_resource_type_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.GeographyResource.geography_resource_type)
}

// optional .google.protobuf.StringValue name = 4;
bool GeographyResource::has_name() const {
  return !_is_default_instance_ && name_ != NULL;
}
void GeographyResource::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) delete name_;
  name_ = NULL;
}
const ::google::protobuf::StringValue& GeographyResource::name() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.name)
  return name_ != NULL ? *name_ : *default_instance_->name_;
}
::google::protobuf::StringValue* GeographyResource::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyResource.name)
  return name_;
}
::google::protobuf::StringValue* GeographyResource::release_name() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyResource.name)
  
  ::google::protobuf::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
void GeographyResource::set_allocated_name(::google::protobuf::StringValue* name) {
  delete name_;
  if (name != NULL && name->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_name = new ::google::protobuf::StringValue;
    new_name->CopyFrom(*name);
    name = new_name;
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyResource.name)
}

// optional uint32 created_by = 5;
void GeographyResource::clear_created_by() {
  created_by_ = 0u;
}
 ::google::protobuf::uint32 GeographyResource::created_by() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.created_by)
  return created_by_;
}
 void GeographyResource::set_created_by(::google::protobuf::uint32 value) {
  
  created_by_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.GeographyResource.created_by)
}

// optional .google.protobuf.Timestamp created = 6;
bool GeographyResource::has_created() const {
  return !_is_default_instance_ && created_ != NULL;
}
void GeographyResource::clear_created() {
  if (GetArenaNoVirtual() == NULL && created_ != NULL) delete created_;
  created_ = NULL;
}
const ::google::protobuf::Timestamp& GeographyResource::created() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.created)
  return created_ != NULL ? *created_ : *default_instance_->created_;
}
::google::protobuf::Timestamp* GeographyResource::mutable_created() {
  
  if (created_ == NULL) {
    created_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyResource.created)
  return created_;
}
::google::protobuf::Timestamp* GeographyResource::release_created() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyResource.created)
  
  ::google::protobuf::Timestamp* temp = created_;
  created_ = NULL;
  return temp;
}
void GeographyResource::set_allocated_created(::google::protobuf::Timestamp* created) {
  delete created_;
  if (created != NULL && created->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_created = new ::google::protobuf::Timestamp;
    new_created->CopyFrom(*created);
    created = new_created;
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyResource.created)
}

// optional .google.protobuf.Timestamp valid_from = 7;
bool GeographyResource::has_valid_from() const {
  return !_is_default_instance_ && valid_from_ != NULL;
}
void GeographyResource::clear_valid_from() {
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) delete valid_from_;
  valid_from_ = NULL;
}
const ::google::protobuf::Timestamp& GeographyResource::valid_from() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.valid_from)
  return valid_from_ != NULL ? *valid_from_ : *default_instance_->valid_from_;
}
::google::protobuf::Timestamp* GeographyResource::mutable_valid_from() {
  
  if (valid_from_ == NULL) {
    valid_from_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyResource.valid_from)
  return valid_from_;
}
::google::protobuf::Timestamp* GeographyResource::release_valid_from() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyResource.valid_from)
  
  ::google::protobuf::Timestamp* temp = valid_from_;
  valid_from_ = NULL;
  return temp;
}
void GeographyResource::set_allocated_valid_from(::google::protobuf::Timestamp* valid_from) {
  delete valid_from_;
  if (valid_from != NULL && valid_from->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_valid_from = new ::google::protobuf::Timestamp;
    new_valid_from->CopyFrom(*valid_from);
    valid_from = new_valid_from;
  }
  valid_from_ = valid_from;
  if (valid_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyResource.valid_from)
}

// optional .google.protobuf.Timestamp valid_to = 8;
bool GeographyResource::has_valid_to() const {
  return !_is_default_instance_ && valid_to_ != NULL;
}
void GeographyResource::clear_valid_to() {
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) delete valid_to_;
  valid_to_ = NULL;
}
const ::google::protobuf::Timestamp& GeographyResource::valid_to() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.valid_to)
  return valid_to_ != NULL ? *valid_to_ : *default_instance_->valid_to_;
}
::google::protobuf::Timestamp* GeographyResource::mutable_valid_to() {
  
  if (valid_to_ == NULL) {
    valid_to_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyResource.valid_to)
  return valid_to_;
}
::google::protobuf::Timestamp* GeographyResource::release_valid_to() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyResource.valid_to)
  
  ::google::protobuf::Timestamp* temp = valid_to_;
  valid_to_ = NULL;
  return temp;
}
void GeographyResource::set_allocated_valid_to(::google::protobuf::Timestamp* valid_to) {
  delete valid_to_;
  if (valid_to != NULL && valid_to->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_valid_to = new ::google::protobuf::Timestamp;
    new_valid_to->CopyFrom(*valid_to);
    valid_to = new_valid_to;
  }
  valid_to_ = valid_to;
  if (valid_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyResource.valid_to)
}

// optional bool is_valid = 9;
void GeographyResource::clear_is_valid() {
  is_valid_ = false;
}
 bool GeographyResource::is_valid() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.is_valid)
  return is_valid_;
}
 void GeographyResource::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.GeographyResource.is_valid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeographyResourceList::kGeographyResourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeographyResourceList::GeographyResourceList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.GeographyResourceList)
}

void GeographyResourceList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GeographyResourceList::GeographyResourceList(const GeographyResourceList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.GeographyResourceList)
}

void GeographyResourceList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GeographyResourceList::~GeographyResourceList() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.GeographyResourceList)
  SharedDtor();
}

void GeographyResourceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeographyResourceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeographyResourceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeographyResourceList_descriptor_;
}

const GeographyResourceList& GeographyResourceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto();
  return *default_instance_;
}

GeographyResourceList* GeographyResourceList::default_instance_ = NULL;

GeographyResourceList* GeographyResourceList::New(::google::protobuf::Arena* arena) const {
  GeographyResourceList* n = new GeographyResourceList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeographyResourceList::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.GeographyResourceList)
  geographyresources_.Clear();
}

bool GeographyResourceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.GeographyResourceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mtm.geo.model.GeographyResource geographyResources = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_geographyResources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_geographyresources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_geographyResources;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.GeographyResourceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.GeographyResourceList)
  return false;
#undef DO_
}

void GeographyResourceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.GeographyResourceList)
  // repeated .mtm.geo.model.GeographyResource geographyResources = 1;
  for (unsigned int i = 0, n = this->geographyresources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geographyresources(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.geo.model.GeographyResourceList)
}

::google::protobuf::uint8* GeographyResourceList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.GeographyResourceList)
  // repeated .mtm.geo.model.GeographyResource geographyResources = 1;
  for (unsigned int i = 0, n = this->geographyresources_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->geographyresources(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.GeographyResourceList)
  return target;
}

int GeographyResourceList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.GeographyResourceList)
  int total_size = 0;

  // repeated .mtm.geo.model.GeographyResource geographyResources = 1;
  total_size += 1 * this->geographyresources_size();
  for (int i = 0; i < this->geographyresources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->geographyresources(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeographyResourceList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.GeographyResourceList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GeographyResourceList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GeographyResourceList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.GeographyResourceList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.GeographyResourceList)
    MergeFrom(*source);
  }
}

void GeographyResourceList::MergeFrom(const GeographyResourceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.GeographyResourceList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  geographyresources_.MergeFrom(from.geographyresources_);
}

void GeographyResourceList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.GeographyResourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeographyResourceList::CopyFrom(const GeographyResourceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.GeographyResourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeographyResourceList::IsInitialized() const {

  return true;
}

void GeographyResourceList::Swap(GeographyResourceList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeographyResourceList::InternalSwap(GeographyResourceList* other) {
  geographyresources_.UnsafeArenaSwap(&other->geographyresources_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeographyResourceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeographyResourceList_descriptor_;
  metadata.reflection = GeographyResourceList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeographyResourceList

// repeated .mtm.geo.model.GeographyResource geographyResources = 1;
int GeographyResourceList::geographyresources_size() const {
  return geographyresources_.size();
}
void GeographyResourceList::clear_geographyresources() {
  geographyresources_.Clear();
}
const ::mtm::geo::model::GeographyResource& GeographyResourceList::geographyresources(int index) const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResourceList.geographyResources)
  return geographyresources_.Get(index);
}
::mtm::geo::model::GeographyResource* GeographyResourceList::mutable_geographyresources(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyResourceList.geographyResources)
  return geographyresources_.Mutable(index);
}
::mtm::geo::model::GeographyResource* GeographyResourceList::add_geographyresources() {
  // @@protoc_insertion_point(field_add:mtm.geo.model.GeographyResourceList.geographyResources)
  return geographyresources_.Add();
}
::google::protobuf::RepeatedPtrField< ::mtm::geo::model::GeographyResource >*
GeographyResourceList::mutable_geographyresources() {
  // @@protoc_insertion_point(field_mutable_list:mtm.geo.model.GeographyResourceList.geographyResources)
  return &geographyresources_;
}
const ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::GeographyResource >&
GeographyResourceList::geographyresources() const {
  // @@protoc_insertion_point(field_list:mtm.geo.model.GeographyResourceList.geographyResources)
  return geographyresources_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace geo
}  // namespace mtm

// @@protoc_insertion_point(global_scope)
