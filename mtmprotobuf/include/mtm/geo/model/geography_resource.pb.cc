// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/geography_resource.proto

#include "mtm/geo/model/geography_resource.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringValue;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_mtm_2fcommon_5ftypes_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fcommon_5ftypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Uuid;
}  // namespace protobuf_mtm_2fcommon_5ftypes_2eproto
namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_GeographyResource;
}  // namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto
namespace mtm {
namespace geo {
namespace model {
class GeographyResourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeographyResource>
      _instance;
} _GeographyResource_default_instance_;
class GeographyResourceListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GeographyResourceList>
      _instance;
} _GeographyResourceList_default_instance_;
}  // namespace model
}  // namespace geo
}  // namespace mtm
namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto {
static void InitDefaultsGeographyResource() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mtm::geo::model::_GeographyResource_default_instance_;
    new (ptr) ::mtm::geo::model::GeographyResource();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mtm::geo::model::GeographyResource::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GeographyResource =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGeographyResource}, {
      &protobuf_mtm_2fcommon_5ftypes_2eproto::scc_info_Uuid.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsGeographyResourceList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mtm::geo::model::_GeographyResourceList_default_instance_;
    new (ptr) ::mtm::geo::model::GeographyResourceList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mtm::geo::model::GeographyResourceList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GeographyResourceList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGeographyResourceList}, {
      &protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::scc_info_GeographyResource.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GeographyResource.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GeographyResourceList.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyResource, primary_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyResource, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyResource, geography_resource_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyResource, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyResource, created_by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyResource, created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyResource, valid_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyResource, valid_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyResource, is_valid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyResourceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::GeographyResourceList, geographyresources_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mtm::geo::model::GeographyResource)},
  { 14, -1, sizeof(::mtm::geo::model::GeographyResourceList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mtm::geo::model::_GeographyResource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mtm::geo::model::_GeographyResourceList_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mtm/geo/model/geography_resource.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&mtm/geo/model/geography_resource.proto"
      "\022\rmtm.geo.model\032\037google/protobuf/timesta"
      "mp.proto\032\036google/protobuf/wrappers.proto"
      "\032\026mtm/common_types.proto\032%mtm/geo/model/"
      "geo_service_enums.proto\"\343\002\n\021GeographyRes"
      "ource\022\023\n\013primary_key\030\001 \001(\005\022\025\n\002id\030\002 \001(\0132\t"
      ".mtm.Uuid\022E\n\027geography_resource_type\030\003 \001"
      "(\0162$.mtm.geo.model.GeographyResourceType"
      "\022*\n\004name\030\004 \001(\0132\034.google.protobuf.StringV"
      "alue\022\022\n\ncreated_by\030\005 \001(\r\022+\n\007created\030\006 \001("
      "\0132\032.google.protobuf.Timestamp\022.\n\nvalid_f"
      "rom\030\007 \001(\0132\032.google.protobuf.Timestamp\022,\n"
      "\010valid_to\030\010 \001(\0132\032.google.protobuf.Timest"
      "amp\022\020\n\010is_valid\030\t \001(\010\"U\n\025GeographyResour"
      "ceList\022<\n\022geographyResources\030\001 \003(\0132 .mtm"
      ".geo.model.GeographyResourceb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 636);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/geo/model/geography_resource.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_mtm_2fcommon_5ftypes_2eproto::AddDescriptors();
  ::protobuf_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto
namespace mtm {
namespace geo {
namespace model {

// ===================================================================

void GeographyResource::InitAsDefaultInstance() {
  ::mtm::geo::model::_GeographyResource_default_instance_._instance.get_mutable()->id_ = const_cast< ::mtm::Uuid*>(
      ::mtm::Uuid::internal_default_instance());
  ::mtm::geo::model::_GeographyResource_default_instance_._instance.get_mutable()->name_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::mtm::geo::model::_GeographyResource_default_instance_._instance.get_mutable()->created_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::mtm::geo::model::_GeographyResource_default_instance_._instance.get_mutable()->valid_from_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::mtm::geo::model::_GeographyResource_default_instance_._instance.get_mutable()->valid_to_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void GeographyResource::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void GeographyResource::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
}
void GeographyResource::clear_created() {
  if (GetArenaNoVirtual() == NULL && created_ != NULL) {
    delete created_;
  }
  created_ = NULL;
}
void GeographyResource::clear_valid_from() {
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) {
    delete valid_from_;
  }
  valid_from_ = NULL;
}
void GeographyResource::clear_valid_to() {
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) {
    delete valid_to_;
  }
  valid_to_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeographyResource::kPrimaryKeyFieldNumber;
const int GeographyResource::kIdFieldNumber;
const int GeographyResource::kGeographyResourceTypeFieldNumber;
const int GeographyResource::kNameFieldNumber;
const int GeographyResource::kCreatedByFieldNumber;
const int GeographyResource::kCreatedFieldNumber;
const int GeographyResource::kValidFromFieldNumber;
const int GeographyResource::kValidToFieldNumber;
const int GeographyResource::kIsValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeographyResource::GeographyResource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::scc_info_GeographyResource.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.GeographyResource)
}
GeographyResource::GeographyResource(const GeographyResource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::mtm::Uuid(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_name()) {
    name_ = new ::google::protobuf::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  if (from.has_created()) {
    created_ = new ::google::protobuf::Timestamp(*from.created_);
  } else {
    created_ = NULL;
  }
  if (from.has_valid_from()) {
    valid_from_ = new ::google::protobuf::Timestamp(*from.valid_from_);
  } else {
    valid_from_ = NULL;
  }
  if (from.has_valid_to()) {
    valid_to_ = new ::google::protobuf::Timestamp(*from.valid_to_);
  } else {
    valid_to_ = NULL;
  }
  ::memcpy(&primary_key_, &from.primary_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_valid_) -
    reinterpret_cast<char*>(&primary_key_)) + sizeof(is_valid_));
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.GeographyResource)
}

void GeographyResource::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_valid_));
}

GeographyResource::~GeographyResource() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.GeographyResource)
  SharedDtor();
}

void GeographyResource::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete created_;
  if (this != internal_default_instance()) delete valid_from_;
  if (this != internal_default_instance()) delete valid_to_;
}

void GeographyResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeographyResource::descriptor() {
  ::protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeographyResource& GeographyResource::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::scc_info_GeographyResource.base);
  return *internal_default_instance();
}


void GeographyResource::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.GeographyResource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  if (GetArenaNoVirtual() == NULL && created_ != NULL) {
    delete created_;
  }
  created_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) {
    delete valid_from_;
  }
  valid_from_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) {
    delete valid_to_;
  }
  valid_to_ = NULL;
  ::memset(&primary_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&primary_key_)) + sizeof(is_valid_));
  _internal_metadata_.Clear();
}

bool GeographyResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.GeographyResource)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 primary_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.Uuid id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.geo.model.GeographyResourceType geography_resource_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_geography_resource_type(static_cast< ::mtm::geo::model::GeographyResourceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 created_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &created_by_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp valid_from = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_valid_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp valid_to = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_valid_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_valid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.GeographyResource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.GeographyResource)
  return false;
#undef DO_
}

void GeographyResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.GeographyResource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 primary_key = 1;
  if (this->primary_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->primary_key(), output);
  }

  // .mtm.Uuid id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_id(), output);
  }

  // .mtm.geo.model.GeographyResourceType geography_resource_type = 3;
  if (this->geography_resource_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->geography_resource_type(), output);
  }

  // .google.protobuf.StringValue name = 4;
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_name(), output);
  }

  // uint32 created_by = 5;
  if (this->created_by() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->created_by(), output);
  }

  // .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_created(), output);
  }

  // .google.protobuf.Timestamp valid_from = 7;
  if (this->has_valid_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_valid_from(), output);
  }

  // .google.protobuf.Timestamp valid_to = 8;
  if (this->has_valid_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_valid_to(), output);
  }

  // bool is_valid = 9;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_valid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mtm.geo.model.GeographyResource)
}

::google::protobuf::uint8* GeographyResource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.GeographyResource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 primary_key = 1;
  if (this->primary_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->primary_key(), target);
  }

  // .mtm.Uuid id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_id(), deterministic, target);
  }

  // .mtm.geo.model.GeographyResourceType geography_resource_type = 3;
  if (this->geography_resource_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->geography_resource_type(), target);
  }

  // .google.protobuf.StringValue name = 4;
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_name(), deterministic, target);
  }

  // uint32 created_by = 5;
  if (this->created_by() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->created_by(), target);
  }

  // .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_created(), deterministic, target);
  }

  // .google.protobuf.Timestamp valid_from = 7;
  if (this->has_valid_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_valid_from(), deterministic, target);
  }

  // .google.protobuf.Timestamp valid_to = 8;
  if (this->has_valid_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_valid_to(), deterministic, target);
  }

  // bool is_valid = 9;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_valid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.GeographyResource)
  return target;
}

size_t GeographyResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.GeographyResource)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mtm.Uuid id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .google.protobuf.StringValue name = 4;
  if (this->has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *name_);
  }

  // .google.protobuf.Timestamp created = 6;
  if (this->has_created()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // .google.protobuf.Timestamp valid_from = 7;
  if (this->has_valid_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *valid_from_);
  }

  // .google.protobuf.Timestamp valid_to = 8;
  if (this->has_valid_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *valid_to_);
  }

  // int32 primary_key = 1;
  if (this->primary_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->primary_key());
  }

  // .mtm.geo.model.GeographyResourceType geography_resource_type = 3;
  if (this->geography_resource_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->geography_resource_type());
  }

  // uint32 created_by = 5;
  if (this->created_by() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->created_by());
  }

  // bool is_valid = 9;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeographyResource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.GeographyResource)
  GOOGLE_DCHECK_NE(&from, this);
  const GeographyResource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeographyResource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.GeographyResource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.GeographyResource)
    MergeFrom(*source);
  }
}

void GeographyResource::MergeFrom(const GeographyResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.GeographyResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::mtm::Uuid::MergeFrom(from.id());
  }
  if (from.has_name()) {
    mutable_name()->::google::protobuf::StringValue::MergeFrom(from.name());
  }
  if (from.has_created()) {
    mutable_created()->::google::protobuf::Timestamp::MergeFrom(from.created());
  }
  if (from.has_valid_from()) {
    mutable_valid_from()->::google::protobuf::Timestamp::MergeFrom(from.valid_from());
  }
  if (from.has_valid_to()) {
    mutable_valid_to()->::google::protobuf::Timestamp::MergeFrom(from.valid_to());
  }
  if (from.primary_key() != 0) {
    set_primary_key(from.primary_key());
  }
  if (from.geography_resource_type() != 0) {
    set_geography_resource_type(from.geography_resource_type());
  }
  if (from.created_by() != 0) {
    set_created_by(from.created_by());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
}

void GeographyResource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.GeographyResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeographyResource::CopyFrom(const GeographyResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.GeographyResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeographyResource::IsInitialized() const {
  return true;
}

void GeographyResource::Swap(GeographyResource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeographyResource::InternalSwap(GeographyResource* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(name_, other->name_);
  swap(created_, other->created_);
  swap(valid_from_, other->valid_from_);
  swap(valid_to_, other->valid_to_);
  swap(primary_key_, other->primary_key_);
  swap(geography_resource_type_, other->geography_resource_type_);
  swap(created_by_, other->created_by_);
  swap(is_valid_, other->is_valid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeographyResource::GetMetadata() const {
  protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GeographyResourceList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeographyResourceList::kGeographyResourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeographyResourceList::GeographyResourceList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::scc_info_GeographyResourceList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.GeographyResourceList)
}
GeographyResourceList::GeographyResourceList(const GeographyResourceList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      geographyresources_(from.geographyresources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.GeographyResourceList)
}

void GeographyResourceList::SharedCtor() {
}

GeographyResourceList::~GeographyResourceList() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.GeographyResourceList)
  SharedDtor();
}

void GeographyResourceList::SharedDtor() {
}

void GeographyResourceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GeographyResourceList::descriptor() {
  ::protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeographyResourceList& GeographyResourceList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::scc_info_GeographyResourceList.base);
  return *internal_default_instance();
}


void GeographyResourceList::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.GeographyResourceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geographyresources_.Clear();
  _internal_metadata_.Clear();
}

bool GeographyResourceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.GeographyResourceList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mtm.geo.model.GeographyResource geographyResources = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_geographyresources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.GeographyResourceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.GeographyResourceList)
  return false;
#undef DO_
}

void GeographyResourceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.GeographyResourceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mtm.geo.model.GeographyResource geographyResources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geographyresources_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->geographyresources(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mtm.geo.model.GeographyResourceList)
}

::google::protobuf::uint8* GeographyResourceList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.GeographyResourceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mtm.geo.model.GeographyResource geographyResources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geographyresources_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->geographyresources(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.GeographyResourceList)
  return target;
}

size_t GeographyResourceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.GeographyResourceList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .mtm.geo.model.GeographyResource geographyResources = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->geographyresources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->geographyresources(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeographyResourceList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.GeographyResourceList)
  GOOGLE_DCHECK_NE(&from, this);
  const GeographyResourceList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeographyResourceList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.GeographyResourceList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.GeographyResourceList)
    MergeFrom(*source);
  }
}

void GeographyResourceList::MergeFrom(const GeographyResourceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.GeographyResourceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geographyresources_.MergeFrom(from.geographyresources_);
}

void GeographyResourceList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.GeographyResourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeographyResourceList::CopyFrom(const GeographyResourceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.GeographyResourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeographyResourceList::IsInitialized() const {
  return true;
}

void GeographyResourceList::Swap(GeographyResourceList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeographyResourceList::InternalSwap(GeographyResourceList* other) {
  using std::swap;
  CastToBase(&geographyresources_)->InternalSwap(CastToBase(&other->geographyresources_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GeographyResourceList::GetMetadata() const {
  protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace geo
}  // namespace mtm
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mtm::geo::model::GeographyResource* Arena::CreateMaybeMessage< ::mtm::geo::model::GeographyResource >(Arena* arena) {
  return Arena::CreateInternal< ::mtm::geo::model::GeographyResource >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mtm::geo::model::GeographyResourceList* Arena::CreateMaybeMessage< ::mtm::geo::model::GeographyResourceList >(Arena* arena) {
  return Arena::CreateInternal< ::mtm::geo::model::GeographyResourceList >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
