// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/geography.proto

#ifndef PROTOBUF_mtm_2fgeo_2fmodel_2fgeography_2eproto__INCLUDED
#define PROTOBUF_mtm_2fgeo_2fmodel_2fgeography_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "mtm/common_types.pb.h"
#include "mtm/geo/model/geo_service_enums.pb.h"
// @@protoc_insertion_point(includes)

namespace mtm {
namespace geo {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto();
void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto();
void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeography_2eproto();

class Geography;
class GeographyList;
class GeographyMeta;

// ===================================================================

class Geography : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.model.Geography) */ {
 public:
  Geography();
  virtual ~Geography();

  Geography(const Geography& from);

  inline Geography& operator=(const Geography& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geography& default_instance();

  void Swap(Geography* other);

  // implements Message ----------------------------------------------

  inline Geography* New() const { return New(NULL); }

  Geography* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Geography& from);
  void MergeFrom(const Geography& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Geography* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 primary_key = 1;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 1;
  ::google::protobuf::int32 primary_key() const;
  void set_primary_key(::google::protobuf::int32 value);

  // optional .mtm.Uuid id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::mtm::Uuid& id() const;
  ::mtm::Uuid* mutable_id();
  ::mtm::Uuid* release_id();
  void set_allocated_id(::mtm::Uuid* id);

  // optional .mtm.geo.model.GeographyType geography_type = 3;
  void clear_geography_type();
  static const int kGeographyTypeFieldNumber = 3;
  ::mtm::geo::model::GeographyType geography_type() const;
  void set_geography_type(::mtm::geo::model::GeographyType value);

  // optional .google.protobuf.StringValue name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::google::protobuf::StringValue& name() const;
  ::google::protobuf::StringValue* mutable_name();
  ::google::protobuf::StringValue* release_name();
  void set_allocated_name(::google::protobuf::StringValue* name);

  // optional uint32 created_by = 5;
  void clear_created_by();
  static const int kCreatedByFieldNumber = 5;
  ::google::protobuf::uint32 created_by() const;
  void set_created_by(::google::protobuf::uint32 value);

  // optional .google.protobuf.Timestamp created = 6;
  bool has_created() const;
  void clear_created();
  static const int kCreatedFieldNumber = 6;
  const ::google::protobuf::Timestamp& created() const;
  ::google::protobuf::Timestamp* mutable_created();
  ::google::protobuf::Timestamp* release_created();
  void set_allocated_created(::google::protobuf::Timestamp* created);

  // optional uint32 edited_by = 7;
  void clear_edited_by();
  static const int kEditedByFieldNumber = 7;
  ::google::protobuf::uint32 edited_by() const;
  void set_edited_by(::google::protobuf::uint32 value);

  // optional .google.protobuf.Timestamp edited = 8;
  bool has_edited() const;
  void clear_edited();
  static const int kEditedFieldNumber = 8;
  const ::google::protobuf::Timestamp& edited() const;
  ::google::protobuf::Timestamp* mutable_edited();
  ::google::protobuf::Timestamp* release_edited();
  void set_allocated_edited(::google::protobuf::Timestamp* edited);

  // optional .google.protobuf.StringValue description = 9;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 9;
  const ::google::protobuf::StringValue& description() const;
  ::google::protobuf::StringValue* mutable_description();
  ::google::protobuf::StringValue* release_description();
  void set_allocated_description(::google::protobuf::StringValue* description);

  // optional .google.protobuf.Timestamp valid_from = 10;
  bool has_valid_from() const;
  void clear_valid_from();
  static const int kValidFromFieldNumber = 10;
  const ::google::protobuf::Timestamp& valid_from() const;
  ::google::protobuf::Timestamp* mutable_valid_from();
  ::google::protobuf::Timestamp* release_valid_from();
  void set_allocated_valid_from(::google::protobuf::Timestamp* valid_from);

  // optional .google.protobuf.Timestamp valid_to = 11;
  bool has_valid_to() const;
  void clear_valid_to();
  static const int kValidToFieldNumber = 11;
  const ::google::protobuf::Timestamp& valid_to() const;
  ::google::protobuf::Timestamp* mutable_valid_to();
  ::google::protobuf::Timestamp* release_valid_to();
  void set_allocated_valid_to(::google::protobuf::Timestamp* valid_to);

  // optional bool is_valid = 12;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 12;
  bool is_valid() const;
  void set_is_valid(bool value);

  // optional .google.protobuf.StringValue wkt = 13;
  bool has_wkt() const;
  void clear_wkt();
  static const int kWktFieldNumber = 13;
  const ::google::protobuf::StringValue& wkt() const;
  ::google::protobuf::StringValue* mutable_wkt();
  ::google::protobuf::StringValue* release_wkt();
  void set_allocated_wkt(::google::protobuf::StringValue* wkt);

  // optional .google.protobuf.StringValue meta = 14;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 14;
  const ::google::protobuf::StringValue& meta() const;
  ::google::protobuf::StringValue* mutable_meta();
  ::google::protobuf::StringValue* release_meta();
  void set_allocated_meta(::google::protobuf::StringValue* meta);

  // optional .mtm.geo.model.Permission public_permission = 15;
  void clear_public_permission();
  static const int kPublicPermissionFieldNumber = 15;
  ::mtm::geo::model::Permission public_permission() const;
  void set_public_permission(::mtm::geo::model::Permission value);

  // optional .mtm.geo.model.GeographyMeta meta_properties = 17;
  bool has_meta_properties() const;
  void clear_meta_properties();
  static const int kMetaPropertiesFieldNumber = 17;
  const ::mtm::geo::model::GeographyMeta& meta_properties() const;
  ::mtm::geo::model::GeographyMeta* mutable_meta_properties();
  ::mtm::geo::model::GeographyMeta* release_meta_properties();
  void set_allocated_meta_properties(::mtm::geo::model::GeographyMeta* meta_properties);

  // @@protoc_insertion_point(class_scope:mtm.geo.model.Geography)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::mtm::Uuid* id_;
  ::google::protobuf::int32 primary_key_;
  int geography_type_;
  ::google::protobuf::StringValue* name_;
  ::google::protobuf::Timestamp* created_;
  ::google::protobuf::uint32 created_by_;
  ::google::protobuf::uint32 edited_by_;
  ::google::protobuf::Timestamp* edited_;
  ::google::protobuf::StringValue* description_;
  ::google::protobuf::Timestamp* valid_from_;
  ::google::protobuf::Timestamp* valid_to_;
  ::google::protobuf::StringValue* wkt_;
  bool is_valid_;
  int public_permission_;
  ::google::protobuf::StringValue* meta_;
  ::mtm::geo::model::GeographyMeta* meta_properties_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto();
  friend void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeography_2eproto();

  void InitAsDefaultInstance();
  static Geography* default_instance_;
};
// -------------------------------------------------------------------

class GeographyMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.model.GeographyMeta) */ {
 public:
  GeographyMeta();
  virtual ~GeographyMeta();

  GeographyMeta(const GeographyMeta& from);

  inline GeographyMeta& operator=(const GeographyMeta& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeographyMeta& default_instance();

  void Swap(GeographyMeta* other);

  // implements Message ----------------------------------------------

  inline GeographyMeta* New() const { return New(NULL); }

  GeographyMeta* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeographyMeta& from);
  void MergeFrom(const GeographyMeta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeographyMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.StringValue texture = 1;
  bool has_texture() const;
  void clear_texture();
  static const int kTextureFieldNumber = 1;
  const ::google::protobuf::StringValue& texture() const;
  ::google::protobuf::StringValue* mutable_texture();
  ::google::protobuf::StringValue* release_texture();
  void set_allocated_texture(::google::protobuf::StringValue* texture);

  // optional .google.protobuf.StringValue path = 2;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::google::protobuf::StringValue& path() const;
  ::google::protobuf::StringValue* mutable_path();
  ::google::protobuf::StringValue* release_path();
  void set_allocated_path(::google::protobuf::StringValue* path);

  // @@protoc_insertion_point(class_scope:mtm.geo.model.GeographyMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::StringValue* texture_;
  ::google::protobuf::StringValue* path_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto();
  friend void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeography_2eproto();

  void InitAsDefaultInstance();
  static GeographyMeta* default_instance_;
};
// -------------------------------------------------------------------

class GeographyList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.model.GeographyList) */ {
 public:
  GeographyList();
  virtual ~GeographyList();

  GeographyList(const GeographyList& from);

  inline GeographyList& operator=(const GeographyList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeographyList& default_instance();

  void Swap(GeographyList* other);

  // implements Message ----------------------------------------------

  inline GeographyList* New() const { return New(NULL); }

  GeographyList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeographyList& from);
  void MergeFrom(const GeographyList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeographyList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtm.geo.model.Geography geographies = 1;
  int geographies_size() const;
  void clear_geographies();
  static const int kGeographiesFieldNumber = 1;
  const ::mtm::geo::model::Geography& geographies(int index) const;
  ::mtm::geo::model::Geography* mutable_geographies(int index);
  ::mtm::geo::model::Geography* add_geographies();
  ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Geography >*
      mutable_geographies();
  const ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Geography >&
      geographies() const;

  // @@protoc_insertion_point(class_scope:mtm.geo.model.GeographyList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Geography > geographies_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto();
  friend void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeography_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeography_2eproto();

  void InitAsDefaultInstance();
  static GeographyList* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Geography

// optional int32 primary_key = 1;
inline void Geography::clear_primary_key() {
  primary_key_ = 0;
}
inline ::google::protobuf::int32 Geography::primary_key() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.primary_key)
  return primary_key_;
}
inline void Geography::set_primary_key(::google::protobuf::int32 value) {
  
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.primary_key)
}

// optional .mtm.Uuid id = 2;
inline bool Geography::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void Geography::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::mtm::Uuid& Geography::id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::mtm::Uuid* Geography::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.id)
  return id_;
}
inline ::mtm::Uuid* Geography::release_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.id)
  
  ::mtm::Uuid* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Geography::set_allocated_id(::mtm::Uuid* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.id)
}

// optional .mtm.geo.model.GeographyType geography_type = 3;
inline void Geography::clear_geography_type() {
  geography_type_ = 0;
}
inline ::mtm::geo::model::GeographyType Geography::geography_type() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.geography_type)
  return static_cast< ::mtm::geo::model::GeographyType >(geography_type_);
}
inline void Geography::set_geography_type(::mtm::geo::model::GeographyType value) {
  
  geography_type_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.geography_type)
}

// optional .google.protobuf.StringValue name = 4;
inline bool Geography::has_name() const {
  return !_is_default_instance_ && name_ != NULL;
}
inline void Geography::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) delete name_;
  name_ = NULL;
}
inline const ::google::protobuf::StringValue& Geography::name() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.name)
  return name_ != NULL ? *name_ : *default_instance_->name_;
}
inline ::google::protobuf::StringValue* Geography::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.name)
  return name_;
}
inline ::google::protobuf::StringValue* Geography::release_name() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.name)
  
  ::google::protobuf::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline void Geography::set_allocated_name(::google::protobuf::StringValue* name) {
  delete name_;
  if (name != NULL && name->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_name = new ::google::protobuf::StringValue;
    new_name->CopyFrom(*name);
    name = new_name;
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.name)
}

// optional uint32 created_by = 5;
inline void Geography::clear_created_by() {
  created_by_ = 0u;
}
inline ::google::protobuf::uint32 Geography::created_by() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.created_by)
  return created_by_;
}
inline void Geography::set_created_by(::google::protobuf::uint32 value) {
  
  created_by_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.created_by)
}

// optional .google.protobuf.Timestamp created = 6;
inline bool Geography::has_created() const {
  return !_is_default_instance_ && created_ != NULL;
}
inline void Geography::clear_created() {
  if (GetArenaNoVirtual() == NULL && created_ != NULL) delete created_;
  created_ = NULL;
}
inline const ::google::protobuf::Timestamp& Geography::created() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.created)
  return created_ != NULL ? *created_ : *default_instance_->created_;
}
inline ::google::protobuf::Timestamp* Geography::mutable_created() {
  
  if (created_ == NULL) {
    created_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.created)
  return created_;
}
inline ::google::protobuf::Timestamp* Geography::release_created() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.created)
  
  ::google::protobuf::Timestamp* temp = created_;
  created_ = NULL;
  return temp;
}
inline void Geography::set_allocated_created(::google::protobuf::Timestamp* created) {
  delete created_;
  if (created != NULL && created->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_created = new ::google::protobuf::Timestamp;
    new_created->CopyFrom(*created);
    created = new_created;
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.created)
}

// optional uint32 edited_by = 7;
inline void Geography::clear_edited_by() {
  edited_by_ = 0u;
}
inline ::google::protobuf::uint32 Geography::edited_by() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.edited_by)
  return edited_by_;
}
inline void Geography::set_edited_by(::google::protobuf::uint32 value) {
  
  edited_by_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.edited_by)
}

// optional .google.protobuf.Timestamp edited = 8;
inline bool Geography::has_edited() const {
  return !_is_default_instance_ && edited_ != NULL;
}
inline void Geography::clear_edited() {
  if (GetArenaNoVirtual() == NULL && edited_ != NULL) delete edited_;
  edited_ = NULL;
}
inline const ::google::protobuf::Timestamp& Geography::edited() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.edited)
  return edited_ != NULL ? *edited_ : *default_instance_->edited_;
}
inline ::google::protobuf::Timestamp* Geography::mutable_edited() {
  
  if (edited_ == NULL) {
    edited_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.edited)
  return edited_;
}
inline ::google::protobuf::Timestamp* Geography::release_edited() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.edited)
  
  ::google::protobuf::Timestamp* temp = edited_;
  edited_ = NULL;
  return temp;
}
inline void Geography::set_allocated_edited(::google::protobuf::Timestamp* edited) {
  delete edited_;
  if (edited != NULL && edited->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_edited = new ::google::protobuf::Timestamp;
    new_edited->CopyFrom(*edited);
    edited = new_edited;
  }
  edited_ = edited;
  if (edited) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.edited)
}

// optional .google.protobuf.StringValue description = 9;
inline bool Geography::has_description() const {
  return !_is_default_instance_ && description_ != NULL;
}
inline void Geography::clear_description() {
  if (GetArenaNoVirtual() == NULL && description_ != NULL) delete description_;
  description_ = NULL;
}
inline const ::google::protobuf::StringValue& Geography::description() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.description)
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::google::protobuf::StringValue* Geography::mutable_description() {
  
  if (description_ == NULL) {
    description_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.description)
  return description_;
}
inline ::google::protobuf::StringValue* Geography::release_description() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.description)
  
  ::google::protobuf::StringValue* temp = description_;
  description_ = NULL;
  return temp;
}
inline void Geography::set_allocated_description(::google::protobuf::StringValue* description) {
  delete description_;
  if (description != NULL && description->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_description = new ::google::protobuf::StringValue;
    new_description->CopyFrom(*description);
    description = new_description;
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.description)
}

// optional .google.protobuf.Timestamp valid_from = 10;
inline bool Geography::has_valid_from() const {
  return !_is_default_instance_ && valid_from_ != NULL;
}
inline void Geography::clear_valid_from() {
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) delete valid_from_;
  valid_from_ = NULL;
}
inline const ::google::protobuf::Timestamp& Geography::valid_from() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.valid_from)
  return valid_from_ != NULL ? *valid_from_ : *default_instance_->valid_from_;
}
inline ::google::protobuf::Timestamp* Geography::mutable_valid_from() {
  
  if (valid_from_ == NULL) {
    valid_from_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.valid_from)
  return valid_from_;
}
inline ::google::protobuf::Timestamp* Geography::release_valid_from() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.valid_from)
  
  ::google::protobuf::Timestamp* temp = valid_from_;
  valid_from_ = NULL;
  return temp;
}
inline void Geography::set_allocated_valid_from(::google::protobuf::Timestamp* valid_from) {
  delete valid_from_;
  if (valid_from != NULL && valid_from->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_valid_from = new ::google::protobuf::Timestamp;
    new_valid_from->CopyFrom(*valid_from);
    valid_from = new_valid_from;
  }
  valid_from_ = valid_from;
  if (valid_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.valid_from)
}

// optional .google.protobuf.Timestamp valid_to = 11;
inline bool Geography::has_valid_to() const {
  return !_is_default_instance_ && valid_to_ != NULL;
}
inline void Geography::clear_valid_to() {
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) delete valid_to_;
  valid_to_ = NULL;
}
inline const ::google::protobuf::Timestamp& Geography::valid_to() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.valid_to)
  return valid_to_ != NULL ? *valid_to_ : *default_instance_->valid_to_;
}
inline ::google::protobuf::Timestamp* Geography::mutable_valid_to() {
  
  if (valid_to_ == NULL) {
    valid_to_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.valid_to)
  return valid_to_;
}
inline ::google::protobuf::Timestamp* Geography::release_valid_to() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.valid_to)
  
  ::google::protobuf::Timestamp* temp = valid_to_;
  valid_to_ = NULL;
  return temp;
}
inline void Geography::set_allocated_valid_to(::google::protobuf::Timestamp* valid_to) {
  delete valid_to_;
  if (valid_to != NULL && valid_to->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_valid_to = new ::google::protobuf::Timestamp;
    new_valid_to->CopyFrom(*valid_to);
    valid_to = new_valid_to;
  }
  valid_to_ = valid_to;
  if (valid_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.valid_to)
}

// optional bool is_valid = 12;
inline void Geography::clear_is_valid() {
  is_valid_ = false;
}
inline bool Geography::is_valid() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.is_valid)
  return is_valid_;
}
inline void Geography::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.is_valid)
}

// optional .google.protobuf.StringValue wkt = 13;
inline bool Geography::has_wkt() const {
  return !_is_default_instance_ && wkt_ != NULL;
}
inline void Geography::clear_wkt() {
  if (GetArenaNoVirtual() == NULL && wkt_ != NULL) delete wkt_;
  wkt_ = NULL;
}
inline const ::google::protobuf::StringValue& Geography::wkt() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.wkt)
  return wkt_ != NULL ? *wkt_ : *default_instance_->wkt_;
}
inline ::google::protobuf::StringValue* Geography::mutable_wkt() {
  
  if (wkt_ == NULL) {
    wkt_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.wkt)
  return wkt_;
}
inline ::google::protobuf::StringValue* Geography::release_wkt() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.wkt)
  
  ::google::protobuf::StringValue* temp = wkt_;
  wkt_ = NULL;
  return temp;
}
inline void Geography::set_allocated_wkt(::google::protobuf::StringValue* wkt) {
  delete wkt_;
  if (wkt != NULL && wkt->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_wkt = new ::google::protobuf::StringValue;
    new_wkt->CopyFrom(*wkt);
    wkt = new_wkt;
  }
  wkt_ = wkt;
  if (wkt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.wkt)
}

// optional .google.protobuf.StringValue meta = 14;
inline bool Geography::has_meta() const {
  return !_is_default_instance_ && meta_ != NULL;
}
inline void Geography::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
inline const ::google::protobuf::StringValue& Geography::meta() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.meta)
  return meta_ != NULL ? *meta_ : *default_instance_->meta_;
}
inline ::google::protobuf::StringValue* Geography::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.meta)
  return meta_;
}
inline ::google::protobuf::StringValue* Geography::release_meta() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.meta)
  
  ::google::protobuf::StringValue* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline void Geography::set_allocated_meta(::google::protobuf::StringValue* meta) {
  delete meta_;
  if (meta != NULL && meta->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_meta = new ::google::protobuf::StringValue;
    new_meta->CopyFrom(*meta);
    meta = new_meta;
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.meta)
}

// optional .mtm.geo.model.Permission public_permission = 15;
inline void Geography::clear_public_permission() {
  public_permission_ = 0;
}
inline ::mtm::geo::model::Permission Geography::public_permission() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.public_permission)
  return static_cast< ::mtm::geo::model::Permission >(public_permission_);
}
inline void Geography::set_public_permission(::mtm::geo::model::Permission value) {
  
  public_permission_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.public_permission)
}

// optional .mtm.geo.model.GeographyMeta meta_properties = 17;
inline bool Geography::has_meta_properties() const {
  return !_is_default_instance_ && meta_properties_ != NULL;
}
inline void Geography::clear_meta_properties() {
  if (GetArenaNoVirtual() == NULL && meta_properties_ != NULL) delete meta_properties_;
  meta_properties_ = NULL;
}
inline const ::mtm::geo::model::GeographyMeta& Geography::meta_properties() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.meta_properties)
  return meta_properties_ != NULL ? *meta_properties_ : *default_instance_->meta_properties_;
}
inline ::mtm::geo::model::GeographyMeta* Geography::mutable_meta_properties() {
  
  if (meta_properties_ == NULL) {
    meta_properties_ = new ::mtm::geo::model::GeographyMeta;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.meta_properties)
  return meta_properties_;
}
inline ::mtm::geo::model::GeographyMeta* Geography::release_meta_properties() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.meta_properties)
  
  ::mtm::geo::model::GeographyMeta* temp = meta_properties_;
  meta_properties_ = NULL;
  return temp;
}
inline void Geography::set_allocated_meta_properties(::mtm::geo::model::GeographyMeta* meta_properties) {
  delete meta_properties_;
  meta_properties_ = meta_properties;
  if (meta_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.meta_properties)
}

// -------------------------------------------------------------------

// GeographyMeta

// optional .google.protobuf.StringValue texture = 1;
inline bool GeographyMeta::has_texture() const {
  return !_is_default_instance_ && texture_ != NULL;
}
inline void GeographyMeta::clear_texture() {
  if (GetArenaNoVirtual() == NULL && texture_ != NULL) delete texture_;
  texture_ = NULL;
}
inline const ::google::protobuf::StringValue& GeographyMeta::texture() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyMeta.texture)
  return texture_ != NULL ? *texture_ : *default_instance_->texture_;
}
inline ::google::protobuf::StringValue* GeographyMeta::mutable_texture() {
  
  if (texture_ == NULL) {
    texture_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyMeta.texture)
  return texture_;
}
inline ::google::protobuf::StringValue* GeographyMeta::release_texture() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyMeta.texture)
  
  ::google::protobuf::StringValue* temp = texture_;
  texture_ = NULL;
  return temp;
}
inline void GeographyMeta::set_allocated_texture(::google::protobuf::StringValue* texture) {
  delete texture_;
  if (texture != NULL && texture->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_texture = new ::google::protobuf::StringValue;
    new_texture->CopyFrom(*texture);
    texture = new_texture;
  }
  texture_ = texture;
  if (texture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyMeta.texture)
}

// optional .google.protobuf.StringValue path = 2;
inline bool GeographyMeta::has_path() const {
  return !_is_default_instance_ && path_ != NULL;
}
inline void GeographyMeta::clear_path() {
  if (GetArenaNoVirtual() == NULL && path_ != NULL) delete path_;
  path_ = NULL;
}
inline const ::google::protobuf::StringValue& GeographyMeta::path() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyMeta.path)
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
inline ::google::protobuf::StringValue* GeographyMeta::mutable_path() {
  
  if (path_ == NULL) {
    path_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyMeta.path)
  return path_;
}
inline ::google::protobuf::StringValue* GeographyMeta::release_path() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyMeta.path)
  
  ::google::protobuf::StringValue* temp = path_;
  path_ = NULL;
  return temp;
}
inline void GeographyMeta::set_allocated_path(::google::protobuf::StringValue* path) {
  delete path_;
  if (path != NULL && path->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_path = new ::google::protobuf::StringValue;
    new_path->CopyFrom(*path);
    path = new_path;
  }
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyMeta.path)
}

// -------------------------------------------------------------------

// GeographyList

// repeated .mtm.geo.model.Geography geographies = 1;
inline int GeographyList::geographies_size() const {
  return geographies_.size();
}
inline void GeographyList::clear_geographies() {
  geographies_.Clear();
}
inline const ::mtm::geo::model::Geography& GeographyList::geographies(int index) const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyList.geographies)
  return geographies_.Get(index);
}
inline ::mtm::geo::model::Geography* GeographyList::mutable_geographies(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyList.geographies)
  return geographies_.Mutable(index);
}
inline ::mtm::geo::model::Geography* GeographyList::add_geographies() {
  // @@protoc_insertion_point(field_add:mtm.geo.model.GeographyList.geographies)
  return geographies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Geography >*
GeographyList::mutable_geographies() {
  // @@protoc_insertion_point(field_mutable_list:mtm.geo.model.GeographyList.geographies)
  return &geographies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Geography >&
GeographyList::geographies() const {
  // @@protoc_insertion_point(field_list:mtm.geo.model.GeographyList.geographies)
  return geographies_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace geo
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mtm_2fgeo_2fmodel_2fgeography_2eproto__INCLUDED
