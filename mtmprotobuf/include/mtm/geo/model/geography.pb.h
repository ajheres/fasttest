// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/geography.proto

#ifndef PROTOBUF_INCLUDED_mtm_2fgeo_2fmodel_2fgeography_2eproto
#define PROTOBUF_INCLUDED_mtm_2fgeo_2fmodel_2fgeography_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "mtm/common_types.pb.h"
#include "mtm/geo/model/geo_service_enums.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto 

namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto
namespace mtm {
namespace geo {
namespace model {
class Geography;
class GeographyDefaultTypeInternal;
extern GeographyDefaultTypeInternal _Geography_default_instance_;
class GeographyList;
class GeographyListDefaultTypeInternal;
extern GeographyListDefaultTypeInternal _GeographyList_default_instance_;
class GeographyMeta;
class GeographyMetaDefaultTypeInternal;
extern GeographyMetaDefaultTypeInternal _GeographyMeta_default_instance_;
}  // namespace model
}  // namespace geo
}  // namespace mtm
namespace google {
namespace protobuf {
template<> ::mtm::geo::model::Geography* Arena::CreateMaybeMessage<::mtm::geo::model::Geography>(Arena*);
template<> ::mtm::geo::model::GeographyList* Arena::CreateMaybeMessage<::mtm::geo::model::GeographyList>(Arena*);
template<> ::mtm::geo::model::GeographyMeta* Arena::CreateMaybeMessage<::mtm::geo::model::GeographyMeta>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mtm {
namespace geo {
namespace model {

// ===================================================================

class Geography : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.model.Geography) */ {
 public:
  Geography();
  virtual ~Geography();

  Geography(const Geography& from);

  inline Geography& operator=(const Geography& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Geography(Geography&& from) noexcept
    : Geography() {
    *this = ::std::move(from);
  }

  inline Geography& operator=(Geography&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Geography& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geography* internal_default_instance() {
    return reinterpret_cast<const Geography*>(
               &_Geography_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Geography* other);
  friend void swap(Geography& a, Geography& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Geography* New() const final {
    return CreateMaybeMessage<Geography>(NULL);
  }

  Geography* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Geography>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Geography& from);
  void MergeFrom(const Geography& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geography* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.Uuid id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::mtm::Uuid& _internal_id() const;
  public:
  const ::mtm::Uuid& id() const;
  ::mtm::Uuid* release_id();
  ::mtm::Uuid* mutable_id();
  void set_allocated_id(::mtm::Uuid* id);

  // .google.protobuf.StringValue name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  private:
  const ::google::protobuf::StringValue& _internal_name() const;
  public:
  const ::google::protobuf::StringValue& name() const;
  ::google::protobuf::StringValue* release_name();
  ::google::protobuf::StringValue* mutable_name();
  void set_allocated_name(::google::protobuf::StringValue* name);

  // .google.protobuf.Timestamp created = 6;
  bool has_created() const;
  void clear_created();
  static const int kCreatedFieldNumber = 6;
  private:
  const ::google::protobuf::Timestamp& _internal_created() const;
  public:
  const ::google::protobuf::Timestamp& created() const;
  ::google::protobuf::Timestamp* release_created();
  ::google::protobuf::Timestamp* mutable_created();
  void set_allocated_created(::google::protobuf::Timestamp* created);

  // .google.protobuf.Timestamp edited = 8;
  bool has_edited() const;
  void clear_edited();
  static const int kEditedFieldNumber = 8;
  private:
  const ::google::protobuf::Timestamp& _internal_edited() const;
  public:
  const ::google::protobuf::Timestamp& edited() const;
  ::google::protobuf::Timestamp* release_edited();
  ::google::protobuf::Timestamp* mutable_edited();
  void set_allocated_edited(::google::protobuf::Timestamp* edited);

  // .google.protobuf.StringValue description = 9;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 9;
  private:
  const ::google::protobuf::StringValue& _internal_description() const;
  public:
  const ::google::protobuf::StringValue& description() const;
  ::google::protobuf::StringValue* release_description();
  ::google::protobuf::StringValue* mutable_description();
  void set_allocated_description(::google::protobuf::StringValue* description);

  // .google.protobuf.Timestamp valid_from = 10;
  bool has_valid_from() const;
  void clear_valid_from();
  static const int kValidFromFieldNumber = 10;
  private:
  const ::google::protobuf::Timestamp& _internal_valid_from() const;
  public:
  const ::google::protobuf::Timestamp& valid_from() const;
  ::google::protobuf::Timestamp* release_valid_from();
  ::google::protobuf::Timestamp* mutable_valid_from();
  void set_allocated_valid_from(::google::protobuf::Timestamp* valid_from);

  // .google.protobuf.Timestamp valid_to = 11;
  bool has_valid_to() const;
  void clear_valid_to();
  static const int kValidToFieldNumber = 11;
  private:
  const ::google::protobuf::Timestamp& _internal_valid_to() const;
  public:
  const ::google::protobuf::Timestamp& valid_to() const;
  ::google::protobuf::Timestamp* release_valid_to();
  ::google::protobuf::Timestamp* mutable_valid_to();
  void set_allocated_valid_to(::google::protobuf::Timestamp* valid_to);

  // .google.protobuf.StringValue wkt = 13;
  bool has_wkt() const;
  void clear_wkt();
  static const int kWktFieldNumber = 13;
  private:
  const ::google::protobuf::StringValue& _internal_wkt() const;
  public:
  const ::google::protobuf::StringValue& wkt() const;
  ::google::protobuf::StringValue* release_wkt();
  ::google::protobuf::StringValue* mutable_wkt();
  void set_allocated_wkt(::google::protobuf::StringValue* wkt);

  // .google.protobuf.StringValue meta = 14;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 14;
  private:
  const ::google::protobuf::StringValue& _internal_meta() const;
  public:
  const ::google::protobuf::StringValue& meta() const;
  ::google::protobuf::StringValue* release_meta();
  ::google::protobuf::StringValue* mutable_meta();
  void set_allocated_meta(::google::protobuf::StringValue* meta);

  // .mtm.geo.model.GeographyMeta meta_properties = 17;
  bool has_meta_properties() const;
  void clear_meta_properties();
  static const int kMetaPropertiesFieldNumber = 17;
  private:
  const ::mtm::geo::model::GeographyMeta& _internal_meta_properties() const;
  public:
  const ::mtm::geo::model::GeographyMeta& meta_properties() const;
  ::mtm::geo::model::GeographyMeta* release_meta_properties();
  ::mtm::geo::model::GeographyMeta* mutable_meta_properties();
  void set_allocated_meta_properties(::mtm::geo::model::GeographyMeta* meta_properties);

  // int32 primary_key = 1;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 1;
  ::google::protobuf::int32 primary_key() const;
  void set_primary_key(::google::protobuf::int32 value);

  // .mtm.geo.model.GeographyType geography_type = 3;
  void clear_geography_type();
  static const int kGeographyTypeFieldNumber = 3;
  ::mtm::geo::model::GeographyType geography_type() const;
  void set_geography_type(::mtm::geo::model::GeographyType value);

  // uint32 created_by = 5;
  void clear_created_by();
  static const int kCreatedByFieldNumber = 5;
  ::google::protobuf::uint32 created_by() const;
  void set_created_by(::google::protobuf::uint32 value);

  // uint32 edited_by = 7;
  void clear_edited_by();
  static const int kEditedByFieldNumber = 7;
  ::google::protobuf::uint32 edited_by() const;
  void set_edited_by(::google::protobuf::uint32 value);

  // bool is_valid = 12;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 12;
  bool is_valid() const;
  void set_is_valid(bool value);

  // .mtm.geo.model.Permission public_permission = 15;
  void clear_public_permission();
  static const int kPublicPermissionFieldNumber = 15;
  ::mtm::geo::model::Permission public_permission() const;
  void set_public_permission(::mtm::geo::model::Permission value);

  // @@protoc_insertion_point(class_scope:mtm.geo.model.Geography)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::Uuid* id_;
  ::google::protobuf::StringValue* name_;
  ::google::protobuf::Timestamp* created_;
  ::google::protobuf::Timestamp* edited_;
  ::google::protobuf::StringValue* description_;
  ::google::protobuf::Timestamp* valid_from_;
  ::google::protobuf::Timestamp* valid_to_;
  ::google::protobuf::StringValue* wkt_;
  ::google::protobuf::StringValue* meta_;
  ::mtm::geo::model::GeographyMeta* meta_properties_;
  ::google::protobuf::int32 primary_key_;
  int geography_type_;
  ::google::protobuf::uint32 created_by_;
  ::google::protobuf::uint32 edited_by_;
  bool is_valid_;
  int public_permission_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GeographyMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.model.GeographyMeta) */ {
 public:
  GeographyMeta();
  virtual ~GeographyMeta();

  GeographyMeta(const GeographyMeta& from);

  inline GeographyMeta& operator=(const GeographyMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeographyMeta(GeographyMeta&& from) noexcept
    : GeographyMeta() {
    *this = ::std::move(from);
  }

  inline GeographyMeta& operator=(GeographyMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeographyMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeographyMeta* internal_default_instance() {
    return reinterpret_cast<const GeographyMeta*>(
               &_GeographyMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GeographyMeta* other);
  friend void swap(GeographyMeta& a, GeographyMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeographyMeta* New() const final {
    return CreateMaybeMessage<GeographyMeta>(NULL);
  }

  GeographyMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeographyMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeographyMeta& from);
  void MergeFrom(const GeographyMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeographyMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.StringValue texture = 1;
  bool has_texture() const;
  void clear_texture();
  static const int kTextureFieldNumber = 1;
  private:
  const ::google::protobuf::StringValue& _internal_texture() const;
  public:
  const ::google::protobuf::StringValue& texture() const;
  ::google::protobuf::StringValue* release_texture();
  ::google::protobuf::StringValue* mutable_texture();
  void set_allocated_texture(::google::protobuf::StringValue* texture);

  // .google.protobuf.StringValue path = 2;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 2;
  private:
  const ::google::protobuf::StringValue& _internal_path() const;
  public:
  const ::google::protobuf::StringValue& path() const;
  ::google::protobuf::StringValue* release_path();
  ::google::protobuf::StringValue* mutable_path();
  void set_allocated_path(::google::protobuf::StringValue* path);

  // @@protoc_insertion_point(class_scope:mtm.geo.model.GeographyMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::StringValue* texture_;
  ::google::protobuf::StringValue* path_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GeographyList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.model.GeographyList) */ {
 public:
  GeographyList();
  virtual ~GeographyList();

  GeographyList(const GeographyList& from);

  inline GeographyList& operator=(const GeographyList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeographyList(GeographyList&& from) noexcept
    : GeographyList() {
    *this = ::std::move(from);
  }

  inline GeographyList& operator=(GeographyList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeographyList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeographyList* internal_default_instance() {
    return reinterpret_cast<const GeographyList*>(
               &_GeographyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GeographyList* other);
  friend void swap(GeographyList& a, GeographyList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeographyList* New() const final {
    return CreateMaybeMessage<GeographyList>(NULL);
  }

  GeographyList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeographyList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeographyList& from);
  void MergeFrom(const GeographyList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeographyList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtm.geo.model.Geography geographies = 1;
  int geographies_size() const;
  void clear_geographies();
  static const int kGeographiesFieldNumber = 1;
  ::mtm::geo::model::Geography* mutable_geographies(int index);
  ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Geography >*
      mutable_geographies();
  const ::mtm::geo::model::Geography& geographies(int index) const;
  ::mtm::geo::model::Geography* add_geographies();
  const ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Geography >&
      geographies() const;

  // @@protoc_insertion_point(class_scope:mtm.geo.model.GeographyList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Geography > geographies_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fmodel_2fgeography_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Geography

// int32 primary_key = 1;
inline void Geography::clear_primary_key() {
  primary_key_ = 0;
}
inline ::google::protobuf::int32 Geography::primary_key() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.primary_key)
  return primary_key_;
}
inline void Geography::set_primary_key(::google::protobuf::int32 value) {
  
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.primary_key)
}

// .mtm.Uuid id = 2;
inline bool Geography::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::mtm::Uuid& Geography::_internal_id() const {
  return *id_;
}
inline const ::mtm::Uuid& Geography::id() const {
  const ::mtm::Uuid* p = id_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.id)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::Uuid*>(
      &::mtm::_Uuid_default_instance_);
}
inline ::mtm::Uuid* Geography::release_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.id)
  
  ::mtm::Uuid* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::mtm::Uuid* Geography::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::Uuid>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.id)
  return id_;
}
inline void Geography::set_allocated_id(::mtm::Uuid* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.id)
}

// .mtm.geo.model.GeographyType geography_type = 3;
inline void Geography::clear_geography_type() {
  geography_type_ = 0;
}
inline ::mtm::geo::model::GeographyType Geography::geography_type() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.geography_type)
  return static_cast< ::mtm::geo::model::GeographyType >(geography_type_);
}
inline void Geography::set_geography_type(::mtm::geo::model::GeographyType value) {
  
  geography_type_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.geography_type)
}

// .google.protobuf.StringValue name = 4;
inline bool Geography::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::google::protobuf::StringValue& Geography::_internal_name() const {
  return *name_;
}
inline const ::google::protobuf::StringValue& Geography::name() const {
  const ::google::protobuf::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.name)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* Geography::release_name() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.name)
  
  ::google::protobuf::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* Geography::mutable_name() {
  
  if (name_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.name)
  return name_;
}
inline void Geography::set_allocated_name(::google::protobuf::StringValue* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(name)->GetArena();
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.name)
}

// uint32 created_by = 5;
inline void Geography::clear_created_by() {
  created_by_ = 0u;
}
inline ::google::protobuf::uint32 Geography::created_by() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.created_by)
  return created_by_;
}
inline void Geography::set_created_by(::google::protobuf::uint32 value) {
  
  created_by_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.created_by)
}

// .google.protobuf.Timestamp created = 6;
inline bool Geography::has_created() const {
  return this != internal_default_instance() && created_ != NULL;
}
inline const ::google::protobuf::Timestamp& Geography::_internal_created() const {
  return *created_;
}
inline const ::google::protobuf::Timestamp& Geography::created() const {
  const ::google::protobuf::Timestamp* p = created_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.created)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Geography::release_created() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.created)
  
  ::google::protobuf::Timestamp* temp = created_;
  created_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Geography::mutable_created() {
  
  if (created_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    created_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.created)
  return created_;
}
inline void Geography::set_allocated_created(::google::protobuf::Timestamp* created) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_);
  }
  if (created) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(created)->GetArena();
    if (message_arena != submessage_arena) {
      created = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.created)
}

// uint32 edited_by = 7;
inline void Geography::clear_edited_by() {
  edited_by_ = 0u;
}
inline ::google::protobuf::uint32 Geography::edited_by() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.edited_by)
  return edited_by_;
}
inline void Geography::set_edited_by(::google::protobuf::uint32 value) {
  
  edited_by_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.edited_by)
}

// .google.protobuf.Timestamp edited = 8;
inline bool Geography::has_edited() const {
  return this != internal_default_instance() && edited_ != NULL;
}
inline const ::google::protobuf::Timestamp& Geography::_internal_edited() const {
  return *edited_;
}
inline const ::google::protobuf::Timestamp& Geography::edited() const {
  const ::google::protobuf::Timestamp* p = edited_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.edited)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Geography::release_edited() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.edited)
  
  ::google::protobuf::Timestamp* temp = edited_;
  edited_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Geography::mutable_edited() {
  
  if (edited_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    edited_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.edited)
  return edited_;
}
inline void Geography::set_allocated_edited(::google::protobuf::Timestamp* edited) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(edited_);
  }
  if (edited) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(edited)->GetArena();
    if (message_arena != submessage_arena) {
      edited = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, edited, submessage_arena);
    }
    
  } else {
    
  }
  edited_ = edited;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.edited)
}

// .google.protobuf.StringValue description = 9;
inline bool Geography::has_description() const {
  return this != internal_default_instance() && description_ != NULL;
}
inline const ::google::protobuf::StringValue& Geography::_internal_description() const {
  return *description_;
}
inline const ::google::protobuf::StringValue& Geography::description() const {
  const ::google::protobuf::StringValue* p = description_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.description)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* Geography::release_description() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.description)
  
  ::google::protobuf::StringValue* temp = description_;
  description_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* Geography::mutable_description() {
  
  if (description_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.description)
  return description_;
}
inline void Geography::set_allocated_description(::google::protobuf::StringValue* description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(description_);
  }
  if (description) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(description)->GetArena();
    if (message_arena != submessage_arena) {
      description = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.description)
}

// .google.protobuf.Timestamp valid_from = 10;
inline bool Geography::has_valid_from() const {
  return this != internal_default_instance() && valid_from_ != NULL;
}
inline const ::google::protobuf::Timestamp& Geography::_internal_valid_from() const {
  return *valid_from_;
}
inline const ::google::protobuf::Timestamp& Geography::valid_from() const {
  const ::google::protobuf::Timestamp* p = valid_from_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.valid_from)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Geography::release_valid_from() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.valid_from)
  
  ::google::protobuf::Timestamp* temp = valid_from_;
  valid_from_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Geography::mutable_valid_from() {
  
  if (valid_from_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    valid_from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.valid_from)
  return valid_from_;
}
inline void Geography::set_allocated_valid_from(::google::protobuf::Timestamp* valid_from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(valid_from_);
  }
  if (valid_from) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(valid_from)->GetArena();
    if (message_arena != submessage_arena) {
      valid_from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, valid_from, submessage_arena);
    }
    
  } else {
    
  }
  valid_from_ = valid_from;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.valid_from)
}

// .google.protobuf.Timestamp valid_to = 11;
inline bool Geography::has_valid_to() const {
  return this != internal_default_instance() && valid_to_ != NULL;
}
inline const ::google::protobuf::Timestamp& Geography::_internal_valid_to() const {
  return *valid_to_;
}
inline const ::google::protobuf::Timestamp& Geography::valid_to() const {
  const ::google::protobuf::Timestamp* p = valid_to_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.valid_to)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Geography::release_valid_to() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.valid_to)
  
  ::google::protobuf::Timestamp* temp = valid_to_;
  valid_to_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Geography::mutable_valid_to() {
  
  if (valid_to_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    valid_to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.valid_to)
  return valid_to_;
}
inline void Geography::set_allocated_valid_to(::google::protobuf::Timestamp* valid_to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(valid_to_);
  }
  if (valid_to) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(valid_to)->GetArena();
    if (message_arena != submessage_arena) {
      valid_to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, valid_to, submessage_arena);
    }
    
  } else {
    
  }
  valid_to_ = valid_to;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.valid_to)
}

// bool is_valid = 12;
inline void Geography::clear_is_valid() {
  is_valid_ = false;
}
inline bool Geography::is_valid() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.is_valid)
  return is_valid_;
}
inline void Geography::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.is_valid)
}

// .google.protobuf.StringValue wkt = 13;
inline bool Geography::has_wkt() const {
  return this != internal_default_instance() && wkt_ != NULL;
}
inline const ::google::protobuf::StringValue& Geography::_internal_wkt() const {
  return *wkt_;
}
inline const ::google::protobuf::StringValue& Geography::wkt() const {
  const ::google::protobuf::StringValue* p = wkt_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.wkt)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* Geography::release_wkt() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.wkt)
  
  ::google::protobuf::StringValue* temp = wkt_;
  wkt_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* Geography::mutable_wkt() {
  
  if (wkt_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    wkt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.wkt)
  return wkt_;
}
inline void Geography::set_allocated_wkt(::google::protobuf::StringValue* wkt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(wkt_);
  }
  if (wkt) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(wkt)->GetArena();
    if (message_arena != submessage_arena) {
      wkt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wkt, submessage_arena);
    }
    
  } else {
    
  }
  wkt_ = wkt;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.wkt)
}

// .google.protobuf.StringValue meta = 14;
inline bool Geography::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline const ::google::protobuf::StringValue& Geography::_internal_meta() const {
  return *meta_;
}
inline const ::google::protobuf::StringValue& Geography::meta() const {
  const ::google::protobuf::StringValue* p = meta_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* Geography::release_meta() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.meta)
  
  ::google::protobuf::StringValue* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* Geography::mutable_meta() {
  
  if (meta_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.meta)
  return meta_;
}
inline void Geography::set_allocated_meta(::google::protobuf::StringValue* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(meta_);
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(meta)->GetArena();
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.meta)
}

// .mtm.geo.model.Permission public_permission = 15;
inline void Geography::clear_public_permission() {
  public_permission_ = 0;
}
inline ::mtm::geo::model::Permission Geography::public_permission() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.public_permission)
  return static_cast< ::mtm::geo::model::Permission >(public_permission_);
}
inline void Geography::set_public_permission(::mtm::geo::model::Permission value) {
  
  public_permission_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Geography.public_permission)
}

// .mtm.geo.model.GeographyMeta meta_properties = 17;
inline bool Geography::has_meta_properties() const {
  return this != internal_default_instance() && meta_properties_ != NULL;
}
inline void Geography::clear_meta_properties() {
  if (GetArenaNoVirtual() == NULL && meta_properties_ != NULL) {
    delete meta_properties_;
  }
  meta_properties_ = NULL;
}
inline const ::mtm::geo::model::GeographyMeta& Geography::_internal_meta_properties() const {
  return *meta_properties_;
}
inline const ::mtm::geo::model::GeographyMeta& Geography::meta_properties() const {
  const ::mtm::geo::model::GeographyMeta* p = meta_properties_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.Geography.meta_properties)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::geo::model::GeographyMeta*>(
      &::mtm::geo::model::_GeographyMeta_default_instance_);
}
inline ::mtm::geo::model::GeographyMeta* Geography::release_meta_properties() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Geography.meta_properties)
  
  ::mtm::geo::model::GeographyMeta* temp = meta_properties_;
  meta_properties_ = NULL;
  return temp;
}
inline ::mtm::geo::model::GeographyMeta* Geography::mutable_meta_properties() {
  
  if (meta_properties_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::geo::model::GeographyMeta>(GetArenaNoVirtual());
    meta_properties_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Geography.meta_properties)
  return meta_properties_;
}
inline void Geography::set_allocated_meta_properties(::mtm::geo::model::GeographyMeta* meta_properties) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete meta_properties_;
  }
  if (meta_properties) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta_properties = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta_properties, submessage_arena);
    }
    
  } else {
    
  }
  meta_properties_ = meta_properties;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Geography.meta_properties)
}

// -------------------------------------------------------------------

// GeographyMeta

// .google.protobuf.StringValue texture = 1;
inline bool GeographyMeta::has_texture() const {
  return this != internal_default_instance() && texture_ != NULL;
}
inline const ::google::protobuf::StringValue& GeographyMeta::_internal_texture() const {
  return *texture_;
}
inline const ::google::protobuf::StringValue& GeographyMeta::texture() const {
  const ::google::protobuf::StringValue* p = texture_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyMeta.texture)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* GeographyMeta::release_texture() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyMeta.texture)
  
  ::google::protobuf::StringValue* temp = texture_;
  texture_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* GeographyMeta::mutable_texture() {
  
  if (texture_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    texture_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyMeta.texture)
  return texture_;
}
inline void GeographyMeta::set_allocated_texture(::google::protobuf::StringValue* texture) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(texture_);
  }
  if (texture) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(texture)->GetArena();
    if (message_arena != submessage_arena) {
      texture = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, texture, submessage_arena);
    }
    
  } else {
    
  }
  texture_ = texture;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyMeta.texture)
}

// .google.protobuf.StringValue path = 2;
inline bool GeographyMeta::has_path() const {
  return this != internal_default_instance() && path_ != NULL;
}
inline const ::google::protobuf::StringValue& GeographyMeta::_internal_path() const {
  return *path_;
}
inline const ::google::protobuf::StringValue& GeographyMeta::path() const {
  const ::google::protobuf::StringValue* p = path_;
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyMeta.path)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* GeographyMeta::release_path() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyMeta.path)
  
  ::google::protobuf::StringValue* temp = path_;
  path_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* GeographyMeta::mutable_path() {
  
  if (path_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    path_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyMeta.path)
  return path_;
}
inline void GeographyMeta::set_allocated_path(::google::protobuf::StringValue* path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(path_);
  }
  if (path) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(path)->GetArena();
    if (message_arena != submessage_arena) {
      path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyMeta.path)
}

// -------------------------------------------------------------------

// GeographyList

// repeated .mtm.geo.model.Geography geographies = 1;
inline int GeographyList::geographies_size() const {
  return geographies_.size();
}
inline void GeographyList::clear_geographies() {
  geographies_.Clear();
}
inline ::mtm::geo::model::Geography* GeographyList::mutable_geographies(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyList.geographies)
  return geographies_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Geography >*
GeographyList::mutable_geographies() {
  // @@protoc_insertion_point(field_mutable_list:mtm.geo.model.GeographyList.geographies)
  return &geographies_;
}
inline const ::mtm::geo::model::Geography& GeographyList::geographies(int index) const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyList.geographies)
  return geographies_.Get(index);
}
inline ::mtm::geo::model::Geography* GeographyList::add_geographies() {
  // @@protoc_insertion_point(field_add:mtm.geo.model.GeographyList.geographies)
  return geographies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Geography >&
GeographyList::geographies() const {
  // @@protoc_insertion_point(field_list:mtm.geo.model.GeographyList.geographies)
  return geographies_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace geo
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mtm_2fgeo_2fmodel_2fgeography_2eproto
