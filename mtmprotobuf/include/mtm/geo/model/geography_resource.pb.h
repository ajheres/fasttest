// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/geography_resource.proto

#ifndef PROTOBUF_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto__INCLUDED
#define PROTOBUF_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "mtm/common_types.pb.h"
#include "mtm/geo/model/geo_service_enums.pb.h"
// @@protoc_insertion_point(includes)

namespace mtm {
namespace geo {
namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto();
void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto();
void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto();

class GeographyResource;
class GeographyResourceList;

// ===================================================================

class GeographyResource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.model.GeographyResource) */ {
 public:
  GeographyResource();
  virtual ~GeographyResource();

  GeographyResource(const GeographyResource& from);

  inline GeographyResource& operator=(const GeographyResource& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeographyResource& default_instance();

  void Swap(GeographyResource* other);

  // implements Message ----------------------------------------------

  inline GeographyResource* New() const { return New(NULL); }

  GeographyResource* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeographyResource& from);
  void MergeFrom(const GeographyResource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeographyResource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 primary_key = 1;
  void clear_primary_key();
  static const int kPrimaryKeyFieldNumber = 1;
  ::google::protobuf::int32 primary_key() const;
  void set_primary_key(::google::protobuf::int32 value);

  // optional .mtm.Uuid id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::mtm::Uuid& id() const;
  ::mtm::Uuid* mutable_id();
  ::mtm::Uuid* release_id();
  void set_allocated_id(::mtm::Uuid* id);

  // optional .mtm.geo.model.GeographyResourceType geography_resource_type = 3;
  void clear_geography_resource_type();
  static const int kGeographyResourceTypeFieldNumber = 3;
  ::mtm::geo::model::GeographyResourceType geography_resource_type() const;
  void set_geography_resource_type(::mtm::geo::model::GeographyResourceType value);

  // optional .google.protobuf.StringValue name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::google::protobuf::StringValue& name() const;
  ::google::protobuf::StringValue* mutable_name();
  ::google::protobuf::StringValue* release_name();
  void set_allocated_name(::google::protobuf::StringValue* name);

  // optional uint32 created_by = 5;
  void clear_created_by();
  static const int kCreatedByFieldNumber = 5;
  ::google::protobuf::uint32 created_by() const;
  void set_created_by(::google::protobuf::uint32 value);

  // optional .google.protobuf.Timestamp created = 6;
  bool has_created() const;
  void clear_created();
  static const int kCreatedFieldNumber = 6;
  const ::google::protobuf::Timestamp& created() const;
  ::google::protobuf::Timestamp* mutable_created();
  ::google::protobuf::Timestamp* release_created();
  void set_allocated_created(::google::protobuf::Timestamp* created);

  // optional .google.protobuf.Timestamp valid_from = 7;
  bool has_valid_from() const;
  void clear_valid_from();
  static const int kValidFromFieldNumber = 7;
  const ::google::protobuf::Timestamp& valid_from() const;
  ::google::protobuf::Timestamp* mutable_valid_from();
  ::google::protobuf::Timestamp* release_valid_from();
  void set_allocated_valid_from(::google::protobuf::Timestamp* valid_from);

  // optional .google.protobuf.Timestamp valid_to = 8;
  bool has_valid_to() const;
  void clear_valid_to();
  static const int kValidToFieldNumber = 8;
  const ::google::protobuf::Timestamp& valid_to() const;
  ::google::protobuf::Timestamp* mutable_valid_to();
  ::google::protobuf::Timestamp* release_valid_to();
  void set_allocated_valid_to(::google::protobuf::Timestamp* valid_to);

  // optional bool is_valid = 9;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 9;
  bool is_valid() const;
  void set_is_valid(bool value);

  // @@protoc_insertion_point(class_scope:mtm.geo.model.GeographyResource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::mtm::Uuid* id_;
  ::google::protobuf::int32 primary_key_;
  int geography_resource_type_;
  ::google::protobuf::StringValue* name_;
  ::google::protobuf::Timestamp* created_;
  ::google::protobuf::Timestamp* valid_from_;
  ::google::protobuf::uint32 created_by_;
  bool is_valid_;
  ::google::protobuf::Timestamp* valid_to_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto();
  friend void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto();

  void InitAsDefaultInstance();
  static GeographyResource* default_instance_;
};
// -------------------------------------------------------------------

class GeographyResourceList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.model.GeographyResourceList) */ {
 public:
  GeographyResourceList();
  virtual ~GeographyResourceList();

  GeographyResourceList(const GeographyResourceList& from);

  inline GeographyResourceList& operator=(const GeographyResourceList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeographyResourceList& default_instance();

  void Swap(GeographyResourceList* other);

  // implements Message ----------------------------------------------

  inline GeographyResourceList* New() const { return New(NULL); }

  GeographyResourceList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeographyResourceList& from);
  void MergeFrom(const GeographyResourceList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeographyResourceList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtm.geo.model.GeographyResource geographyResources = 1;
  int geographyresources_size() const;
  void clear_geographyresources();
  static const int kGeographyResourcesFieldNumber = 1;
  const ::mtm::geo::model::GeographyResource& geographyresources(int index) const;
  ::mtm::geo::model::GeographyResource* mutable_geographyresources(int index);
  ::mtm::geo::model::GeographyResource* add_geographyresources();
  ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::GeographyResource >*
      mutable_geographyresources();
  const ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::GeographyResource >&
      geographyresources() const;

  // @@protoc_insertion_point(class_scope:mtm.geo.model.GeographyResourceList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::GeographyResource > geographyresources_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto();
  friend void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto();

  void InitAsDefaultInstance();
  static GeographyResourceList* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GeographyResource

// optional int32 primary_key = 1;
inline void GeographyResource::clear_primary_key() {
  primary_key_ = 0;
}
inline ::google::protobuf::int32 GeographyResource::primary_key() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.primary_key)
  return primary_key_;
}
inline void GeographyResource::set_primary_key(::google::protobuf::int32 value) {
  
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.GeographyResource.primary_key)
}

// optional .mtm.Uuid id = 2;
inline bool GeographyResource::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void GeographyResource::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::mtm::Uuid& GeographyResource::id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::mtm::Uuid* GeographyResource::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyResource.id)
  return id_;
}
inline ::mtm::Uuid* GeographyResource::release_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyResource.id)
  
  ::mtm::Uuid* temp = id_;
  id_ = NULL;
  return temp;
}
inline void GeographyResource::set_allocated_id(::mtm::Uuid* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyResource.id)
}

// optional .mtm.geo.model.GeographyResourceType geography_resource_type = 3;
inline void GeographyResource::clear_geography_resource_type() {
  geography_resource_type_ = 0;
}
inline ::mtm::geo::model::GeographyResourceType GeographyResource::geography_resource_type() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.geography_resource_type)
  return static_cast< ::mtm::geo::model::GeographyResourceType >(geography_resource_type_);
}
inline void GeographyResource::set_geography_resource_type(::mtm::geo::model::GeographyResourceType value) {
  
  geography_resource_type_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.GeographyResource.geography_resource_type)
}

// optional .google.protobuf.StringValue name = 4;
inline bool GeographyResource::has_name() const {
  return !_is_default_instance_ && name_ != NULL;
}
inline void GeographyResource::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) delete name_;
  name_ = NULL;
}
inline const ::google::protobuf::StringValue& GeographyResource::name() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.name)
  return name_ != NULL ? *name_ : *default_instance_->name_;
}
inline ::google::protobuf::StringValue* GeographyResource::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyResource.name)
  return name_;
}
inline ::google::protobuf::StringValue* GeographyResource::release_name() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyResource.name)
  
  ::google::protobuf::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline void GeographyResource::set_allocated_name(::google::protobuf::StringValue* name) {
  delete name_;
  if (name != NULL && name->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_name = new ::google::protobuf::StringValue;
    new_name->CopyFrom(*name);
    name = new_name;
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyResource.name)
}

// optional uint32 created_by = 5;
inline void GeographyResource::clear_created_by() {
  created_by_ = 0u;
}
inline ::google::protobuf::uint32 GeographyResource::created_by() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.created_by)
  return created_by_;
}
inline void GeographyResource::set_created_by(::google::protobuf::uint32 value) {
  
  created_by_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.GeographyResource.created_by)
}

// optional .google.protobuf.Timestamp created = 6;
inline bool GeographyResource::has_created() const {
  return !_is_default_instance_ && created_ != NULL;
}
inline void GeographyResource::clear_created() {
  if (GetArenaNoVirtual() == NULL && created_ != NULL) delete created_;
  created_ = NULL;
}
inline const ::google::protobuf::Timestamp& GeographyResource::created() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.created)
  return created_ != NULL ? *created_ : *default_instance_->created_;
}
inline ::google::protobuf::Timestamp* GeographyResource::mutable_created() {
  
  if (created_ == NULL) {
    created_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyResource.created)
  return created_;
}
inline ::google::protobuf::Timestamp* GeographyResource::release_created() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyResource.created)
  
  ::google::protobuf::Timestamp* temp = created_;
  created_ = NULL;
  return temp;
}
inline void GeographyResource::set_allocated_created(::google::protobuf::Timestamp* created) {
  delete created_;
  if (created != NULL && created->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_created = new ::google::protobuf::Timestamp;
    new_created->CopyFrom(*created);
    created = new_created;
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyResource.created)
}

// optional .google.protobuf.Timestamp valid_from = 7;
inline bool GeographyResource::has_valid_from() const {
  return !_is_default_instance_ && valid_from_ != NULL;
}
inline void GeographyResource::clear_valid_from() {
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) delete valid_from_;
  valid_from_ = NULL;
}
inline const ::google::protobuf::Timestamp& GeographyResource::valid_from() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.valid_from)
  return valid_from_ != NULL ? *valid_from_ : *default_instance_->valid_from_;
}
inline ::google::protobuf::Timestamp* GeographyResource::mutable_valid_from() {
  
  if (valid_from_ == NULL) {
    valid_from_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyResource.valid_from)
  return valid_from_;
}
inline ::google::protobuf::Timestamp* GeographyResource::release_valid_from() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyResource.valid_from)
  
  ::google::protobuf::Timestamp* temp = valid_from_;
  valid_from_ = NULL;
  return temp;
}
inline void GeographyResource::set_allocated_valid_from(::google::protobuf::Timestamp* valid_from) {
  delete valid_from_;
  if (valid_from != NULL && valid_from->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_valid_from = new ::google::protobuf::Timestamp;
    new_valid_from->CopyFrom(*valid_from);
    valid_from = new_valid_from;
  }
  valid_from_ = valid_from;
  if (valid_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyResource.valid_from)
}

// optional .google.protobuf.Timestamp valid_to = 8;
inline bool GeographyResource::has_valid_to() const {
  return !_is_default_instance_ && valid_to_ != NULL;
}
inline void GeographyResource::clear_valid_to() {
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) delete valid_to_;
  valid_to_ = NULL;
}
inline const ::google::protobuf::Timestamp& GeographyResource::valid_to() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.valid_to)
  return valid_to_ != NULL ? *valid_to_ : *default_instance_->valid_to_;
}
inline ::google::protobuf::Timestamp* GeographyResource::mutable_valid_to() {
  
  if (valid_to_ == NULL) {
    valid_to_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyResource.valid_to)
  return valid_to_;
}
inline ::google::protobuf::Timestamp* GeographyResource::release_valid_to() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.GeographyResource.valid_to)
  
  ::google::protobuf::Timestamp* temp = valid_to_;
  valid_to_ = NULL;
  return temp;
}
inline void GeographyResource::set_allocated_valid_to(::google::protobuf::Timestamp* valid_to) {
  delete valid_to_;
  if (valid_to != NULL && valid_to->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_valid_to = new ::google::protobuf::Timestamp;
    new_valid_to->CopyFrom(*valid_to);
    valid_to = new_valid_to;
  }
  valid_to_ = valid_to;
  if (valid_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.GeographyResource.valid_to)
}

// optional bool is_valid = 9;
inline void GeographyResource::clear_is_valid() {
  is_valid_ = false;
}
inline bool GeographyResource::is_valid() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResource.is_valid)
  return is_valid_;
}
inline void GeographyResource::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.GeographyResource.is_valid)
}

// -------------------------------------------------------------------

// GeographyResourceList

// repeated .mtm.geo.model.GeographyResource geographyResources = 1;
inline int GeographyResourceList::geographyresources_size() const {
  return geographyresources_.size();
}
inline void GeographyResourceList::clear_geographyresources() {
  geographyresources_.Clear();
}
inline const ::mtm::geo::model::GeographyResource& GeographyResourceList::geographyresources(int index) const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.GeographyResourceList.geographyResources)
  return geographyresources_.Get(index);
}
inline ::mtm::geo::model::GeographyResource* GeographyResourceList::mutable_geographyresources(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.GeographyResourceList.geographyResources)
  return geographyresources_.Mutable(index);
}
inline ::mtm::geo::model::GeographyResource* GeographyResourceList::add_geographyresources() {
  // @@protoc_insertion_point(field_add:mtm.geo.model.GeographyResourceList.geographyResources)
  return geographyresources_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::GeographyResource >*
GeographyResourceList::mutable_geographyresources() {
  // @@protoc_insertion_point(field_mutable_list:mtm.geo.model.GeographyResourceList.geographyResources)
  return &geographyresources_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::GeographyResource >&
GeographyResourceList::geographyresources() const {
  // @@protoc_insertion_point(field_list:mtm.geo.model.GeographyResourceList.geographyResources)
  return geographyresources_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace geo
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mtm_2fgeo_2fmodel_2fgeography_5fresource_2eproto__INCLUDED
