// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/visual.proto

#include "mtm/geo/model/visual.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringValue;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_mtm_2fcommon_5ftypes_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fcommon_5ftypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Uuid;
}  // namespace protobuf_mtm_2fcommon_5ftypes_2eproto
namespace protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Visual;
}  // namespace protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto
namespace mtm {
namespace geo {
namespace model {
class VisualDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Visual>
      _instance;
} _Visual_default_instance_;
class VisualListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VisualList>
      _instance;
} _VisualList_default_instance_;
}  // namespace model
}  // namespace geo
}  // namespace mtm
namespace protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto {
static void InitDefaultsVisual() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mtm::geo::model::_Visual_default_instance_;
    new (ptr) ::mtm::geo::model::Visual();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mtm::geo::model::Visual::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Visual =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsVisual}, {
      &protobuf_mtm_2fcommon_5ftypes_2eproto::scc_info_Uuid.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,}};

static void InitDefaultsVisualList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mtm::geo::model::_VisualList_default_instance_;
    new (ptr) ::mtm::geo::model::VisualList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mtm::geo::model::VisualList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VisualList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVisualList}, {
      &protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::scc_info_Visual.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Visual.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VisualList.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, primary_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, valid_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, valid_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, is_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, texture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, fill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, stroke_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, stroke_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, stroke_style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, show_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::Visual, text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::VisualList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::geo::model::VisualList, visuals_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mtm::geo::model::Visual)},
  { 21, -1, sizeof(::mtm::geo::model::VisualList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mtm::geo::model::_Visual_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mtm::geo::model::_VisualList_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mtm/geo/model/visual.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032mtm/geo/model/visual.proto\022\rmtm.geo.mo"
      "del\032\037google/protobuf/timestamp.proto\032\036go"
      "ogle/protobuf/wrappers.proto\032\026mtm/common"
      "_types.proto\032%mtm/geo/model/geo_service_"
      "enums.proto\"\300\003\n\006Visual\022\023\n\013primary_key\030\001 "
      "\001(\005\022\025\n\002id\030\002 \001(\0132\t.mtm.Uuid\022\r\n\005owner\030\003 \001("
      "\r\022.\n\nvalid_from\030\004 \001(\0132\032.google.protobuf."
      "Timestamp\022,\n\010valid_to\030\005 \001(\0132\032.google.pro"
      "tobuf.Timestamp\022\020\n\010is_valid\030\006 \001(\010\022-\n\007tex"
      "ture\030\007 \001(\0132\034.google.protobuf.StringValue"
      "\022\r\n\005scale\030\010 \001(\005\022\014\n\004fill\030\t \001(\005\022\016\n\006stroke\030"
      "\n \001(\005\022\024\n\014stroke_width\030\013 \001(\002\0227\n\014stroke_st"
      "yle\030\014 \001(\0162!.mtm.geo.model.GeographyDashS"
      "tyle\022\020\n\010priority\030\r \001(\005\022\017\n\007visible\030\016 \001(\010\022"
      "\021\n\tshow_text\030\017 \001(\010\022*\n\004text\030\020 \001(\0132\034.googl"
      "e.protobuf.StringValue\"4\n\nVisualList\022&\n\007"
      "visuals\030\001 \003(\0132\025.mtm.geo.model.Visualb\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 684);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/geo/model/visual.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_mtm_2fcommon_5ftypes_2eproto::AddDescriptors();
  ::protobuf_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto
namespace mtm {
namespace geo {
namespace model {

// ===================================================================

void Visual::InitAsDefaultInstance() {
  ::mtm::geo::model::_Visual_default_instance_._instance.get_mutable()->id_ = const_cast< ::mtm::Uuid*>(
      ::mtm::Uuid::internal_default_instance());
  ::mtm::geo::model::_Visual_default_instance_._instance.get_mutable()->valid_from_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::mtm::geo::model::_Visual_default_instance_._instance.get_mutable()->valid_to_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::mtm::geo::model::_Visual_default_instance_._instance.get_mutable()->texture_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::mtm::geo::model::_Visual_default_instance_._instance.get_mutable()->text_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}
void Visual::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void Visual::clear_valid_from() {
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) {
    delete valid_from_;
  }
  valid_from_ = NULL;
}
void Visual::clear_valid_to() {
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) {
    delete valid_to_;
  }
  valid_to_ = NULL;
}
void Visual::clear_texture() {
  if (GetArenaNoVirtual() == NULL && texture_ != NULL) {
    delete texture_;
  }
  texture_ = NULL;
}
void Visual::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Visual::kPrimaryKeyFieldNumber;
const int Visual::kIdFieldNumber;
const int Visual::kOwnerFieldNumber;
const int Visual::kValidFromFieldNumber;
const int Visual::kValidToFieldNumber;
const int Visual::kIsValidFieldNumber;
const int Visual::kTextureFieldNumber;
const int Visual::kScaleFieldNumber;
const int Visual::kFillFieldNumber;
const int Visual::kStrokeFieldNumber;
const int Visual::kStrokeWidthFieldNumber;
const int Visual::kStrokeStyleFieldNumber;
const int Visual::kPriorityFieldNumber;
const int Visual::kVisibleFieldNumber;
const int Visual::kShowTextFieldNumber;
const int Visual::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Visual::Visual()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::scc_info_Visual.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.Visual)
}
Visual::Visual(const Visual& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::mtm::Uuid(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_valid_from()) {
    valid_from_ = new ::google::protobuf::Timestamp(*from.valid_from_);
  } else {
    valid_from_ = NULL;
  }
  if (from.has_valid_to()) {
    valid_to_ = new ::google::protobuf::Timestamp(*from.valid_to_);
  } else {
    valid_to_ = NULL;
  }
  if (from.has_texture()) {
    texture_ = new ::google::protobuf::StringValue(*from.texture_);
  } else {
    texture_ = NULL;
  }
  if (from.has_text()) {
    text_ = new ::google::protobuf::StringValue(*from.text_);
  } else {
    text_ = NULL;
  }
  ::memcpy(&primary_key_, &from.primary_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&primary_key_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.Visual)
}

void Visual::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&id_)) + sizeof(priority_));
}

Visual::~Visual() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.Visual)
  SharedDtor();
}

void Visual::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete valid_from_;
  if (this != internal_default_instance()) delete valid_to_;
  if (this != internal_default_instance()) delete texture_;
  if (this != internal_default_instance()) delete text_;
}

void Visual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Visual::descriptor() {
  ::protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Visual& Visual::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::scc_info_Visual.base);
  return *internal_default_instance();
}


void Visual::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.Visual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) {
    delete valid_from_;
  }
  valid_from_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) {
    delete valid_to_;
  }
  valid_to_ = NULL;
  if (GetArenaNoVirtual() == NULL && texture_ != NULL) {
    delete texture_;
  }
  texture_ = NULL;
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
  ::memset(&primary_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&primary_key_)) + sizeof(priority_));
  _internal_metadata_.Clear();
}

bool Visual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.Visual)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 primary_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.Uuid id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp valid_from = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_valid_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp valid_to = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_valid_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_valid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue texture = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_texture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scale = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fill = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stroke = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stroke_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float stroke_width = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stroke_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.geo.model.GeographyDashStyle stroke_style = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stroke_style(static_cast< ::mtm::geo::model::GeographyDashStyle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool visible = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool show_text = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_text_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue text = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.Visual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.Visual)
  return false;
#undef DO_
}

void Visual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.Visual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 primary_key = 1;
  if (this->primary_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->primary_key(), output);
  }

  // .mtm.Uuid id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_id(), output);
  }

  // uint32 owner = 3;
  if (this->owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->owner(), output);
  }

  // .google.protobuf.Timestamp valid_from = 4;
  if (this->has_valid_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_valid_from(), output);
  }

  // .google.protobuf.Timestamp valid_to = 5;
  if (this->has_valid_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_valid_to(), output);
  }

  // bool is_valid = 6;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_valid(), output);
  }

  // .google.protobuf.StringValue texture = 7;
  if (this->has_texture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_texture(), output);
  }

  // int32 scale = 8;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scale(), output);
  }

  // int32 fill = 9;
  if (this->fill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fill(), output);
  }

  // int32 stroke = 10;
  if (this->stroke() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->stroke(), output);
  }

  // float stroke_width = 11;
  if (this->stroke_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->stroke_width(), output);
  }

  // .mtm.geo.model.GeographyDashStyle stroke_style = 12;
  if (this->stroke_style() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->stroke_style(), output);
  }

  // int32 priority = 13;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->priority(), output);
  }

  // bool visible = 14;
  if (this->visible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->visible(), output);
  }

  // bool show_text = 15;
  if (this->show_text() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->show_text(), output);
  }

  // .google.protobuf.StringValue text = 16;
  if (this->has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_text(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mtm.geo.model.Visual)
}

::google::protobuf::uint8* Visual::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.Visual)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 primary_key = 1;
  if (this->primary_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->primary_key(), target);
  }

  // .mtm.Uuid id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_id(), deterministic, target);
  }

  // uint32 owner = 3;
  if (this->owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->owner(), target);
  }

  // .google.protobuf.Timestamp valid_from = 4;
  if (this->has_valid_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_valid_from(), deterministic, target);
  }

  // .google.protobuf.Timestamp valid_to = 5;
  if (this->has_valid_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_valid_to(), deterministic, target);
  }

  // bool is_valid = 6;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_valid(), target);
  }

  // .google.protobuf.StringValue texture = 7;
  if (this->has_texture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_texture(), deterministic, target);
  }

  // int32 scale = 8;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scale(), target);
  }

  // int32 fill = 9;
  if (this->fill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fill(), target);
  }

  // int32 stroke = 10;
  if (this->stroke() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->stroke(), target);
  }

  // float stroke_width = 11;
  if (this->stroke_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->stroke_width(), target);
  }

  // .mtm.geo.model.GeographyDashStyle stroke_style = 12;
  if (this->stroke_style() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->stroke_style(), target);
  }

  // int32 priority = 13;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->priority(), target);
  }

  // bool visible = 14;
  if (this->visible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->visible(), target);
  }

  // bool show_text = 15;
  if (this->show_text() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->show_text(), target);
  }

  // .google.protobuf.StringValue text = 16;
  if (this->has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_text(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.Visual)
  return target;
}

size_t Visual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.Visual)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mtm.Uuid id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .google.protobuf.Timestamp valid_from = 4;
  if (this->has_valid_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *valid_from_);
  }

  // .google.protobuf.Timestamp valid_to = 5;
  if (this->has_valid_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *valid_to_);
  }

  // .google.protobuf.StringValue texture = 7;
  if (this->has_texture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *texture_);
  }

  // .google.protobuf.StringValue text = 16;
  if (this->has_text()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *text_);
  }

  // int32 primary_key = 1;
  if (this->primary_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->primary_key());
  }

  // uint32 owner = 3;
  if (this->owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner());
  }

  // int32 scale = 8;
  if (this->scale() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scale());
  }

  // int32 fill = 9;
  if (this->fill() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fill());
  }

  // int32 stroke = 10;
  if (this->stroke() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stroke());
  }

  // float stroke_width = 11;
  if (this->stroke_width() != 0) {
    total_size += 1 + 4;
  }

  // bool is_valid = 6;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool visible = 14;
  if (this->visible() != 0) {
    total_size += 1 + 1;
  }

  // bool show_text = 15;
  if (this->show_text() != 0) {
    total_size += 1 + 1;
  }

  // .mtm.geo.model.GeographyDashStyle stroke_style = 12;
  if (this->stroke_style() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stroke_style());
  }

  // int32 priority = 13;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Visual::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.Visual)
  GOOGLE_DCHECK_NE(&from, this);
  const Visual* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Visual>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.Visual)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.Visual)
    MergeFrom(*source);
  }
}

void Visual::MergeFrom(const Visual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.Visual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::mtm::Uuid::MergeFrom(from.id());
  }
  if (from.has_valid_from()) {
    mutable_valid_from()->::google::protobuf::Timestamp::MergeFrom(from.valid_from());
  }
  if (from.has_valid_to()) {
    mutable_valid_to()->::google::protobuf::Timestamp::MergeFrom(from.valid_to());
  }
  if (from.has_texture()) {
    mutable_texture()->::google::protobuf::StringValue::MergeFrom(from.texture());
  }
  if (from.has_text()) {
    mutable_text()->::google::protobuf::StringValue::MergeFrom(from.text());
  }
  if (from.primary_key() != 0) {
    set_primary_key(from.primary_key());
  }
  if (from.owner() != 0) {
    set_owner(from.owner());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
  if (from.fill() != 0) {
    set_fill(from.fill());
  }
  if (from.stroke() != 0) {
    set_stroke(from.stroke());
  }
  if (from.stroke_width() != 0) {
    set_stroke_width(from.stroke_width());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
  if (from.visible() != 0) {
    set_visible(from.visible());
  }
  if (from.show_text() != 0) {
    set_show_text(from.show_text());
  }
  if (from.stroke_style() != 0) {
    set_stroke_style(from.stroke_style());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
}

void Visual::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.Visual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visual::CopyFrom(const Visual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.Visual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visual::IsInitialized() const {
  return true;
}

void Visual::Swap(Visual* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Visual::InternalSwap(Visual* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(valid_from_, other->valid_from_);
  swap(valid_to_, other->valid_to_);
  swap(texture_, other->texture_);
  swap(text_, other->text_);
  swap(primary_key_, other->primary_key_);
  swap(owner_, other->owner_);
  swap(scale_, other->scale_);
  swap(fill_, other->fill_);
  swap(stroke_, other->stroke_);
  swap(stroke_width_, other->stroke_width_);
  swap(is_valid_, other->is_valid_);
  swap(visible_, other->visible_);
  swap(show_text_, other->show_text_);
  swap(stroke_style_, other->stroke_style_);
  swap(priority_, other->priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Visual::GetMetadata() const {
  protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VisualList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisualList::kVisualsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisualList::VisualList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::scc_info_VisualList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.VisualList)
}
VisualList::VisualList(const VisualList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      visuals_(from.visuals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.VisualList)
}

void VisualList::SharedCtor() {
}

VisualList::~VisualList() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.VisualList)
  SharedDtor();
}

void VisualList::SharedDtor() {
}

void VisualList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VisualList::descriptor() {
  ::protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VisualList& VisualList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::scc_info_VisualList.base);
  return *internal_default_instance();
}


void VisualList::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.VisualList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visuals_.Clear();
  _internal_metadata_.Clear();
}

bool VisualList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.VisualList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mtm.geo.model.Visual visuals = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_visuals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.VisualList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.VisualList)
  return false;
#undef DO_
}

void VisualList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.VisualList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mtm.geo.model.Visual visuals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visuals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->visuals(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mtm.geo.model.VisualList)
}

::google::protobuf::uint8* VisualList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.VisualList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mtm.geo.model.Visual visuals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visuals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->visuals(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.VisualList)
  return target;
}

size_t VisualList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.VisualList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .mtm.geo.model.Visual visuals = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->visuals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->visuals(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisualList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.VisualList)
  GOOGLE_DCHECK_NE(&from, this);
  const VisualList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VisualList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.VisualList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.VisualList)
    MergeFrom(*source);
  }
}

void VisualList::MergeFrom(const VisualList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.VisualList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  visuals_.MergeFrom(from.visuals_);
}

void VisualList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.VisualList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualList::CopyFrom(const VisualList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.VisualList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualList::IsInitialized() const {
  return true;
}

void VisualList::Swap(VisualList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisualList::InternalSwap(VisualList* other) {
  using std::swap;
  CastToBase(&visuals_)->InternalSwap(CastToBase(&other->visuals_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VisualList::GetMetadata() const {
  protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fgeo_2fmodel_2fvisual_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace geo
}  // namespace mtm
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mtm::geo::model::Visual* Arena::CreateMaybeMessage< ::mtm::geo::model::Visual >(Arena* arena) {
  return Arena::CreateInternal< ::mtm::geo::model::Visual >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mtm::geo::model::VisualList* Arena::CreateMaybeMessage< ::mtm::geo::model::VisualList >(Arena* arena) {
  return Arena::CreateInternal< ::mtm::geo::model::VisualList >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
