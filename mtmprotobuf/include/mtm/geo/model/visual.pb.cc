// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/model/visual.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtm/geo/model/visual.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mtm {
namespace geo {
namespace model {

namespace {

const ::google::protobuf::Descriptor* Visual_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Visual_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisualList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisualList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto() {
  protobuf_AddDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mtm/geo/model/visual.proto");
  GOOGLE_CHECK(file != NULL);
  Visual_descriptor_ = file->message_type(0);
  static const int Visual_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, primary_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, valid_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, valid_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, is_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, fill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, stroke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, stroke_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, stroke_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, show_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, text_),
  };
  Visual_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Visual_descriptor_,
      Visual::default_instance_,
      Visual_offsets_,
      -1,
      -1,
      -1,
      sizeof(Visual),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Visual, _is_default_instance_));
  VisualList_descriptor_ = file->message_type(1);
  static const int VisualList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualList, visuals_),
  };
  VisualList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VisualList_descriptor_,
      VisualList::default_instance_,
      VisualList_offsets_,
      -1,
      -1,
      -1,
      sizeof(VisualList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisualList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Visual_descriptor_, &Visual::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VisualList_descriptor_, &VisualList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fvisual_2eproto() {
  delete Visual::default_instance_;
  delete Visual_reflection_;
  delete VisualList::default_instance_;
  delete VisualList_reflection_;
}

void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::mtm::protobuf_AddDesc_mtm_2fcommon_5ftypes_2eproto();
  ::mtm::geo::model::protobuf_AddDesc_mtm_2fgeo_2fmodel_2fgeo_5fservice_5fenums_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032mtm/geo/model/visual.proto\022\rmtm.geo.mo"
    "del\032\037google/protobuf/timestamp.proto\032\036go"
    "ogle/protobuf/wrappers.proto\032\026mtm/common"
    "_types.proto\032%mtm/geo/model/geo_service_"
    "enums.proto\"\300\003\n\006Visual\022\023\n\013primary_key\030\001 "
    "\001(\005\022\025\n\002id\030\002 \001(\0132\t.mtm.Uuid\022\r\n\005owner\030\003 \001("
    "\r\022.\n\nvalid_from\030\004 \001(\0132\032.google.protobuf."
    "Timestamp\022,\n\010valid_to\030\005 \001(\0132\032.google.pro"
    "tobuf.Timestamp\022\020\n\010is_valid\030\006 \001(\010\022-\n\007tex"
    "ture\030\007 \001(\0132\034.google.protobuf.StringValue"
    "\022\r\n\005scale\030\010 \001(\005\022\014\n\004fill\030\t \001(\005\022\016\n\006stroke\030"
    "\n \001(\005\022\024\n\014stroke_width\030\013 \001(\002\0227\n\014stroke_st"
    "yle\030\014 \001(\0162!.mtm.geo.model.GeographyDashS"
    "tyle\022\020\n\010priority\030\r \001(\005\022\017\n\007visible\030\016 \001(\010\022"
    "\021\n\tshow_text\030\017 \001(\010\022*\n\004text\030\020 \001(\0132\034.googl"
    "e.protobuf.StringValue\"4\n\nVisualList\022&\n\007"
    "visuals\030\001 \003(\0132\025.mtm.geo.model.Visualb\006pr"
    "oto3", 684);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/geo/model/visual.proto", &protobuf_RegisterTypes);
  Visual::default_instance_ = new Visual();
  VisualList::default_instance_ = new VisualList();
  Visual::default_instance_->InitAsDefaultInstance();
  VisualList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtm_2fgeo_2fmodel_2fvisual_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtm_2fgeo_2fmodel_2fvisual_2eproto {
  StaticDescriptorInitializer_mtm_2fgeo_2fmodel_2fvisual_2eproto() {
    protobuf_AddDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto();
  }
} static_descriptor_initializer_mtm_2fgeo_2fmodel_2fvisual_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Visual::kPrimaryKeyFieldNumber;
const int Visual::kIdFieldNumber;
const int Visual::kOwnerFieldNumber;
const int Visual::kValidFromFieldNumber;
const int Visual::kValidToFieldNumber;
const int Visual::kIsValidFieldNumber;
const int Visual::kTextureFieldNumber;
const int Visual::kScaleFieldNumber;
const int Visual::kFillFieldNumber;
const int Visual::kStrokeFieldNumber;
const int Visual::kStrokeWidthFieldNumber;
const int Visual::kStrokeStyleFieldNumber;
const int Visual::kPriorityFieldNumber;
const int Visual::kVisibleFieldNumber;
const int Visual::kShowTextFieldNumber;
const int Visual::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Visual::Visual()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.Visual)
}

void Visual::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  id_ = const_cast< ::mtm::Uuid*>(&::mtm::Uuid::default_instance());
  valid_from_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  valid_to_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  texture_ = const_cast< ::google::protobuf::StringValue*>(&::google::protobuf::StringValue::default_instance());
  text_ = const_cast< ::google::protobuf::StringValue*>(&::google::protobuf::StringValue::default_instance());
}

Visual::Visual(const Visual& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.Visual)
}

void Visual::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  primary_key_ = 0;
  id_ = NULL;
  owner_ = 0u;
  valid_from_ = NULL;
  valid_to_ = NULL;
  is_valid_ = false;
  texture_ = NULL;
  scale_ = 0;
  fill_ = 0;
  stroke_ = 0;
  stroke_width_ = 0;
  stroke_style_ = 0;
  priority_ = 0;
  visible_ = false;
  show_text_ = false;
  text_ = NULL;
}

Visual::~Visual() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.Visual)
  SharedDtor();
}

void Visual::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete valid_from_;
    delete valid_to_;
    delete texture_;
    delete text_;
  }
}

void Visual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Visual::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Visual_descriptor_;
}

const Visual& Visual::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto();
  return *default_instance_;
}

Visual* Visual::default_instance_ = NULL;

Visual* Visual::New(::google::protobuf::Arena* arena) const {
  Visual* n = new Visual;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Visual::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.Visual)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Visual, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Visual*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(primary_key_, owner_);
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) delete valid_from_;
  valid_from_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) delete valid_to_;
  valid_to_ = NULL;
  is_valid_ = false;
  if (GetArenaNoVirtual() == NULL && texture_ != NULL) delete texture_;
  texture_ = NULL;
  scale_ = 0;
  ZR_(fill_, stroke_width_);
  ZR_(visible_, stroke_style_);
  priority_ = 0;
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Visual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.Visual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 primary_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional .mtm.Uuid id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_owner;
        break;
      }

      // optional uint32 owner = 3;
      case 3: {
        if (tag == 24) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_valid_from;
        break;
      }

      // optional .google.protobuf.Timestamp valid_from = 4;
      case 4: {
        if (tag == 34) {
         parse_valid_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valid_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_valid_to;
        break;
      }

      // optional .google.protobuf.Timestamp valid_to = 5;
      case 5: {
        if (tag == 42) {
         parse_valid_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valid_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_valid;
        break;
      }

      // optional bool is_valid = 6;
      case 6: {
        if (tag == 48) {
         parse_is_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_texture;
        break;
      }

      // optional .google.protobuf.StringValue texture = 7;
      case 7: {
        if (tag == 58) {
         parse_texture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_scale;
        break;
      }

      // optional int32 scale = 8;
      case 8: {
        if (tag == 64) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fill;
        break;
      }

      // optional int32 fill = 9;
      case 9: {
        if (tag == 72) {
         parse_fill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fill_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_stroke;
        break;
      }

      // optional int32 stroke = 10;
      case 10: {
        if (tag == 80) {
         parse_stroke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stroke_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_stroke_width;
        break;
      }

      // optional float stroke_width = 11;
      case 11: {
        if (tag == 93) {
         parse_stroke_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stroke_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_stroke_style;
        break;
      }

      // optional .mtm.geo.model.GeographyDashStyle stroke_style = 12;
      case 12: {
        if (tag == 96) {
         parse_stroke_style:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stroke_style(static_cast< ::mtm::geo::model::GeographyDashStyle >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_priority;
        break;
      }

      // optional int32 priority = 13;
      case 13: {
        if (tag == 104) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_visible;
        break;
      }

      // optional bool visible = 14;
      case 14: {
        if (tag == 112) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_show_text;
        break;
      }

      // optional bool show_text = 15;
      case 15: {
        if (tag == 120) {
         parse_show_text:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_text_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_text;
        break;
      }

      // optional .google.protobuf.StringValue text = 16;
      case 16: {
        if (tag == 130) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.Visual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.Visual)
  return false;
#undef DO_
}

void Visual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.Visual)
  // optional int32 primary_key = 1;
  if (this->primary_key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->primary_key(), output);
  }

  // optional .mtm.Uuid id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->id_, output);
  }

  // optional uint32 owner = 3;
  if (this->owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->owner(), output);
  }

  // optional .google.protobuf.Timestamp valid_from = 4;
  if (this->has_valid_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->valid_from_, output);
  }

  // optional .google.protobuf.Timestamp valid_to = 5;
  if (this->has_valid_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->valid_to_, output);
  }

  // optional bool is_valid = 6;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_valid(), output);
  }

  // optional .google.protobuf.StringValue texture = 7;
  if (this->has_texture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->texture_, output);
  }

  // optional int32 scale = 8;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scale(), output);
  }

  // optional int32 fill = 9;
  if (this->fill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fill(), output);
  }

  // optional int32 stroke = 10;
  if (this->stroke() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->stroke(), output);
  }

  // optional float stroke_width = 11;
  if (this->stroke_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->stroke_width(), output);
  }

  // optional .mtm.geo.model.GeographyDashStyle stroke_style = 12;
  if (this->stroke_style() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->stroke_style(), output);
  }

  // optional int32 priority = 13;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->priority(), output);
  }

  // optional bool visible = 14;
  if (this->visible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->visible(), output);
  }

  // optional bool show_text = 15;
  if (this->show_text() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->show_text(), output);
  }

  // optional .google.protobuf.StringValue text = 16;
  if (this->has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->text_, output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.geo.model.Visual)
}

::google::protobuf::uint8* Visual::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.Visual)
  // optional int32 primary_key = 1;
  if (this->primary_key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->primary_key(), target);
  }

  // optional .mtm.Uuid id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->id_, false, target);
  }

  // optional uint32 owner = 3;
  if (this->owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->owner(), target);
  }

  // optional .google.protobuf.Timestamp valid_from = 4;
  if (this->has_valid_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->valid_from_, false, target);
  }

  // optional .google.protobuf.Timestamp valid_to = 5;
  if (this->has_valid_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->valid_to_, false, target);
  }

  // optional bool is_valid = 6;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_valid(), target);
  }

  // optional .google.protobuf.StringValue texture = 7;
  if (this->has_texture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->texture_, false, target);
  }

  // optional int32 scale = 8;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scale(), target);
  }

  // optional int32 fill = 9;
  if (this->fill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fill(), target);
  }

  // optional int32 stroke = 10;
  if (this->stroke() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->stroke(), target);
  }

  // optional float stroke_width = 11;
  if (this->stroke_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->stroke_width(), target);
  }

  // optional .mtm.geo.model.GeographyDashStyle stroke_style = 12;
  if (this->stroke_style() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->stroke_style(), target);
  }

  // optional int32 priority = 13;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->priority(), target);
  }

  // optional bool visible = 14;
  if (this->visible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->visible(), target);
  }

  // optional bool show_text = 15;
  if (this->show_text() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->show_text(), target);
  }

  // optional .google.protobuf.StringValue text = 16;
  if (this->has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->text_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.Visual)
  return target;
}

int Visual::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.Visual)
  int total_size = 0;

  // optional int32 primary_key = 1;
  if (this->primary_key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->primary_key());
  }

  // optional .mtm.Uuid id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // optional uint32 owner = 3;
  if (this->owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner());
  }

  // optional .google.protobuf.Timestamp valid_from = 4;
  if (this->has_valid_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->valid_from_);
  }

  // optional .google.protobuf.Timestamp valid_to = 5;
  if (this->has_valid_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->valid_to_);
  }

  // optional bool is_valid = 6;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // optional .google.protobuf.StringValue texture = 7;
  if (this->has_texture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->texture_);
  }

  // optional int32 scale = 8;
  if (this->scale() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scale());
  }

  // optional int32 fill = 9;
  if (this->fill() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fill());
  }

  // optional int32 stroke = 10;
  if (this->stroke() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stroke());
  }

  // optional float stroke_width = 11;
  if (this->stroke_width() != 0) {
    total_size += 1 + 4;
  }

  // optional .mtm.geo.model.GeographyDashStyle stroke_style = 12;
  if (this->stroke_style() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stroke_style());
  }

  // optional int32 priority = 13;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  // optional bool visible = 14;
  if (this->visible() != 0) {
    total_size += 1 + 1;
  }

  // optional bool show_text = 15;
  if (this->show_text() != 0) {
    total_size += 1 + 1;
  }

  // optional .google.protobuf.StringValue text = 16;
  if (this->has_text()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->text_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Visual::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.Visual)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Visual* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Visual>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.Visual)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.Visual)
    MergeFrom(*source);
  }
}

void Visual::MergeFrom(const Visual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.Visual)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.primary_key() != 0) {
    set_primary_key(from.primary_key());
  }
  if (from.has_id()) {
    mutable_id()->::mtm::Uuid::MergeFrom(from.id());
  }
  if (from.owner() != 0) {
    set_owner(from.owner());
  }
  if (from.has_valid_from()) {
    mutable_valid_from()->::google::protobuf::Timestamp::MergeFrom(from.valid_from());
  }
  if (from.has_valid_to()) {
    mutable_valid_to()->::google::protobuf::Timestamp::MergeFrom(from.valid_to());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
  if (from.has_texture()) {
    mutable_texture()->::google::protobuf::StringValue::MergeFrom(from.texture());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
  if (from.fill() != 0) {
    set_fill(from.fill());
  }
  if (from.stroke() != 0) {
    set_stroke(from.stroke());
  }
  if (from.stroke_width() != 0) {
    set_stroke_width(from.stroke_width());
  }
  if (from.stroke_style() != 0) {
    set_stroke_style(from.stroke_style());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.visible() != 0) {
    set_visible(from.visible());
  }
  if (from.show_text() != 0) {
    set_show_text(from.show_text());
  }
  if (from.has_text()) {
    mutable_text()->::google::protobuf::StringValue::MergeFrom(from.text());
  }
}

void Visual::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.Visual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visual::CopyFrom(const Visual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.Visual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visual::IsInitialized() const {

  return true;
}

void Visual::Swap(Visual* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Visual::InternalSwap(Visual* other) {
  std::swap(primary_key_, other->primary_key_);
  std::swap(id_, other->id_);
  std::swap(owner_, other->owner_);
  std::swap(valid_from_, other->valid_from_);
  std::swap(valid_to_, other->valid_to_);
  std::swap(is_valid_, other->is_valid_);
  std::swap(texture_, other->texture_);
  std::swap(scale_, other->scale_);
  std::swap(fill_, other->fill_);
  std::swap(stroke_, other->stroke_);
  std::swap(stroke_width_, other->stroke_width_);
  std::swap(stroke_style_, other->stroke_style_);
  std::swap(priority_, other->priority_);
  std::swap(visible_, other->visible_);
  std::swap(show_text_, other->show_text_);
  std::swap(text_, other->text_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Visual::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Visual_descriptor_;
  metadata.reflection = Visual_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Visual

// optional int32 primary_key = 1;
void Visual::clear_primary_key() {
  primary_key_ = 0;
}
 ::google::protobuf::int32 Visual::primary_key() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.primary_key)
  return primary_key_;
}
 void Visual::set_primary_key(::google::protobuf::int32 value) {
  
  primary_key_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.primary_key)
}

// optional .mtm.Uuid id = 2;
bool Visual::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
void Visual::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::mtm::Uuid& Visual::id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::mtm::Uuid* Visual::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.id)
  return id_;
}
::mtm::Uuid* Visual::release_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.id)
  
  ::mtm::Uuid* temp = id_;
  id_ = NULL;
  return temp;
}
void Visual::set_allocated_id(::mtm::Uuid* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.id)
}

// optional uint32 owner = 3;
void Visual::clear_owner() {
  owner_ = 0u;
}
 ::google::protobuf::uint32 Visual::owner() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.owner)
  return owner_;
}
 void Visual::set_owner(::google::protobuf::uint32 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.owner)
}

// optional .google.protobuf.Timestamp valid_from = 4;
bool Visual::has_valid_from() const {
  return !_is_default_instance_ && valid_from_ != NULL;
}
void Visual::clear_valid_from() {
  if (GetArenaNoVirtual() == NULL && valid_from_ != NULL) delete valid_from_;
  valid_from_ = NULL;
}
const ::google::protobuf::Timestamp& Visual::valid_from() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.valid_from)
  return valid_from_ != NULL ? *valid_from_ : *default_instance_->valid_from_;
}
::google::protobuf::Timestamp* Visual::mutable_valid_from() {
  
  if (valid_from_ == NULL) {
    valid_from_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.valid_from)
  return valid_from_;
}
::google::protobuf::Timestamp* Visual::release_valid_from() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.valid_from)
  
  ::google::protobuf::Timestamp* temp = valid_from_;
  valid_from_ = NULL;
  return temp;
}
void Visual::set_allocated_valid_from(::google::protobuf::Timestamp* valid_from) {
  delete valid_from_;
  if (valid_from != NULL && valid_from->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_valid_from = new ::google::protobuf::Timestamp;
    new_valid_from->CopyFrom(*valid_from);
    valid_from = new_valid_from;
  }
  valid_from_ = valid_from;
  if (valid_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.valid_from)
}

// optional .google.protobuf.Timestamp valid_to = 5;
bool Visual::has_valid_to() const {
  return !_is_default_instance_ && valid_to_ != NULL;
}
void Visual::clear_valid_to() {
  if (GetArenaNoVirtual() == NULL && valid_to_ != NULL) delete valid_to_;
  valid_to_ = NULL;
}
const ::google::protobuf::Timestamp& Visual::valid_to() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.valid_to)
  return valid_to_ != NULL ? *valid_to_ : *default_instance_->valid_to_;
}
::google::protobuf::Timestamp* Visual::mutable_valid_to() {
  
  if (valid_to_ == NULL) {
    valid_to_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.valid_to)
  return valid_to_;
}
::google::protobuf::Timestamp* Visual::release_valid_to() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.valid_to)
  
  ::google::protobuf::Timestamp* temp = valid_to_;
  valid_to_ = NULL;
  return temp;
}
void Visual::set_allocated_valid_to(::google::protobuf::Timestamp* valid_to) {
  delete valid_to_;
  if (valid_to != NULL && valid_to->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_valid_to = new ::google::protobuf::Timestamp;
    new_valid_to->CopyFrom(*valid_to);
    valid_to = new_valid_to;
  }
  valid_to_ = valid_to;
  if (valid_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.valid_to)
}

// optional bool is_valid = 6;
void Visual::clear_is_valid() {
  is_valid_ = false;
}
 bool Visual::is_valid() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.is_valid)
  return is_valid_;
}
 void Visual::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.is_valid)
}

// optional .google.protobuf.StringValue texture = 7;
bool Visual::has_texture() const {
  return !_is_default_instance_ && texture_ != NULL;
}
void Visual::clear_texture() {
  if (GetArenaNoVirtual() == NULL && texture_ != NULL) delete texture_;
  texture_ = NULL;
}
const ::google::protobuf::StringValue& Visual::texture() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.texture)
  return texture_ != NULL ? *texture_ : *default_instance_->texture_;
}
::google::protobuf::StringValue* Visual::mutable_texture() {
  
  if (texture_ == NULL) {
    texture_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.texture)
  return texture_;
}
::google::protobuf::StringValue* Visual::release_texture() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.texture)
  
  ::google::protobuf::StringValue* temp = texture_;
  texture_ = NULL;
  return temp;
}
void Visual::set_allocated_texture(::google::protobuf::StringValue* texture) {
  delete texture_;
  if (texture != NULL && texture->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_texture = new ::google::protobuf::StringValue;
    new_texture->CopyFrom(*texture);
    texture = new_texture;
  }
  texture_ = texture;
  if (texture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.texture)
}

// optional int32 scale = 8;
void Visual::clear_scale() {
  scale_ = 0;
}
 ::google::protobuf::int32 Visual::scale() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.scale)
  return scale_;
}
 void Visual::set_scale(::google::protobuf::int32 value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.scale)
}

// optional int32 fill = 9;
void Visual::clear_fill() {
  fill_ = 0;
}
 ::google::protobuf::int32 Visual::fill() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.fill)
  return fill_;
}
 void Visual::set_fill(::google::protobuf::int32 value) {
  
  fill_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.fill)
}

// optional int32 stroke = 10;
void Visual::clear_stroke() {
  stroke_ = 0;
}
 ::google::protobuf::int32 Visual::stroke() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.stroke)
  return stroke_;
}
 void Visual::set_stroke(::google::protobuf::int32 value) {
  
  stroke_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.stroke)
}

// optional float stroke_width = 11;
void Visual::clear_stroke_width() {
  stroke_width_ = 0;
}
 float Visual::stroke_width() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.stroke_width)
  return stroke_width_;
}
 void Visual::set_stroke_width(float value) {
  
  stroke_width_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.stroke_width)
}

// optional .mtm.geo.model.GeographyDashStyle stroke_style = 12;
void Visual::clear_stroke_style() {
  stroke_style_ = 0;
}
 ::mtm::geo::model::GeographyDashStyle Visual::stroke_style() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.stroke_style)
  return static_cast< ::mtm::geo::model::GeographyDashStyle >(stroke_style_);
}
 void Visual::set_stroke_style(::mtm::geo::model::GeographyDashStyle value) {
  
  stroke_style_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.stroke_style)
}

// optional int32 priority = 13;
void Visual::clear_priority() {
  priority_ = 0;
}
 ::google::protobuf::int32 Visual::priority() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.priority)
  return priority_;
}
 void Visual::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.priority)
}

// optional bool visible = 14;
void Visual::clear_visible() {
  visible_ = false;
}
 bool Visual::visible() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.visible)
  return visible_;
}
 void Visual::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.visible)
}

// optional bool show_text = 15;
void Visual::clear_show_text() {
  show_text_ = false;
}
 bool Visual::show_text() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.show_text)
  return show_text_;
}
 void Visual::set_show_text(bool value) {
  
  show_text_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.model.Visual.show_text)
}

// optional .google.protobuf.StringValue text = 16;
bool Visual::has_text() const {
  return !_is_default_instance_ && text_ != NULL;
}
void Visual::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
const ::google::protobuf::StringValue& Visual::text() const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.Visual.text)
  return text_ != NULL ? *text_ : *default_instance_->text_;
}
::google::protobuf::StringValue* Visual::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.Visual.text)
  return text_;
}
::google::protobuf::StringValue* Visual::release_text() {
  // @@protoc_insertion_point(field_release:mtm.geo.model.Visual.text)
  
  ::google::protobuf::StringValue* temp = text_;
  text_ = NULL;
  return temp;
}
void Visual::set_allocated_text(::google::protobuf::StringValue* text) {
  delete text_;
  if (text != NULL && text->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_text = new ::google::protobuf::StringValue;
    new_text->CopyFrom(*text);
    text = new_text;
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.model.Visual.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisualList::kVisualsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisualList::VisualList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.geo.model.VisualList)
}

void VisualList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VisualList::VisualList(const VisualList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.geo.model.VisualList)
}

void VisualList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

VisualList::~VisualList() {
  // @@protoc_insertion_point(destructor:mtm.geo.model.VisualList)
  SharedDtor();
}

void VisualList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VisualList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisualList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisualList_descriptor_;
}

const VisualList& VisualList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fgeo_2fmodel_2fvisual_2eproto();
  return *default_instance_;
}

VisualList* VisualList::default_instance_ = NULL;

VisualList* VisualList::New(::google::protobuf::Arena* arena) const {
  VisualList* n = new VisualList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VisualList::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.geo.model.VisualList)
  visuals_.Clear();
}

bool VisualList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.geo.model.VisualList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mtm.geo.model.Visual visuals = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_visuals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_visuals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_visuals;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.geo.model.VisualList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.geo.model.VisualList)
  return false;
#undef DO_
}

void VisualList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.geo.model.VisualList)
  // repeated .mtm.geo.model.Visual visuals = 1;
  for (unsigned int i = 0, n = this->visuals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->visuals(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.geo.model.VisualList)
}

::google::protobuf::uint8* VisualList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.geo.model.VisualList)
  // repeated .mtm.geo.model.Visual visuals = 1;
  for (unsigned int i = 0, n = this->visuals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->visuals(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.geo.model.VisualList)
  return target;
}

int VisualList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.geo.model.VisualList)
  int total_size = 0;

  // repeated .mtm.geo.model.Visual visuals = 1;
  total_size += 1 * this->visuals_size();
  for (int i = 0; i < this->visuals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->visuals(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisualList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.geo.model.VisualList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VisualList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VisualList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.geo.model.VisualList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.geo.model.VisualList)
    MergeFrom(*source);
  }
}

void VisualList::MergeFrom(const VisualList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.geo.model.VisualList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  visuals_.MergeFrom(from.visuals_);
}

void VisualList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.geo.model.VisualList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualList::CopyFrom(const VisualList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.geo.model.VisualList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualList::IsInitialized() const {

  return true;
}

void VisualList::Swap(VisualList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisualList::InternalSwap(VisualList* other) {
  visuals_.UnsafeArenaSwap(&other->visuals_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VisualList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisualList_descriptor_;
  metadata.reflection = VisualList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VisualList

// repeated .mtm.geo.model.Visual visuals = 1;
int VisualList::visuals_size() const {
  return visuals_.size();
}
void VisualList::clear_visuals() {
  visuals_.Clear();
}
const ::mtm::geo::model::Visual& VisualList::visuals(int index) const {
  // @@protoc_insertion_point(field_get:mtm.geo.model.VisualList.visuals)
  return visuals_.Get(index);
}
::mtm::geo::model::Visual* VisualList::mutable_visuals(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.geo.model.VisualList.visuals)
  return visuals_.Mutable(index);
}
::mtm::geo::model::Visual* VisualList::add_visuals() {
  // @@protoc_insertion_point(field_add:mtm.geo.model.VisualList.visuals)
  return visuals_.Add();
}
::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Visual >*
VisualList::mutable_visuals() {
  // @@protoc_insertion_point(field_mutable_list:mtm.geo.model.VisualList.visuals)
  return &visuals_;
}
const ::google::protobuf::RepeatedPtrField< ::mtm::geo::model::Visual >&
VisualList::visuals() const {
  // @@protoc_insertion_point(field_list:mtm.geo.model.VisualList.visuals)
  return visuals_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace geo
}  // namespace mtm

// @@protoc_insertion_point(global_scope)
