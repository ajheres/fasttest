// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/geo/service/geo_service.proto

#ifndef PROTOBUF_INCLUDED_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto
#define PROTOBUF_INCLUDED_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "mtm/common_types.pb.h"
#include "mtm/geo/messages/geo_message.pb.h"
#include "mtm/geo/model/geography.pb.h"
#include "mtm/geo/model/visual.pb.h"
#include "mtm/geo/model/geography_resource.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto 

namespace protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[21];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto
namespace mtm {
namespace geo {
namespace service {
class AddBitmapParameters;
class AddBitmapParametersDefaultTypeInternal;
extern AddBitmapParametersDefaultTypeInternal _AddBitmapParameters_default_instance_;
class AddGeographyParameters;
class AddGeographyParametersDefaultTypeInternal;
extern AddGeographyParametersDefaultTypeInternal _AddGeographyParameters_default_instance_;
class AddUserVisual2Parameters;
class AddUserVisual2ParametersDefaultTypeInternal;
extern AddUserVisual2ParametersDefaultTypeInternal _AddUserVisual2Parameters_default_instance_;
class AddUserVisualParameters;
class AddUserVisualParametersDefaultTypeInternal;
extern AddUserVisualParametersDefaultTypeInternal _AddUserVisualParameters_default_instance_;
class BoolResponse;
class BoolResponseDefaultTypeInternal;
extern BoolResponseDefaultTypeInternal _BoolResponse_default_instance_;
class CommitParameters;
class CommitParametersDefaultTypeInternal;
extern CommitParametersDefaultTypeInternal _CommitParameters_default_instance_;
class EditParameters;
class EditParametersDefaultTypeInternal;
extern EditParametersDefaultTypeInternal _EditParameters_default_instance_;
class EditResponse;
class EditResponseDefaultTypeInternal;
extern EditResponseDefaultTypeInternal _EditResponse_default_instance_;
class GeographyResponse;
class GeographyResponseDefaultTypeInternal;
extern GeographyResponseDefaultTypeInternal _GeographyResponse_default_instance_;
class GetBitmapParameters;
class GetBitmapParametersDefaultTypeInternal;
extern GetBitmapParametersDefaultTypeInternal _GetBitmapParameters_default_instance_;
class GetBitmapResponse;
class GetBitmapResponseDefaultTypeInternal;
extern GetBitmapResponseDefaultTypeInternal _GetBitmapResponse_default_instance_;
class GetVisualParameters;
class GetVisualParametersDefaultTypeInternal;
extern GetVisualParametersDefaultTypeInternal _GetVisualParameters_default_instance_;
class GetVisualsForUserParameters;
class GetVisualsForUserParametersDefaultTypeInternal;
extern GetVisualsForUserParametersDefaultTypeInternal _GetVisualsForUserParameters_default_instance_;
class RemoveGeographiesParameters;
class RemoveGeographiesParametersDefaultTypeInternal;
extern RemoveGeographiesParametersDefaultTypeInternal _RemoveGeographiesParameters_default_instance_;
class RemoveGeographyParameters;
class RemoveGeographyParametersDefaultTypeInternal;
extern RemoveGeographyParametersDefaultTypeInternal _RemoveGeographyParameters_default_instance_;
class RemoveGeographyResourceParameters;
class RemoveGeographyResourceParametersDefaultTypeInternal;
extern RemoveGeographyResourceParametersDefaultTypeInternal _RemoveGeographyResourceParameters_default_instance_;
class RemoveUserVisualParameters;
class RemoveUserVisualParametersDefaultTypeInternal;
extern RemoveUserVisualParametersDefaultTypeInternal _RemoveUserVisualParameters_default_instance_;
class Rollback2Parameters;
class Rollback2ParametersDefaultTypeInternal;
extern Rollback2ParametersDefaultTypeInternal _Rollback2Parameters_default_instance_;
class Rollback3Parameters;
class Rollback3ParametersDefaultTypeInternal;
extern Rollback3ParametersDefaultTypeInternal _Rollback3Parameters_default_instance_;
class RollbackParameters;
class RollbackParametersDefaultTypeInternal;
extern RollbackParametersDefaultTypeInternal _RollbackParameters_default_instance_;
class VisualResponse;
class VisualResponseDefaultTypeInternal;
extern VisualResponseDefaultTypeInternal _VisualResponse_default_instance_;
}  // namespace service
}  // namespace geo
}  // namespace mtm
namespace google {
namespace protobuf {
template<> ::mtm::geo::service::AddBitmapParameters* Arena::CreateMaybeMessage<::mtm::geo::service::AddBitmapParameters>(Arena*);
template<> ::mtm::geo::service::AddGeographyParameters* Arena::CreateMaybeMessage<::mtm::geo::service::AddGeographyParameters>(Arena*);
template<> ::mtm::geo::service::AddUserVisual2Parameters* Arena::CreateMaybeMessage<::mtm::geo::service::AddUserVisual2Parameters>(Arena*);
template<> ::mtm::geo::service::AddUserVisualParameters* Arena::CreateMaybeMessage<::mtm::geo::service::AddUserVisualParameters>(Arena*);
template<> ::mtm::geo::service::BoolResponse* Arena::CreateMaybeMessage<::mtm::geo::service::BoolResponse>(Arena*);
template<> ::mtm::geo::service::CommitParameters* Arena::CreateMaybeMessage<::mtm::geo::service::CommitParameters>(Arena*);
template<> ::mtm::geo::service::EditParameters* Arena::CreateMaybeMessage<::mtm::geo::service::EditParameters>(Arena*);
template<> ::mtm::geo::service::EditResponse* Arena::CreateMaybeMessage<::mtm::geo::service::EditResponse>(Arena*);
template<> ::mtm::geo::service::GeographyResponse* Arena::CreateMaybeMessage<::mtm::geo::service::GeographyResponse>(Arena*);
template<> ::mtm::geo::service::GetBitmapParameters* Arena::CreateMaybeMessage<::mtm::geo::service::GetBitmapParameters>(Arena*);
template<> ::mtm::geo::service::GetBitmapResponse* Arena::CreateMaybeMessage<::mtm::geo::service::GetBitmapResponse>(Arena*);
template<> ::mtm::geo::service::GetVisualParameters* Arena::CreateMaybeMessage<::mtm::geo::service::GetVisualParameters>(Arena*);
template<> ::mtm::geo::service::GetVisualsForUserParameters* Arena::CreateMaybeMessage<::mtm::geo::service::GetVisualsForUserParameters>(Arena*);
template<> ::mtm::geo::service::RemoveGeographiesParameters* Arena::CreateMaybeMessage<::mtm::geo::service::RemoveGeographiesParameters>(Arena*);
template<> ::mtm::geo::service::RemoveGeographyParameters* Arena::CreateMaybeMessage<::mtm::geo::service::RemoveGeographyParameters>(Arena*);
template<> ::mtm::geo::service::RemoveGeographyResourceParameters* Arena::CreateMaybeMessage<::mtm::geo::service::RemoveGeographyResourceParameters>(Arena*);
template<> ::mtm::geo::service::RemoveUserVisualParameters* Arena::CreateMaybeMessage<::mtm::geo::service::RemoveUserVisualParameters>(Arena*);
template<> ::mtm::geo::service::Rollback2Parameters* Arena::CreateMaybeMessage<::mtm::geo::service::Rollback2Parameters>(Arena*);
template<> ::mtm::geo::service::Rollback3Parameters* Arena::CreateMaybeMessage<::mtm::geo::service::Rollback3Parameters>(Arena*);
template<> ::mtm::geo::service::RollbackParameters* Arena::CreateMaybeMessage<::mtm::geo::service::RollbackParameters>(Arena*);
template<> ::mtm::geo::service::VisualResponse* Arena::CreateMaybeMessage<::mtm::geo::service::VisualResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mtm {
namespace geo {
namespace service {

// ===================================================================

class GeographyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.GeographyResponse) */ {
 public:
  GeographyResponse();
  virtual ~GeographyResponse();

  GeographyResponse(const GeographyResponse& from);

  inline GeographyResponse& operator=(const GeographyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeographyResponse(GeographyResponse&& from) noexcept
    : GeographyResponse() {
    *this = ::std::move(from);
  }

  inline GeographyResponse& operator=(GeographyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeographyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeographyResponse* internal_default_instance() {
    return reinterpret_cast<const GeographyResponse*>(
               &_GeographyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GeographyResponse* other);
  friend void swap(GeographyResponse& a, GeographyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeographyResponse* New() const final {
    return CreateMaybeMessage<GeographyResponse>(NULL);
  }

  GeographyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeographyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeographyResponse& from);
  void MergeFrom(const GeographyResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeographyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.geo.model.Geography geography = 1;
  bool has_geography() const;
  void clear_geography();
  static const int kGeographyFieldNumber = 1;
  private:
  const ::mtm::geo::model::Geography& _internal_geography() const;
  public:
  const ::mtm::geo::model::Geography& geography() const;
  ::mtm::geo::model::Geography* release_geography();
  ::mtm::geo::model::Geography* mutable_geography();
  void set_allocated_geography(::mtm::geo::model::Geography* geography);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.GeographyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::geo::model::Geography* geography_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VisualResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.VisualResponse) */ {
 public:
  VisualResponse();
  virtual ~VisualResponse();

  VisualResponse(const VisualResponse& from);

  inline VisualResponse& operator=(const VisualResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VisualResponse(VisualResponse&& from) noexcept
    : VisualResponse() {
    *this = ::std::move(from);
  }

  inline VisualResponse& operator=(VisualResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VisualResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisualResponse* internal_default_instance() {
    return reinterpret_cast<const VisualResponse*>(
               &_VisualResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VisualResponse* other);
  friend void swap(VisualResponse& a, VisualResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VisualResponse* New() const final {
    return CreateMaybeMessage<VisualResponse>(NULL);
  }

  VisualResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VisualResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VisualResponse& from);
  void MergeFrom(const VisualResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisualResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.geo.model.Visual visual = 1;
  bool has_visual() const;
  void clear_visual();
  static const int kVisualFieldNumber = 1;
  private:
  const ::mtm::geo::model::Visual& _internal_visual() const;
  public:
  const ::mtm::geo::model::Visual& visual() const;
  ::mtm::geo::model::Visual* release_visual();
  ::mtm::geo::model::Visual* mutable_visual();
  void set_allocated_visual(::mtm::geo::model::Visual* visual);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.VisualResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::geo::model::Visual* visual_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BoolResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.BoolResponse) */ {
 public:
  BoolResponse();
  virtual ~BoolResponse();

  BoolResponse(const BoolResponse& from);

  inline BoolResponse& operator=(const BoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BoolResponse(BoolResponse&& from) noexcept
    : BoolResponse() {
    *this = ::std::move(from);
  }

  inline BoolResponse& operator=(BoolResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BoolResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoolResponse* internal_default_instance() {
    return reinterpret_cast<const BoolResponse*>(
               &_BoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BoolResponse* other);
  friend void swap(BoolResponse& a, BoolResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoolResponse* New() const final {
    return CreateMaybeMessage<BoolResponse>(NULL);
  }

  BoolResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BoolResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BoolResponse& from);
  void MergeFrom(const BoolResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.BoolResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddGeographyParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.AddGeographyParameters) */ {
 public:
  AddGeographyParameters();
  virtual ~AddGeographyParameters();

  AddGeographyParameters(const AddGeographyParameters& from);

  inline AddGeographyParameters& operator=(const AddGeographyParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddGeographyParameters(AddGeographyParameters&& from) noexcept
    : AddGeographyParameters() {
    *this = ::std::move(from);
  }

  inline AddGeographyParameters& operator=(AddGeographyParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddGeographyParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGeographyParameters* internal_default_instance() {
    return reinterpret_cast<const AddGeographyParameters*>(
               &_AddGeographyParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AddGeographyParameters* other);
  friend void swap(AddGeographyParameters& a, AddGeographyParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddGeographyParameters* New() const final {
    return CreateMaybeMessage<AddGeographyParameters>(NULL);
  }

  AddGeographyParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddGeographyParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddGeographyParameters& from);
  void MergeFrom(const AddGeographyParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGeographyParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.geo.model.Geography geography = 2;
  bool has_geography() const;
  void clear_geography();
  static const int kGeographyFieldNumber = 2;
  private:
  const ::mtm::geo::model::Geography& _internal_geography() const;
  public:
  const ::mtm::geo::model::Geography& geography() const;
  ::mtm::geo::model::Geography* release_geography();
  ::mtm::geo::model::Geography* mutable_geography();
  void set_allocated_geography(::mtm::geo::model::Geography* geography);

  // .mtm.geo.model.Visual visual = 3;
  bool has_visual() const;
  void clear_visual();
  static const int kVisualFieldNumber = 3;
  private:
  const ::mtm::geo::model::Visual& _internal_visual() const;
  public:
  const ::mtm::geo::model::Visual& visual() const;
  ::mtm::geo::model::Visual* release_visual();
  ::mtm::geo::model::Visual* mutable_visual();
  void set_allocated_visual(::mtm::geo::model::Visual* visual);

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.AddGeographyParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::geo::model::Geography* geography_;
  ::mtm::geo::model::Visual* visual_;
  ::google::protobuf::uint32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveGeographyParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.RemoveGeographyParameters) */ {
 public:
  RemoveGeographyParameters();
  virtual ~RemoveGeographyParameters();

  RemoveGeographyParameters(const RemoveGeographyParameters& from);

  inline RemoveGeographyParameters& operator=(const RemoveGeographyParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveGeographyParameters(RemoveGeographyParameters&& from) noexcept
    : RemoveGeographyParameters() {
    *this = ::std::move(from);
  }

  inline RemoveGeographyParameters& operator=(RemoveGeographyParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveGeographyParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveGeographyParameters* internal_default_instance() {
    return reinterpret_cast<const RemoveGeographyParameters*>(
               &_RemoveGeographyParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RemoveGeographyParameters* other);
  friend void swap(RemoveGeographyParameters& a, RemoveGeographyParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveGeographyParameters* New() const final {
    return CreateMaybeMessage<RemoveGeographyParameters>(NULL);
  }

  RemoveGeographyParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveGeographyParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveGeographyParameters& from);
  void MergeFrom(const RemoveGeographyParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveGeographyParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.Uuid geography_id = 2;
  bool has_geography_id() const;
  void clear_geography_id();
  static const int kGeographyIdFieldNumber = 2;
  private:
  const ::mtm::Uuid& _internal_geography_id() const;
  public:
  const ::mtm::Uuid& geography_id() const;
  ::mtm::Uuid* release_geography_id();
  ::mtm::Uuid* mutable_geography_id();
  void set_allocated_geography_id(::mtm::Uuid* geography_id);

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.RemoveGeographyParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::Uuid* geography_id_;
  ::google::protobuf::uint32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveGeographiesParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.RemoveGeographiesParameters) */ {
 public:
  RemoveGeographiesParameters();
  virtual ~RemoveGeographiesParameters();

  RemoveGeographiesParameters(const RemoveGeographiesParameters& from);

  inline RemoveGeographiesParameters& operator=(const RemoveGeographiesParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveGeographiesParameters(RemoveGeographiesParameters&& from) noexcept
    : RemoveGeographiesParameters() {
    *this = ::std::move(from);
  }

  inline RemoveGeographiesParameters& operator=(RemoveGeographiesParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveGeographiesParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveGeographiesParameters* internal_default_instance() {
    return reinterpret_cast<const RemoveGeographiesParameters*>(
               &_RemoveGeographiesParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RemoveGeographiesParameters* other);
  friend void swap(RemoveGeographiesParameters& a, RemoveGeographiesParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveGeographiesParameters* New() const final {
    return CreateMaybeMessage<RemoveGeographiesParameters>(NULL);
  }

  RemoveGeographiesParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveGeographiesParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveGeographiesParameters& from);
  void MergeFrom(const RemoveGeographiesParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveGeographiesParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtm.Uuid geography_ids = 2;
  int geography_ids_size() const;
  void clear_geography_ids();
  static const int kGeographyIdsFieldNumber = 2;
  ::mtm::Uuid* mutable_geography_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::mtm::Uuid >*
      mutable_geography_ids();
  const ::mtm::Uuid& geography_ids(int index) const;
  ::mtm::Uuid* add_geography_ids();
  const ::google::protobuf::RepeatedPtrField< ::mtm::Uuid >&
      geography_ids() const;

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.RemoveGeographiesParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mtm::Uuid > geography_ids_;
  ::google::protobuf::uint32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EditParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.EditParameters) */ {
 public:
  EditParameters();
  virtual ~EditParameters();

  EditParameters(const EditParameters& from);

  inline EditParameters& operator=(const EditParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EditParameters(EditParameters&& from) noexcept
    : EditParameters() {
    *this = ::std::move(from);
  }

  inline EditParameters& operator=(EditParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EditParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EditParameters* internal_default_instance() {
    return reinterpret_cast<const EditParameters*>(
               &_EditParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(EditParameters* other);
  friend void swap(EditParameters& a, EditParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EditParameters* New() const final {
    return CreateMaybeMessage<EditParameters>(NULL);
  }

  EditParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EditParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EditParameters& from);
  void MergeFrom(const EditParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.Uuid geography_id = 2;
  bool has_geography_id() const;
  void clear_geography_id();
  static const int kGeographyIdFieldNumber = 2;
  private:
  const ::mtm::Uuid& _internal_geography_id() const;
  public:
  const ::mtm::Uuid& geography_id() const;
  ::mtm::Uuid* release_geography_id();
  ::mtm::Uuid* mutable_geography_id();
  void set_allocated_geography_id(::mtm::Uuid* geography_id);

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.EditParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::Uuid* geography_id_;
  ::google::protobuf::uint32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommitParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.CommitParameters) */ {
 public:
  CommitParameters();
  virtual ~CommitParameters();

  CommitParameters(const CommitParameters& from);

  inline CommitParameters& operator=(const CommitParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommitParameters(CommitParameters&& from) noexcept
    : CommitParameters() {
    *this = ::std::move(from);
  }

  inline CommitParameters& operator=(CommitParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitParameters* internal_default_instance() {
    return reinterpret_cast<const CommitParameters*>(
               &_CommitParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CommitParameters* other);
  friend void swap(CommitParameters& a, CommitParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommitParameters* New() const final {
    return CreateMaybeMessage<CommitParameters>(NULL);
  }

  CommitParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommitParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommitParameters& from);
  void MergeFrom(const CommitParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.geo.model.Geography geography = 2;
  bool has_geography() const;
  void clear_geography();
  static const int kGeographyFieldNumber = 2;
  private:
  const ::mtm::geo::model::Geography& _internal_geography() const;
  public:
  const ::mtm::geo::model::Geography& geography() const;
  ::mtm::geo::model::Geography* release_geography();
  ::mtm::geo::model::Geography* mutable_geography();
  void set_allocated_geography(::mtm::geo::model::Geography* geography);

  // .mtm.geo.model.Visual visual = 3;
  bool has_visual() const;
  void clear_visual();
  static const int kVisualFieldNumber = 3;
  private:
  const ::mtm::geo::model::Visual& _internal_visual() const;
  public:
  const ::mtm::geo::model::Visual& visual() const;
  ::mtm::geo::model::Visual* release_visual();
  ::mtm::geo::model::Visual* mutable_visual();
  void set_allocated_visual(::mtm::geo::model::Visual* visual);

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.CommitParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::geo::model::Geography* geography_;
  ::mtm::geo::model::Visual* visual_;
  ::google::protobuf::uint32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EditResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.EditResponse) */ {
 public:
  EditResponse();
  virtual ~EditResponse();

  EditResponse(const EditResponse& from);

  inline EditResponse& operator=(const EditResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EditResponse(EditResponse&& from) noexcept
    : EditResponse() {
    *this = ::std::move(from);
  }

  inline EditResponse& operator=(EditResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EditResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EditResponse* internal_default_instance() {
    return reinterpret_cast<const EditResponse*>(
               &_EditResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(EditResponse* other);
  friend void swap(EditResponse& a, EditResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EditResponse* New() const final {
    return CreateMaybeMessage<EditResponse>(NULL);
  }

  EditResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EditResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EditResponse& from);
  void MergeFrom(const EditResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.geo.model.Geography geography = 2;
  bool has_geography() const;
  void clear_geography();
  static const int kGeographyFieldNumber = 2;
  private:
  const ::mtm::geo::model::Geography& _internal_geography() const;
  public:
  const ::mtm::geo::model::Geography& geography() const;
  ::mtm::geo::model::Geography* release_geography();
  ::mtm::geo::model::Geography* mutable_geography();
  void set_allocated_geography(::mtm::geo::model::Geography* geography);

  // .mtm.geo.model.Visual visual = 3;
  bool has_visual() const;
  void clear_visual();
  static const int kVisualFieldNumber = 3;
  private:
  const ::mtm::geo::model::Visual& _internal_visual() const;
  public:
  const ::mtm::geo::model::Visual& visual() const;
  ::mtm::geo::model::Visual* release_visual();
  ::mtm::geo::model::Visual* mutable_visual();
  void set_allocated_visual(::mtm::geo::model::Visual* visual);

  // bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.EditResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::geo::model::Geography* geography_;
  ::mtm::geo::model::Visual* visual_;
  bool result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVisualsForUserParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.GetVisualsForUserParameters) */ {
 public:
  GetVisualsForUserParameters();
  virtual ~GetVisualsForUserParameters();

  GetVisualsForUserParameters(const GetVisualsForUserParameters& from);

  inline GetVisualsForUserParameters& operator=(const GetVisualsForUserParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVisualsForUserParameters(GetVisualsForUserParameters&& from) noexcept
    : GetVisualsForUserParameters() {
    *this = ::std::move(from);
  }

  inline GetVisualsForUserParameters& operator=(GetVisualsForUserParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVisualsForUserParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVisualsForUserParameters* internal_default_instance() {
    return reinterpret_cast<const GetVisualsForUserParameters*>(
               &_GetVisualsForUserParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetVisualsForUserParameters* other);
  friend void swap(GetVisualsForUserParameters& a, GetVisualsForUserParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVisualsForUserParameters* New() const final {
    return CreateMaybeMessage<GetVisualsForUserParameters>(NULL);
  }

  GetVisualsForUserParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVisualsForUserParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVisualsForUserParameters& from);
  void MergeFrom(const GetVisualsForUserParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVisualsForUserParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.GetVisualsForUserParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddUserVisualParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.AddUserVisualParameters) */ {
 public:
  AddUserVisualParameters();
  virtual ~AddUserVisualParameters();

  AddUserVisualParameters(const AddUserVisualParameters& from);

  inline AddUserVisualParameters& operator=(const AddUserVisualParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddUserVisualParameters(AddUserVisualParameters&& from) noexcept
    : AddUserVisualParameters() {
    *this = ::std::move(from);
  }

  inline AddUserVisualParameters& operator=(AddUserVisualParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddUserVisualParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddUserVisualParameters* internal_default_instance() {
    return reinterpret_cast<const AddUserVisualParameters*>(
               &_AddUserVisualParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(AddUserVisualParameters* other);
  friend void swap(AddUserVisualParameters& a, AddUserVisualParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddUserVisualParameters* New() const final {
    return CreateMaybeMessage<AddUserVisualParameters>(NULL);
  }

  AddUserVisualParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddUserVisualParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddUserVisualParameters& from);
  void MergeFrom(const AddUserVisualParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUserVisualParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.geo.model.Visual visual = 2;
  bool has_visual() const;
  void clear_visual();
  static const int kVisualFieldNumber = 2;
  private:
  const ::mtm::geo::model::Visual& _internal_visual() const;
  public:
  const ::mtm::geo::model::Visual& visual() const;
  ::mtm::geo::model::Visual* release_visual();
  ::mtm::geo::model::Visual* mutable_visual();
  void set_allocated_visual(::mtm::geo::model::Visual* visual);

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.AddUserVisualParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::geo::model::Visual* visual_;
  ::google::protobuf::uint32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddUserVisual2Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.AddUserVisual2Parameters) */ {
 public:
  AddUserVisual2Parameters();
  virtual ~AddUserVisual2Parameters();

  AddUserVisual2Parameters(const AddUserVisual2Parameters& from);

  inline AddUserVisual2Parameters& operator=(const AddUserVisual2Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddUserVisual2Parameters(AddUserVisual2Parameters&& from) noexcept
    : AddUserVisual2Parameters() {
    *this = ::std::move(from);
  }

  inline AddUserVisual2Parameters& operator=(AddUserVisual2Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddUserVisual2Parameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddUserVisual2Parameters* internal_default_instance() {
    return reinterpret_cast<const AddUserVisual2Parameters*>(
               &_AddUserVisual2Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(AddUserVisual2Parameters* other);
  friend void swap(AddUserVisual2Parameters& a, AddUserVisual2Parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddUserVisual2Parameters* New() const final {
    return CreateMaybeMessage<AddUserVisual2Parameters>(NULL);
  }

  AddUserVisual2Parameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddUserVisual2Parameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddUserVisual2Parameters& from);
  void MergeFrom(const AddUserVisual2Parameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUserVisual2Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtm.Uuid geography_ids = 3;
  int geography_ids_size() const;
  void clear_geography_ids();
  static const int kGeographyIdsFieldNumber = 3;
  ::mtm::Uuid* mutable_geography_ids(int index);
  ::google::protobuf::RepeatedPtrField< ::mtm::Uuid >*
      mutable_geography_ids();
  const ::mtm::Uuid& geography_ids(int index) const;
  ::mtm::Uuid* add_geography_ids();
  const ::google::protobuf::RepeatedPtrField< ::mtm::Uuid >&
      geography_ids() const;

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // bool visible = 2;
  void clear_visible();
  static const int kVisibleFieldNumber = 2;
  bool visible() const;
  void set_visible(bool value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.AddUserVisual2Parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mtm::Uuid > geography_ids_;
  ::google::protobuf::uint32 user_id_;
  bool visible_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveUserVisualParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.RemoveUserVisualParameters) */ {
 public:
  RemoveUserVisualParameters();
  virtual ~RemoveUserVisualParameters();

  RemoveUserVisualParameters(const RemoveUserVisualParameters& from);

  inline RemoveUserVisualParameters& operator=(const RemoveUserVisualParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveUserVisualParameters(RemoveUserVisualParameters&& from) noexcept
    : RemoveUserVisualParameters() {
    *this = ::std::move(from);
  }

  inline RemoveUserVisualParameters& operator=(RemoveUserVisualParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveUserVisualParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveUserVisualParameters* internal_default_instance() {
    return reinterpret_cast<const RemoveUserVisualParameters*>(
               &_RemoveUserVisualParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RemoveUserVisualParameters* other);
  friend void swap(RemoveUserVisualParameters& a, RemoveUserVisualParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveUserVisualParameters* New() const final {
    return CreateMaybeMessage<RemoveUserVisualParameters>(NULL);
  }

  RemoveUserVisualParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveUserVisualParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveUserVisualParameters& from);
  void MergeFrom(const RemoveUserVisualParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveUserVisualParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.Uuid visual_id = 2;
  bool has_visual_id() const;
  void clear_visual_id();
  static const int kVisualIdFieldNumber = 2;
  private:
  const ::mtm::Uuid& _internal_visual_id() const;
  public:
  const ::mtm::Uuid& visual_id() const;
  ::mtm::Uuid* release_visual_id();
  ::mtm::Uuid* mutable_visual_id();
  void set_allocated_visual_id(::mtm::Uuid* visual_id);

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.RemoveUserVisualParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::Uuid* visual_id_;
  ::google::protobuf::uint32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVisualParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.GetVisualParameters) */ {
 public:
  GetVisualParameters();
  virtual ~GetVisualParameters();

  GetVisualParameters(const GetVisualParameters& from);

  inline GetVisualParameters& operator=(const GetVisualParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVisualParameters(GetVisualParameters&& from) noexcept
    : GetVisualParameters() {
    *this = ::std::move(from);
  }

  inline GetVisualParameters& operator=(GetVisualParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVisualParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVisualParameters* internal_default_instance() {
    return reinterpret_cast<const GetVisualParameters*>(
               &_GetVisualParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GetVisualParameters* other);
  friend void swap(GetVisualParameters& a, GetVisualParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVisualParameters* New() const final {
    return CreateMaybeMessage<GetVisualParameters>(NULL);
  }

  GetVisualParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVisualParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVisualParameters& from);
  void MergeFrom(const GetVisualParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVisualParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.Uuid visual_id = 2;
  bool has_visual_id() const;
  void clear_visual_id();
  static const int kVisualIdFieldNumber = 2;
  private:
  const ::mtm::Uuid& _internal_visual_id() const;
  public:
  const ::mtm::Uuid& visual_id() const;
  ::mtm::Uuid* release_visual_id();
  ::mtm::Uuid* mutable_visual_id();
  void set_allocated_visual_id(::mtm::Uuid* visual_id);

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.GetVisualParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::Uuid* visual_id_;
  ::google::protobuf::uint32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddBitmapParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.AddBitmapParameters) */ {
 public:
  AddBitmapParameters();
  virtual ~AddBitmapParameters();

  AddBitmapParameters(const AddBitmapParameters& from);

  inline AddBitmapParameters& operator=(const AddBitmapParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddBitmapParameters(AddBitmapParameters&& from) noexcept
    : AddBitmapParameters() {
    *this = ::std::move(from);
  }

  inline AddBitmapParameters& operator=(AddBitmapParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddBitmapParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddBitmapParameters* internal_default_instance() {
    return reinterpret_cast<const AddBitmapParameters*>(
               &_AddBitmapParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(AddBitmapParameters* other);
  friend void swap(AddBitmapParameters& a, AddBitmapParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddBitmapParameters* New() const final {
    return CreateMaybeMessage<AddBitmapParameters>(NULL);
  }

  AddBitmapParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddBitmapParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddBitmapParameters& from);
  void MergeFrom(const AddBitmapParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddBitmapParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bitmap_name = 2;
  void clear_bitmap_name();
  static const int kBitmapNameFieldNumber = 2;
  const ::std::string& bitmap_name() const;
  void set_bitmap_name(const ::std::string& value);
  #if LANG_CXX11
  void set_bitmap_name(::std::string&& value);
  #endif
  void set_bitmap_name(const char* value);
  void set_bitmap_name(const char* value, size_t size);
  ::std::string* mutable_bitmap_name();
  ::std::string* release_bitmap_name();
  void set_allocated_bitmap_name(::std::string* bitmap_name);

  // bytes bitmap_data = 3;
  void clear_bitmap_data();
  static const int kBitmapDataFieldNumber = 3;
  const ::std::string& bitmap_data() const;
  void set_bitmap_data(const ::std::string& value);
  #if LANG_CXX11
  void set_bitmap_data(::std::string&& value);
  #endif
  void set_bitmap_data(const char* value);
  void set_bitmap_data(const void* value, size_t size);
  ::std::string* mutable_bitmap_data();
  ::std::string* release_bitmap_data();
  void set_allocated_bitmap_data(::std::string* bitmap_data);

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.AddBitmapParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bitmap_name_;
  ::google::protobuf::internal::ArenaStringPtr bitmap_data_;
  ::google::protobuf::uint32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RollbackParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.RollbackParameters) */ {
 public:
  RollbackParameters();
  virtual ~RollbackParameters();

  RollbackParameters(const RollbackParameters& from);

  inline RollbackParameters& operator=(const RollbackParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RollbackParameters(RollbackParameters&& from) noexcept
    : RollbackParameters() {
    *this = ::std::move(from);
  }

  inline RollbackParameters& operator=(RollbackParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RollbackParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollbackParameters* internal_default_instance() {
    return reinterpret_cast<const RollbackParameters*>(
               &_RollbackParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(RollbackParameters* other);
  friend void swap(RollbackParameters& a, RollbackParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RollbackParameters* New() const final {
    return CreateMaybeMessage<RollbackParameters>(NULL);
  }

  RollbackParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RollbackParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RollbackParameters& from);
  void MergeFrom(const RollbackParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RollbackParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.Uuid object_id = 2;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  private:
  const ::mtm::Uuid& _internal_object_id() const;
  public:
  const ::mtm::Uuid& object_id() const;
  ::mtm::Uuid* release_object_id();
  ::mtm::Uuid* mutable_object_id();
  void set_allocated_object_id(::mtm::Uuid* object_id);

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.RollbackParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::Uuid* object_id_;
  ::google::protobuf::uint32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rollback2Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.Rollback2Parameters) */ {
 public:
  Rollback2Parameters();
  virtual ~Rollback2Parameters();

  Rollback2Parameters(const Rollback2Parameters& from);

  inline Rollback2Parameters& operator=(const Rollback2Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rollback2Parameters(Rollback2Parameters&& from) noexcept
    : Rollback2Parameters() {
    *this = ::std::move(from);
  }

  inline Rollback2Parameters& operator=(Rollback2Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rollback2Parameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rollback2Parameters* internal_default_instance() {
    return reinterpret_cast<const Rollback2Parameters*>(
               &_Rollback2Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Rollback2Parameters* other);
  friend void swap(Rollback2Parameters& a, Rollback2Parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rollback2Parameters* New() const final {
    return CreateMaybeMessage<Rollback2Parameters>(NULL);
  }

  Rollback2Parameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rollback2Parameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rollback2Parameters& from);
  void MergeFrom(const Rollback2Parameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rollback2Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.Rollback2Parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rollback3Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.Rollback3Parameters) */ {
 public:
  Rollback3Parameters();
  virtual ~Rollback3Parameters();

  Rollback3Parameters(const Rollback3Parameters& from);

  inline Rollback3Parameters& operator=(const Rollback3Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rollback3Parameters(Rollback3Parameters&& from) noexcept
    : Rollback3Parameters() {
    *this = ::std::move(from);
  }

  inline Rollback3Parameters& operator=(Rollback3Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rollback3Parameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rollback3Parameters* internal_default_instance() {
    return reinterpret_cast<const Rollback3Parameters*>(
               &_Rollback3Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Rollback3Parameters* other);
  friend void swap(Rollback3Parameters& a, Rollback3Parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rollback3Parameters* New() const final {
    return CreateMaybeMessage<Rollback3Parameters>(NULL);
  }

  Rollback3Parameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rollback3Parameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rollback3Parameters& from);
  void MergeFrom(const Rollback3Parameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rollback3Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.Uuid object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  private:
  const ::mtm::Uuid& _internal_object_id() const;
  public:
  const ::mtm::Uuid& object_id() const;
  ::mtm::Uuid* release_object_id();
  ::mtm::Uuid* mutable_object_id();
  void set_allocated_object_id(::mtm::Uuid* object_id);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.Rollback3Parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::Uuid* object_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveGeographyResourceParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.RemoveGeographyResourceParameters) */ {
 public:
  RemoveGeographyResourceParameters();
  virtual ~RemoveGeographyResourceParameters();

  RemoveGeographyResourceParameters(const RemoveGeographyResourceParameters& from);

  inline RemoveGeographyResourceParameters& operator=(const RemoveGeographyResourceParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveGeographyResourceParameters(RemoveGeographyResourceParameters&& from) noexcept
    : RemoveGeographyResourceParameters() {
    *this = ::std::move(from);
  }

  inline RemoveGeographyResourceParameters& operator=(RemoveGeographyResourceParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveGeographyResourceParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveGeographyResourceParameters* internal_default_instance() {
    return reinterpret_cast<const RemoveGeographyResourceParameters*>(
               &_RemoveGeographyResourceParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(RemoveGeographyResourceParameters* other);
  friend void swap(RemoveGeographyResourceParameters& a, RemoveGeographyResourceParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveGeographyResourceParameters* New() const final {
    return CreateMaybeMessage<RemoveGeographyResourceParameters>(NULL);
  }

  RemoveGeographyResourceParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveGeographyResourceParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveGeographyResourceParameters& from);
  void MergeFrom(const RemoveGeographyResourceParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveGeographyResourceParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.Uuid geography_resource_id = 1;
  bool has_geography_resource_id() const;
  void clear_geography_resource_id();
  static const int kGeographyResourceIdFieldNumber = 1;
  private:
  const ::mtm::Uuid& _internal_geography_resource_id() const;
  public:
  const ::mtm::Uuid& geography_resource_id() const;
  ::mtm::Uuid* release_geography_resource_id();
  ::mtm::Uuid* mutable_geography_resource_id();
  void set_allocated_geography_resource_id(::mtm::Uuid* geography_resource_id);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.RemoveGeographyResourceParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::Uuid* geography_resource_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBitmapParameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.GetBitmapParameters) */ {
 public:
  GetBitmapParameters();
  virtual ~GetBitmapParameters();

  GetBitmapParameters(const GetBitmapParameters& from);

  inline GetBitmapParameters& operator=(const GetBitmapParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBitmapParameters(GetBitmapParameters&& from) noexcept
    : GetBitmapParameters() {
    *this = ::std::move(from);
  }

  inline GetBitmapParameters& operator=(GetBitmapParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBitmapParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBitmapParameters* internal_default_instance() {
    return reinterpret_cast<const GetBitmapParameters*>(
               &_GetBitmapParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(GetBitmapParameters* other);
  friend void swap(GetBitmapParameters& a, GetBitmapParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBitmapParameters* New() const final {
    return CreateMaybeMessage<GetBitmapParameters>(NULL);
  }

  GetBitmapParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBitmapParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBitmapParameters& from);
  void MergeFrom(const GetBitmapParameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBitmapParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mtm.Uuid geography_resource_id = 1;
  bool has_geography_resource_id() const;
  void clear_geography_resource_id();
  static const int kGeographyResourceIdFieldNumber = 1;
  private:
  const ::mtm::Uuid& _internal_geography_resource_id() const;
  public:
  const ::mtm::Uuid& geography_resource_id() const;
  ::mtm::Uuid* release_geography_resource_id();
  ::mtm::Uuid* mutable_geography_resource_id();
  void set_allocated_geography_resource_id(::mtm::Uuid* geography_resource_id);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.GetBitmapParameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mtm::Uuid* geography_resource_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBitmapResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.geo.service.GetBitmapResponse) */ {
 public:
  GetBitmapResponse();
  virtual ~GetBitmapResponse();

  GetBitmapResponse(const GetBitmapResponse& from);

  inline GetBitmapResponse& operator=(const GetBitmapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBitmapResponse(GetBitmapResponse&& from) noexcept
    : GetBitmapResponse() {
    *this = ::std::move(from);
  }

  inline GetBitmapResponse& operator=(GetBitmapResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBitmapResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBitmapResponse* internal_default_instance() {
    return reinterpret_cast<const GetBitmapResponse*>(
               &_GetBitmapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(GetBitmapResponse* other);
  friend void swap(GetBitmapResponse& a, GetBitmapResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBitmapResponse* New() const final {
    return CreateMaybeMessage<GetBitmapResponse>(NULL);
  }

  GetBitmapResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBitmapResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBitmapResponse& from);
  void MergeFrom(const GetBitmapResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBitmapResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.BytesValue bitmap_data = 1;
  bool has_bitmap_data() const;
  void clear_bitmap_data();
  static const int kBitmapDataFieldNumber = 1;
  private:
  const ::google::protobuf::BytesValue& _internal_bitmap_data() const;
  public:
  const ::google::protobuf::BytesValue& bitmap_data() const;
  ::google::protobuf::BytesValue* release_bitmap_data();
  ::google::protobuf::BytesValue* mutable_bitmap_data();
  void set_allocated_bitmap_data(::google::protobuf::BytesValue* bitmap_data);

  // @@protoc_insertion_point(class_scope:mtm.geo.service.GetBitmapResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::BytesValue* bitmap_data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeographyResponse

// .mtm.geo.model.Geography geography = 1;
inline bool GeographyResponse::has_geography() const {
  return this != internal_default_instance() && geography_ != NULL;
}
inline const ::mtm::geo::model::Geography& GeographyResponse::_internal_geography() const {
  return *geography_;
}
inline const ::mtm::geo::model::Geography& GeographyResponse::geography() const {
  const ::mtm::geo::model::Geography* p = geography_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.GeographyResponse.geography)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::geo::model::Geography*>(
      &::mtm::geo::model::_Geography_default_instance_);
}
inline ::mtm::geo::model::Geography* GeographyResponse::release_geography() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.GeographyResponse.geography)
  
  ::mtm::geo::model::Geography* temp = geography_;
  geography_ = NULL;
  return temp;
}
inline ::mtm::geo::model::Geography* GeographyResponse::mutable_geography() {
  
  if (geography_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::geo::model::Geography>(GetArenaNoVirtual());
    geography_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.GeographyResponse.geography)
  return geography_;
}
inline void GeographyResponse::set_allocated_geography(::mtm::geo::model::Geography* geography) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geography_);
  }
  if (geography) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geography = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geography, submessage_arena);
    }
    
  } else {
    
  }
  geography_ = geography;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.GeographyResponse.geography)
}

// -------------------------------------------------------------------

// VisualResponse

// .mtm.geo.model.Visual visual = 1;
inline bool VisualResponse::has_visual() const {
  return this != internal_default_instance() && visual_ != NULL;
}
inline const ::mtm::geo::model::Visual& VisualResponse::_internal_visual() const {
  return *visual_;
}
inline const ::mtm::geo::model::Visual& VisualResponse::visual() const {
  const ::mtm::geo::model::Visual* p = visual_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.VisualResponse.visual)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::geo::model::Visual*>(
      &::mtm::geo::model::_Visual_default_instance_);
}
inline ::mtm::geo::model::Visual* VisualResponse::release_visual() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.VisualResponse.visual)
  
  ::mtm::geo::model::Visual* temp = visual_;
  visual_ = NULL;
  return temp;
}
inline ::mtm::geo::model::Visual* VisualResponse::mutable_visual() {
  
  if (visual_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::geo::model::Visual>(GetArenaNoVirtual());
    visual_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.VisualResponse.visual)
  return visual_;
}
inline void VisualResponse::set_allocated_visual(::mtm::geo::model::Visual* visual) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(visual_);
  }
  if (visual) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      visual = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, visual, submessage_arena);
    }
    
  } else {
    
  }
  visual_ = visual;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.VisualResponse.visual)
}

// -------------------------------------------------------------------

// BoolResponse

// bool result = 1;
inline void BoolResponse::clear_result() {
  result_ = false;
}
inline bool BoolResponse::result() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.BoolResponse.result)
  return result_;
}
inline void BoolResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.BoolResponse.result)
}

// -------------------------------------------------------------------

// AddGeographyParameters

// uint32 user_id = 1;
inline void AddGeographyParameters::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 AddGeographyParameters::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.AddGeographyParameters.user_id)
  return user_id_;
}
inline void AddGeographyParameters::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.AddGeographyParameters.user_id)
}

// .mtm.geo.model.Geography geography = 2;
inline bool AddGeographyParameters::has_geography() const {
  return this != internal_default_instance() && geography_ != NULL;
}
inline const ::mtm::geo::model::Geography& AddGeographyParameters::_internal_geography() const {
  return *geography_;
}
inline const ::mtm::geo::model::Geography& AddGeographyParameters::geography() const {
  const ::mtm::geo::model::Geography* p = geography_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.AddGeographyParameters.geography)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::geo::model::Geography*>(
      &::mtm::geo::model::_Geography_default_instance_);
}
inline ::mtm::geo::model::Geography* AddGeographyParameters::release_geography() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.AddGeographyParameters.geography)
  
  ::mtm::geo::model::Geography* temp = geography_;
  geography_ = NULL;
  return temp;
}
inline ::mtm::geo::model::Geography* AddGeographyParameters::mutable_geography() {
  
  if (geography_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::geo::model::Geography>(GetArenaNoVirtual());
    geography_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.AddGeographyParameters.geography)
  return geography_;
}
inline void AddGeographyParameters::set_allocated_geography(::mtm::geo::model::Geography* geography) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geography_);
  }
  if (geography) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geography = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geography, submessage_arena);
    }
    
  } else {
    
  }
  geography_ = geography;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.AddGeographyParameters.geography)
}

// .mtm.geo.model.Visual visual = 3;
inline bool AddGeographyParameters::has_visual() const {
  return this != internal_default_instance() && visual_ != NULL;
}
inline const ::mtm::geo::model::Visual& AddGeographyParameters::_internal_visual() const {
  return *visual_;
}
inline const ::mtm::geo::model::Visual& AddGeographyParameters::visual() const {
  const ::mtm::geo::model::Visual* p = visual_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.AddGeographyParameters.visual)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::geo::model::Visual*>(
      &::mtm::geo::model::_Visual_default_instance_);
}
inline ::mtm::geo::model::Visual* AddGeographyParameters::release_visual() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.AddGeographyParameters.visual)
  
  ::mtm::geo::model::Visual* temp = visual_;
  visual_ = NULL;
  return temp;
}
inline ::mtm::geo::model::Visual* AddGeographyParameters::mutable_visual() {
  
  if (visual_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::geo::model::Visual>(GetArenaNoVirtual());
    visual_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.AddGeographyParameters.visual)
  return visual_;
}
inline void AddGeographyParameters::set_allocated_visual(::mtm::geo::model::Visual* visual) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(visual_);
  }
  if (visual) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      visual = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, visual, submessage_arena);
    }
    
  } else {
    
  }
  visual_ = visual;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.AddGeographyParameters.visual)
}

// -------------------------------------------------------------------

// RemoveGeographyParameters

// uint32 user_id = 1;
inline void RemoveGeographyParameters::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 RemoveGeographyParameters::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.RemoveGeographyParameters.user_id)
  return user_id_;
}
inline void RemoveGeographyParameters::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.RemoveGeographyParameters.user_id)
}

// .mtm.Uuid geography_id = 2;
inline bool RemoveGeographyParameters::has_geography_id() const {
  return this != internal_default_instance() && geography_id_ != NULL;
}
inline const ::mtm::Uuid& RemoveGeographyParameters::_internal_geography_id() const {
  return *geography_id_;
}
inline const ::mtm::Uuid& RemoveGeographyParameters::geography_id() const {
  const ::mtm::Uuid* p = geography_id_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.RemoveGeographyParameters.geography_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::Uuid*>(
      &::mtm::_Uuid_default_instance_);
}
inline ::mtm::Uuid* RemoveGeographyParameters::release_geography_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.RemoveGeographyParameters.geography_id)
  
  ::mtm::Uuid* temp = geography_id_;
  geography_id_ = NULL;
  return temp;
}
inline ::mtm::Uuid* RemoveGeographyParameters::mutable_geography_id() {
  
  if (geography_id_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::Uuid>(GetArenaNoVirtual());
    geography_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.RemoveGeographyParameters.geography_id)
  return geography_id_;
}
inline void RemoveGeographyParameters::set_allocated_geography_id(::mtm::Uuid* geography_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geography_id_);
  }
  if (geography_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geography_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geography_id, submessage_arena);
    }
    
  } else {
    
  }
  geography_id_ = geography_id;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.RemoveGeographyParameters.geography_id)
}

// -------------------------------------------------------------------

// RemoveGeographiesParameters

// uint32 user_id = 1;
inline void RemoveGeographiesParameters::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 RemoveGeographiesParameters::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.RemoveGeographiesParameters.user_id)
  return user_id_;
}
inline void RemoveGeographiesParameters::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.RemoveGeographiesParameters.user_id)
}

// repeated .mtm.Uuid geography_ids = 2;
inline int RemoveGeographiesParameters::geography_ids_size() const {
  return geography_ids_.size();
}
inline ::mtm::Uuid* RemoveGeographiesParameters::mutable_geography_ids(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.RemoveGeographiesParameters.geography_ids)
  return geography_ids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::Uuid >*
RemoveGeographiesParameters::mutable_geography_ids() {
  // @@protoc_insertion_point(field_mutable_list:mtm.geo.service.RemoveGeographiesParameters.geography_ids)
  return &geography_ids_;
}
inline const ::mtm::Uuid& RemoveGeographiesParameters::geography_ids(int index) const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.RemoveGeographiesParameters.geography_ids)
  return geography_ids_.Get(index);
}
inline ::mtm::Uuid* RemoveGeographiesParameters::add_geography_ids() {
  // @@protoc_insertion_point(field_add:mtm.geo.service.RemoveGeographiesParameters.geography_ids)
  return geography_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::Uuid >&
RemoveGeographiesParameters::geography_ids() const {
  // @@protoc_insertion_point(field_list:mtm.geo.service.RemoveGeographiesParameters.geography_ids)
  return geography_ids_;
}

// -------------------------------------------------------------------

// EditParameters

// uint32 user_id = 1;
inline void EditParameters::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 EditParameters::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.EditParameters.user_id)
  return user_id_;
}
inline void EditParameters::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.EditParameters.user_id)
}

// .mtm.Uuid geography_id = 2;
inline bool EditParameters::has_geography_id() const {
  return this != internal_default_instance() && geography_id_ != NULL;
}
inline const ::mtm::Uuid& EditParameters::_internal_geography_id() const {
  return *geography_id_;
}
inline const ::mtm::Uuid& EditParameters::geography_id() const {
  const ::mtm::Uuid* p = geography_id_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.EditParameters.geography_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::Uuid*>(
      &::mtm::_Uuid_default_instance_);
}
inline ::mtm::Uuid* EditParameters::release_geography_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.EditParameters.geography_id)
  
  ::mtm::Uuid* temp = geography_id_;
  geography_id_ = NULL;
  return temp;
}
inline ::mtm::Uuid* EditParameters::mutable_geography_id() {
  
  if (geography_id_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::Uuid>(GetArenaNoVirtual());
    geography_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.EditParameters.geography_id)
  return geography_id_;
}
inline void EditParameters::set_allocated_geography_id(::mtm::Uuid* geography_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geography_id_);
  }
  if (geography_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geography_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geography_id, submessage_arena);
    }
    
  } else {
    
  }
  geography_id_ = geography_id;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.EditParameters.geography_id)
}

// -------------------------------------------------------------------

// CommitParameters

// uint32 user_id = 1;
inline void CommitParameters::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 CommitParameters::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.CommitParameters.user_id)
  return user_id_;
}
inline void CommitParameters::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.CommitParameters.user_id)
}

// .mtm.geo.model.Geography geography = 2;
inline bool CommitParameters::has_geography() const {
  return this != internal_default_instance() && geography_ != NULL;
}
inline const ::mtm::geo::model::Geography& CommitParameters::_internal_geography() const {
  return *geography_;
}
inline const ::mtm::geo::model::Geography& CommitParameters::geography() const {
  const ::mtm::geo::model::Geography* p = geography_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.CommitParameters.geography)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::geo::model::Geography*>(
      &::mtm::geo::model::_Geography_default_instance_);
}
inline ::mtm::geo::model::Geography* CommitParameters::release_geography() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.CommitParameters.geography)
  
  ::mtm::geo::model::Geography* temp = geography_;
  geography_ = NULL;
  return temp;
}
inline ::mtm::geo::model::Geography* CommitParameters::mutable_geography() {
  
  if (geography_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::geo::model::Geography>(GetArenaNoVirtual());
    geography_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.CommitParameters.geography)
  return geography_;
}
inline void CommitParameters::set_allocated_geography(::mtm::geo::model::Geography* geography) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geography_);
  }
  if (geography) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geography = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geography, submessage_arena);
    }
    
  } else {
    
  }
  geography_ = geography;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.CommitParameters.geography)
}

// .mtm.geo.model.Visual visual = 3;
inline bool CommitParameters::has_visual() const {
  return this != internal_default_instance() && visual_ != NULL;
}
inline const ::mtm::geo::model::Visual& CommitParameters::_internal_visual() const {
  return *visual_;
}
inline const ::mtm::geo::model::Visual& CommitParameters::visual() const {
  const ::mtm::geo::model::Visual* p = visual_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.CommitParameters.visual)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::geo::model::Visual*>(
      &::mtm::geo::model::_Visual_default_instance_);
}
inline ::mtm::geo::model::Visual* CommitParameters::release_visual() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.CommitParameters.visual)
  
  ::mtm::geo::model::Visual* temp = visual_;
  visual_ = NULL;
  return temp;
}
inline ::mtm::geo::model::Visual* CommitParameters::mutable_visual() {
  
  if (visual_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::geo::model::Visual>(GetArenaNoVirtual());
    visual_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.CommitParameters.visual)
  return visual_;
}
inline void CommitParameters::set_allocated_visual(::mtm::geo::model::Visual* visual) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(visual_);
  }
  if (visual) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      visual = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, visual, submessage_arena);
    }
    
  } else {
    
  }
  visual_ = visual;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.CommitParameters.visual)
}

// -------------------------------------------------------------------

// EditResponse

// bool result = 1;
inline void EditResponse::clear_result() {
  result_ = false;
}
inline bool EditResponse::result() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.EditResponse.result)
  return result_;
}
inline void EditResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.EditResponse.result)
}

// .mtm.geo.model.Geography geography = 2;
inline bool EditResponse::has_geography() const {
  return this != internal_default_instance() && geography_ != NULL;
}
inline const ::mtm::geo::model::Geography& EditResponse::_internal_geography() const {
  return *geography_;
}
inline const ::mtm::geo::model::Geography& EditResponse::geography() const {
  const ::mtm::geo::model::Geography* p = geography_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.EditResponse.geography)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::geo::model::Geography*>(
      &::mtm::geo::model::_Geography_default_instance_);
}
inline ::mtm::geo::model::Geography* EditResponse::release_geography() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.EditResponse.geography)
  
  ::mtm::geo::model::Geography* temp = geography_;
  geography_ = NULL;
  return temp;
}
inline ::mtm::geo::model::Geography* EditResponse::mutable_geography() {
  
  if (geography_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::geo::model::Geography>(GetArenaNoVirtual());
    geography_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.EditResponse.geography)
  return geography_;
}
inline void EditResponse::set_allocated_geography(::mtm::geo::model::Geography* geography) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geography_);
  }
  if (geography) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geography = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geography, submessage_arena);
    }
    
  } else {
    
  }
  geography_ = geography;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.EditResponse.geography)
}

// .mtm.geo.model.Visual visual = 3;
inline bool EditResponse::has_visual() const {
  return this != internal_default_instance() && visual_ != NULL;
}
inline const ::mtm::geo::model::Visual& EditResponse::_internal_visual() const {
  return *visual_;
}
inline const ::mtm::geo::model::Visual& EditResponse::visual() const {
  const ::mtm::geo::model::Visual* p = visual_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.EditResponse.visual)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::geo::model::Visual*>(
      &::mtm::geo::model::_Visual_default_instance_);
}
inline ::mtm::geo::model::Visual* EditResponse::release_visual() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.EditResponse.visual)
  
  ::mtm::geo::model::Visual* temp = visual_;
  visual_ = NULL;
  return temp;
}
inline ::mtm::geo::model::Visual* EditResponse::mutable_visual() {
  
  if (visual_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::geo::model::Visual>(GetArenaNoVirtual());
    visual_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.EditResponse.visual)
  return visual_;
}
inline void EditResponse::set_allocated_visual(::mtm::geo::model::Visual* visual) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(visual_);
  }
  if (visual) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      visual = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, visual, submessage_arena);
    }
    
  } else {
    
  }
  visual_ = visual;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.EditResponse.visual)
}

// -------------------------------------------------------------------

// GetVisualsForUserParameters

// uint32 user_id = 1;
inline void GetVisualsForUserParameters::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 GetVisualsForUserParameters::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.GetVisualsForUserParameters.user_id)
  return user_id_;
}
inline void GetVisualsForUserParameters::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.GetVisualsForUserParameters.user_id)
}

// -------------------------------------------------------------------

// AddUserVisualParameters

// uint32 user_id = 1;
inline void AddUserVisualParameters::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 AddUserVisualParameters::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.AddUserVisualParameters.user_id)
  return user_id_;
}
inline void AddUserVisualParameters::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.AddUserVisualParameters.user_id)
}

// .mtm.geo.model.Visual visual = 2;
inline bool AddUserVisualParameters::has_visual() const {
  return this != internal_default_instance() && visual_ != NULL;
}
inline const ::mtm::geo::model::Visual& AddUserVisualParameters::_internal_visual() const {
  return *visual_;
}
inline const ::mtm::geo::model::Visual& AddUserVisualParameters::visual() const {
  const ::mtm::geo::model::Visual* p = visual_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.AddUserVisualParameters.visual)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::geo::model::Visual*>(
      &::mtm::geo::model::_Visual_default_instance_);
}
inline ::mtm::geo::model::Visual* AddUserVisualParameters::release_visual() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.AddUserVisualParameters.visual)
  
  ::mtm::geo::model::Visual* temp = visual_;
  visual_ = NULL;
  return temp;
}
inline ::mtm::geo::model::Visual* AddUserVisualParameters::mutable_visual() {
  
  if (visual_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::geo::model::Visual>(GetArenaNoVirtual());
    visual_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.AddUserVisualParameters.visual)
  return visual_;
}
inline void AddUserVisualParameters::set_allocated_visual(::mtm::geo::model::Visual* visual) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(visual_);
  }
  if (visual) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      visual = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, visual, submessage_arena);
    }
    
  } else {
    
  }
  visual_ = visual;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.AddUserVisualParameters.visual)
}

// -------------------------------------------------------------------

// AddUserVisual2Parameters

// uint32 user_id = 1;
inline void AddUserVisual2Parameters::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 AddUserVisual2Parameters::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.AddUserVisual2Parameters.user_id)
  return user_id_;
}
inline void AddUserVisual2Parameters::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.AddUserVisual2Parameters.user_id)
}

// bool visible = 2;
inline void AddUserVisual2Parameters::clear_visible() {
  visible_ = false;
}
inline bool AddUserVisual2Parameters::visible() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.AddUserVisual2Parameters.visible)
  return visible_;
}
inline void AddUserVisual2Parameters::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.AddUserVisual2Parameters.visible)
}

// repeated .mtm.Uuid geography_ids = 3;
inline int AddUserVisual2Parameters::geography_ids_size() const {
  return geography_ids_.size();
}
inline ::mtm::Uuid* AddUserVisual2Parameters::mutable_geography_ids(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.AddUserVisual2Parameters.geography_ids)
  return geography_ids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::Uuid >*
AddUserVisual2Parameters::mutable_geography_ids() {
  // @@protoc_insertion_point(field_mutable_list:mtm.geo.service.AddUserVisual2Parameters.geography_ids)
  return &geography_ids_;
}
inline const ::mtm::Uuid& AddUserVisual2Parameters::geography_ids(int index) const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.AddUserVisual2Parameters.geography_ids)
  return geography_ids_.Get(index);
}
inline ::mtm::Uuid* AddUserVisual2Parameters::add_geography_ids() {
  // @@protoc_insertion_point(field_add:mtm.geo.service.AddUserVisual2Parameters.geography_ids)
  return geography_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::Uuid >&
AddUserVisual2Parameters::geography_ids() const {
  // @@protoc_insertion_point(field_list:mtm.geo.service.AddUserVisual2Parameters.geography_ids)
  return geography_ids_;
}

// -------------------------------------------------------------------

// RemoveUserVisualParameters

// uint32 user_id = 1;
inline void RemoveUserVisualParameters::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 RemoveUserVisualParameters::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.RemoveUserVisualParameters.user_id)
  return user_id_;
}
inline void RemoveUserVisualParameters::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.RemoveUserVisualParameters.user_id)
}

// .mtm.Uuid visual_id = 2;
inline bool RemoveUserVisualParameters::has_visual_id() const {
  return this != internal_default_instance() && visual_id_ != NULL;
}
inline const ::mtm::Uuid& RemoveUserVisualParameters::_internal_visual_id() const {
  return *visual_id_;
}
inline const ::mtm::Uuid& RemoveUserVisualParameters::visual_id() const {
  const ::mtm::Uuid* p = visual_id_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.RemoveUserVisualParameters.visual_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::Uuid*>(
      &::mtm::_Uuid_default_instance_);
}
inline ::mtm::Uuid* RemoveUserVisualParameters::release_visual_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.RemoveUserVisualParameters.visual_id)
  
  ::mtm::Uuid* temp = visual_id_;
  visual_id_ = NULL;
  return temp;
}
inline ::mtm::Uuid* RemoveUserVisualParameters::mutable_visual_id() {
  
  if (visual_id_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::Uuid>(GetArenaNoVirtual());
    visual_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.RemoveUserVisualParameters.visual_id)
  return visual_id_;
}
inline void RemoveUserVisualParameters::set_allocated_visual_id(::mtm::Uuid* visual_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(visual_id_);
  }
  if (visual_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      visual_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, visual_id, submessage_arena);
    }
    
  } else {
    
  }
  visual_id_ = visual_id;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.RemoveUserVisualParameters.visual_id)
}

// -------------------------------------------------------------------

// GetVisualParameters

// uint32 user_id = 1;
inline void GetVisualParameters::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 GetVisualParameters::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.GetVisualParameters.user_id)
  return user_id_;
}
inline void GetVisualParameters::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.GetVisualParameters.user_id)
}

// .mtm.Uuid visual_id = 2;
inline bool GetVisualParameters::has_visual_id() const {
  return this != internal_default_instance() && visual_id_ != NULL;
}
inline const ::mtm::Uuid& GetVisualParameters::_internal_visual_id() const {
  return *visual_id_;
}
inline const ::mtm::Uuid& GetVisualParameters::visual_id() const {
  const ::mtm::Uuid* p = visual_id_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.GetVisualParameters.visual_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::Uuid*>(
      &::mtm::_Uuid_default_instance_);
}
inline ::mtm::Uuid* GetVisualParameters::release_visual_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.GetVisualParameters.visual_id)
  
  ::mtm::Uuid* temp = visual_id_;
  visual_id_ = NULL;
  return temp;
}
inline ::mtm::Uuid* GetVisualParameters::mutable_visual_id() {
  
  if (visual_id_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::Uuid>(GetArenaNoVirtual());
    visual_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.GetVisualParameters.visual_id)
  return visual_id_;
}
inline void GetVisualParameters::set_allocated_visual_id(::mtm::Uuid* visual_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(visual_id_);
  }
  if (visual_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      visual_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, visual_id, submessage_arena);
    }
    
  } else {
    
  }
  visual_id_ = visual_id;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.GetVisualParameters.visual_id)
}

// -------------------------------------------------------------------

// AddBitmapParameters

// uint32 user_id = 1;
inline void AddBitmapParameters::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 AddBitmapParameters::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.AddBitmapParameters.user_id)
  return user_id_;
}
inline void AddBitmapParameters::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.AddBitmapParameters.user_id)
}

// string bitmap_name = 2;
inline void AddBitmapParameters::clear_bitmap_name() {
  bitmap_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddBitmapParameters::bitmap_name() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.AddBitmapParameters.bitmap_name)
  return bitmap_name_.GetNoArena();
}
inline void AddBitmapParameters::set_bitmap_name(const ::std::string& value) {
  
  bitmap_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.geo.service.AddBitmapParameters.bitmap_name)
}
#if LANG_CXX11
inline void AddBitmapParameters::set_bitmap_name(::std::string&& value) {
  
  bitmap_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtm.geo.service.AddBitmapParameters.bitmap_name)
}
#endif
inline void AddBitmapParameters::set_bitmap_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bitmap_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.geo.service.AddBitmapParameters.bitmap_name)
}
inline void AddBitmapParameters::set_bitmap_name(const char* value, size_t size) {
  
  bitmap_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.geo.service.AddBitmapParameters.bitmap_name)
}
inline ::std::string* AddBitmapParameters::mutable_bitmap_name() {
  
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.AddBitmapParameters.bitmap_name)
  return bitmap_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddBitmapParameters::release_bitmap_name() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.AddBitmapParameters.bitmap_name)
  
  return bitmap_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddBitmapParameters::set_allocated_bitmap_name(::std::string* bitmap_name) {
  if (bitmap_name != NULL) {
    
  } else {
    
  }
  bitmap_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitmap_name);
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.AddBitmapParameters.bitmap_name)
}

// bytes bitmap_data = 3;
inline void AddBitmapParameters::clear_bitmap_data() {
  bitmap_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddBitmapParameters::bitmap_data() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.AddBitmapParameters.bitmap_data)
  return bitmap_data_.GetNoArena();
}
inline void AddBitmapParameters::set_bitmap_data(const ::std::string& value) {
  
  bitmap_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.geo.service.AddBitmapParameters.bitmap_data)
}
#if LANG_CXX11
inline void AddBitmapParameters::set_bitmap_data(::std::string&& value) {
  
  bitmap_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtm.geo.service.AddBitmapParameters.bitmap_data)
}
#endif
inline void AddBitmapParameters::set_bitmap_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bitmap_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.geo.service.AddBitmapParameters.bitmap_data)
}
inline void AddBitmapParameters::set_bitmap_data(const void* value, size_t size) {
  
  bitmap_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.geo.service.AddBitmapParameters.bitmap_data)
}
inline ::std::string* AddBitmapParameters::mutable_bitmap_data() {
  
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.AddBitmapParameters.bitmap_data)
  return bitmap_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddBitmapParameters::release_bitmap_data() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.AddBitmapParameters.bitmap_data)
  
  return bitmap_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddBitmapParameters::set_allocated_bitmap_data(::std::string* bitmap_data) {
  if (bitmap_data != NULL) {
    
  } else {
    
  }
  bitmap_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitmap_data);
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.AddBitmapParameters.bitmap_data)
}

// -------------------------------------------------------------------

// RollbackParameters

// uint32 user_id = 1;
inline void RollbackParameters::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 RollbackParameters::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.RollbackParameters.user_id)
  return user_id_;
}
inline void RollbackParameters::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.RollbackParameters.user_id)
}

// .mtm.Uuid object_id = 2;
inline bool RollbackParameters::has_object_id() const {
  return this != internal_default_instance() && object_id_ != NULL;
}
inline const ::mtm::Uuid& RollbackParameters::_internal_object_id() const {
  return *object_id_;
}
inline const ::mtm::Uuid& RollbackParameters::object_id() const {
  const ::mtm::Uuid* p = object_id_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.RollbackParameters.object_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::Uuid*>(
      &::mtm::_Uuid_default_instance_);
}
inline ::mtm::Uuid* RollbackParameters::release_object_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.RollbackParameters.object_id)
  
  ::mtm::Uuid* temp = object_id_;
  object_id_ = NULL;
  return temp;
}
inline ::mtm::Uuid* RollbackParameters::mutable_object_id() {
  
  if (object_id_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::Uuid>(GetArenaNoVirtual());
    object_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.RollbackParameters.object_id)
  return object_id_;
}
inline void RollbackParameters::set_allocated_object_id(::mtm::Uuid* object_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(object_id_);
  }
  if (object_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      object_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, object_id, submessage_arena);
    }
    
  } else {
    
  }
  object_id_ = object_id;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.RollbackParameters.object_id)
}

// -------------------------------------------------------------------

// Rollback2Parameters

// uint32 user_id = 1;
inline void Rollback2Parameters::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 Rollback2Parameters::user_id() const {
  // @@protoc_insertion_point(field_get:mtm.geo.service.Rollback2Parameters.user_id)
  return user_id_;
}
inline void Rollback2Parameters::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.geo.service.Rollback2Parameters.user_id)
}

// -------------------------------------------------------------------

// Rollback3Parameters

// .mtm.Uuid object_id = 1;
inline bool Rollback3Parameters::has_object_id() const {
  return this != internal_default_instance() && object_id_ != NULL;
}
inline const ::mtm::Uuid& Rollback3Parameters::_internal_object_id() const {
  return *object_id_;
}
inline const ::mtm::Uuid& Rollback3Parameters::object_id() const {
  const ::mtm::Uuid* p = object_id_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.Rollback3Parameters.object_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::Uuid*>(
      &::mtm::_Uuid_default_instance_);
}
inline ::mtm::Uuid* Rollback3Parameters::release_object_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.Rollback3Parameters.object_id)
  
  ::mtm::Uuid* temp = object_id_;
  object_id_ = NULL;
  return temp;
}
inline ::mtm::Uuid* Rollback3Parameters::mutable_object_id() {
  
  if (object_id_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::Uuid>(GetArenaNoVirtual());
    object_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.Rollback3Parameters.object_id)
  return object_id_;
}
inline void Rollback3Parameters::set_allocated_object_id(::mtm::Uuid* object_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(object_id_);
  }
  if (object_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      object_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, object_id, submessage_arena);
    }
    
  } else {
    
  }
  object_id_ = object_id;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.Rollback3Parameters.object_id)
}

// -------------------------------------------------------------------

// RemoveGeographyResourceParameters

// .mtm.Uuid geography_resource_id = 1;
inline bool RemoveGeographyResourceParameters::has_geography_resource_id() const {
  return this != internal_default_instance() && geography_resource_id_ != NULL;
}
inline const ::mtm::Uuid& RemoveGeographyResourceParameters::_internal_geography_resource_id() const {
  return *geography_resource_id_;
}
inline const ::mtm::Uuid& RemoveGeographyResourceParameters::geography_resource_id() const {
  const ::mtm::Uuid* p = geography_resource_id_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.RemoveGeographyResourceParameters.geography_resource_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::Uuid*>(
      &::mtm::_Uuid_default_instance_);
}
inline ::mtm::Uuid* RemoveGeographyResourceParameters::release_geography_resource_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.RemoveGeographyResourceParameters.geography_resource_id)
  
  ::mtm::Uuid* temp = geography_resource_id_;
  geography_resource_id_ = NULL;
  return temp;
}
inline ::mtm::Uuid* RemoveGeographyResourceParameters::mutable_geography_resource_id() {
  
  if (geography_resource_id_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::Uuid>(GetArenaNoVirtual());
    geography_resource_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.RemoveGeographyResourceParameters.geography_resource_id)
  return geography_resource_id_;
}
inline void RemoveGeographyResourceParameters::set_allocated_geography_resource_id(::mtm::Uuid* geography_resource_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geography_resource_id_);
  }
  if (geography_resource_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geography_resource_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geography_resource_id, submessage_arena);
    }
    
  } else {
    
  }
  geography_resource_id_ = geography_resource_id;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.RemoveGeographyResourceParameters.geography_resource_id)
}

// -------------------------------------------------------------------

// GetBitmapParameters

// .mtm.Uuid geography_resource_id = 1;
inline bool GetBitmapParameters::has_geography_resource_id() const {
  return this != internal_default_instance() && geography_resource_id_ != NULL;
}
inline const ::mtm::Uuid& GetBitmapParameters::_internal_geography_resource_id() const {
  return *geography_resource_id_;
}
inline const ::mtm::Uuid& GetBitmapParameters::geography_resource_id() const {
  const ::mtm::Uuid* p = geography_resource_id_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.GetBitmapParameters.geography_resource_id)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::Uuid*>(
      &::mtm::_Uuid_default_instance_);
}
inline ::mtm::Uuid* GetBitmapParameters::release_geography_resource_id() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.GetBitmapParameters.geography_resource_id)
  
  ::mtm::Uuid* temp = geography_resource_id_;
  geography_resource_id_ = NULL;
  return temp;
}
inline ::mtm::Uuid* GetBitmapParameters::mutable_geography_resource_id() {
  
  if (geography_resource_id_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::Uuid>(GetArenaNoVirtual());
    geography_resource_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.GetBitmapParameters.geography_resource_id)
  return geography_resource_id_;
}
inline void GetBitmapParameters::set_allocated_geography_resource_id(::mtm::Uuid* geography_resource_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geography_resource_id_);
  }
  if (geography_resource_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geography_resource_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geography_resource_id, submessage_arena);
    }
    
  } else {
    
  }
  geography_resource_id_ = geography_resource_id;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.GetBitmapParameters.geography_resource_id)
}

// -------------------------------------------------------------------

// GetBitmapResponse

// .google.protobuf.BytesValue bitmap_data = 1;
inline bool GetBitmapResponse::has_bitmap_data() const {
  return this != internal_default_instance() && bitmap_data_ != NULL;
}
inline const ::google::protobuf::BytesValue& GetBitmapResponse::_internal_bitmap_data() const {
  return *bitmap_data_;
}
inline const ::google::protobuf::BytesValue& GetBitmapResponse::bitmap_data() const {
  const ::google::protobuf::BytesValue* p = bitmap_data_;
  // @@protoc_insertion_point(field_get:mtm.geo.service.GetBitmapResponse.bitmap_data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BytesValue*>(
      &::google::protobuf::_BytesValue_default_instance_);
}
inline ::google::protobuf::BytesValue* GetBitmapResponse::release_bitmap_data() {
  // @@protoc_insertion_point(field_release:mtm.geo.service.GetBitmapResponse.bitmap_data)
  
  ::google::protobuf::BytesValue* temp = bitmap_data_;
  bitmap_data_ = NULL;
  return temp;
}
inline ::google::protobuf::BytesValue* GetBitmapResponse::mutable_bitmap_data() {
  
  if (bitmap_data_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::BytesValue>(GetArenaNoVirtual());
    bitmap_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.geo.service.GetBitmapResponse.bitmap_data)
  return bitmap_data_;
}
inline void GetBitmapResponse::set_allocated_bitmap_data(::google::protobuf::BytesValue* bitmap_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bitmap_data_);
  }
  if (bitmap_data) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(bitmap_data)->GetArena();
    if (message_arena != submessage_arena) {
      bitmap_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bitmap_data, submessage_arena);
    }
    
  } else {
    
  }
  bitmap_data_ = bitmap_data;
  // @@protoc_insertion_point(field_set_allocated:mtm.geo.service.GetBitmapResponse.bitmap_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace geo
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto
