// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mtm/geo/service/geo_service.proto

#include "mtm/geo/service/geo_service.pb.h"
#include "mtm/geo/service/geo_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mtm {
namespace geo {
namespace service {

static const char* GeoService_method_names[] = {
  "/mtm.geo.service.GeoService/Subscribe",
  "/mtm.geo.service.GeoService/GetGeographies",
  "/mtm.geo.service.GeoService/GetGeography",
  "/mtm.geo.service.GeoService/AddGeography",
  "/mtm.geo.service.GeoService/RemoveGeography",
  "/mtm.geo.service.GeoService/RemoveGeographies",
  "/mtm.geo.service.GeoService/Edit",
  "/mtm.geo.service.GeoService/Commit",
  "/mtm.geo.service.GeoService/Rollback",
  "/mtm.geo.service.GeoService/Rollback2",
  "/mtm.geo.service.GeoService/Rollback3",
  "/mtm.geo.service.GeoService/GetVisuals",
  "/mtm.geo.service.GeoService/GetVisualsForUser",
  "/mtm.geo.service.GeoService/AddUserVisual",
  "/mtm.geo.service.GeoService/AddUserVisual2",
  "/mtm.geo.service.GeoService/RemoveUserVisual",
  "/mtm.geo.service.GeoService/GetVisual",
  "/mtm.geo.service.GeoService/AddBitmap",
  "/mtm.geo.service.GeoService/GetBitmap",
  "/mtm.geo.service.GeoService/GetGeographyResources",
  "/mtm.geo.service.GeoService/RemoveGeographyResource",
  "/mtm.geo.service.GeoService/Ping",
};

std::unique_ptr< GeoService::Stub> GeoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GeoService::Stub> stub(new GeoService::Stub(channel));
  return stub;
}

GeoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Subscribe_(GeoService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetGeographies_(GeoService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGeography_(GeoService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddGeography_(GeoService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveGeography_(GeoService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveGeographies_(GeoService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Edit_(GeoService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Commit_(GeoService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rollback_(GeoService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rollback2_(GeoService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rollback3_(GeoService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVisuals_(GeoService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVisualsForUser_(GeoService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddUserVisual_(GeoService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddUserVisual2_(GeoService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveUserVisual_(GeoService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVisual_(GeoService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddBitmap_(GeoService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBitmap_(GeoService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGeographyResources_(GeoService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveGeographyResource_(GeoService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ping_(GeoService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::mtm::geo::messages::GeoMessage>* GeoService::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::mtm::geo::messages::GeoMessage>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

::grpc::ClientAsyncReader< ::mtm::geo::messages::GeoMessage>* GeoService::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mtm::geo::messages::GeoMessage>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mtm::geo::messages::GeoMessage>* GeoService::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mtm::geo::messages::GeoMessage>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

::grpc::Status GeoService::Stub::GetGeographies(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mtm::geo::model::GeographyList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetGeographies_, context, request, response);
}

void GeoService::Stub::experimental_async::GetGeographies(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetGeographies_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyList>* GeoService::Stub::AsyncGetGeographiesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::model::GeographyList>::Create(channel_.get(), cq, rpcmethod_GetGeographies_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyList>* GeoService::Stub::PrepareAsyncGetGeographiesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::model::GeographyList>::Create(channel_.get(), cq, rpcmethod_GetGeographies_, context, request, false);
}

::grpc::Status GeoService::Stub::GetGeography(::grpc::ClientContext* context, const ::mtm::Uuid& request, ::mtm::geo::service::GeographyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetGeography_, context, request, response);
}

void GeoService::Stub::experimental_async::GetGeography(::grpc::ClientContext* context, const ::mtm::Uuid* request, ::mtm::geo::service::GeographyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetGeography_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GeographyResponse>* GeoService::Stub::AsyncGetGeographyRaw(::grpc::ClientContext* context, const ::mtm::Uuid& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::GeographyResponse>::Create(channel_.get(), cq, rpcmethod_GetGeography_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GeographyResponse>* GeoService::Stub::PrepareAsyncGetGeographyRaw(::grpc::ClientContext* context, const ::mtm::Uuid& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::GeographyResponse>::Create(channel_.get(), cq, rpcmethod_GetGeography_, context, request, false);
}

::grpc::Status GeoService::Stub::AddGeography(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters& request, ::mtm::Uuid* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddGeography_, context, request, response);
}

void GeoService::Stub::experimental_async::AddGeography(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters* request, ::mtm::Uuid* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddGeography_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::Uuid>* GeoService::Stub::AsyncAddGeographyRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::Uuid>::Create(channel_.get(), cq, rpcmethod_AddGeography_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::Uuid>* GeoService::Stub::PrepareAsyncAddGeographyRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::Uuid>::Create(channel_.get(), cq, rpcmethod_AddGeography_, context, request, false);
}

::grpc::Status GeoService::Stub::RemoveGeography(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters& request, ::mtm::geo::service::BoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveGeography_, context, request, response);
}

void GeoService::Stub::experimental_async::RemoveGeography(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveGeography_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* GeoService::Stub::AsyncRemoveGeographyRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::BoolResponse>::Create(channel_.get(), cq, rpcmethod_RemoveGeography_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* GeoService::Stub::PrepareAsyncRemoveGeographyRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::BoolResponse>::Create(channel_.get(), cq, rpcmethod_RemoveGeography_, context, request, false);
}

::grpc::Status GeoService::Stub::RemoveGeographies(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters& request, ::mtm::geo::service::BoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveGeographies_, context, request, response);
}

void GeoService::Stub::experimental_async::RemoveGeographies(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveGeographies_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* GeoService::Stub::AsyncRemoveGeographiesRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::BoolResponse>::Create(channel_.get(), cq, rpcmethod_RemoveGeographies_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* GeoService::Stub::PrepareAsyncRemoveGeographiesRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::BoolResponse>::Create(channel_.get(), cq, rpcmethod_RemoveGeographies_, context, request, false);
}

::grpc::Status GeoService::Stub::Edit(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters& request, ::mtm::geo::service::EditResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Edit_, context, request, response);
}

void GeoService::Stub::experimental_async::Edit(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters* request, ::mtm::geo::service::EditResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Edit_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::EditResponse>* GeoService::Stub::AsyncEditRaw(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::EditResponse>::Create(channel_.get(), cq, rpcmethod_Edit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::EditResponse>* GeoService::Stub::PrepareAsyncEditRaw(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::EditResponse>::Create(channel_.get(), cq, rpcmethod_Edit_, context, request, false);
}

::grpc::Status GeoService::Stub::Commit(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Commit_, context, request, response);
}

void GeoService::Stub::experimental_async::Commit(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Commit_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeoService::Stub::AsyncCommitRaw(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Commit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeoService::Stub::PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Commit_, context, request, false);
}

::grpc::Status GeoService::Stub::Rollback(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Rollback_, context, request, response);
}

void GeoService::Stub::experimental_async::Rollback(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Rollback_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeoService::Stub::AsyncRollbackRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Rollback_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeoService::Stub::PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Rollback_, context, request, false);
}

::grpc::Status GeoService::Stub::Rollback2(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Rollback2_, context, request, response);
}

void GeoService::Stub::experimental_async::Rollback2(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Rollback2_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeoService::Stub::AsyncRollback2Raw(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Rollback2_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeoService::Stub::PrepareAsyncRollback2Raw(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Rollback2_, context, request, false);
}

::grpc::Status GeoService::Stub::Rollback3(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Rollback3_, context, request, response);
}

void GeoService::Stub::experimental_async::Rollback3(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Rollback3_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeoService::Stub::AsyncRollback3Raw(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Rollback3_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeoService::Stub::PrepareAsyncRollback3Raw(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Rollback3_, context, request, false);
}

::grpc::Status GeoService::Stub::GetVisuals(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mtm::geo::model::VisualList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVisuals_, context, request, response);
}

void GeoService::Stub::experimental_async::GetVisuals(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::VisualList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVisuals_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>* GeoService::Stub::AsyncGetVisualsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::model::VisualList>::Create(channel_.get(), cq, rpcmethod_GetVisuals_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>* GeoService::Stub::PrepareAsyncGetVisualsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::model::VisualList>::Create(channel_.get(), cq, rpcmethod_GetVisuals_, context, request, false);
}

::grpc::Status GeoService::Stub::GetVisualsForUser(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters& request, ::mtm::geo::model::VisualList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVisualsForUser_, context, request, response);
}

void GeoService::Stub::experimental_async::GetVisualsForUser(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters* request, ::mtm::geo::model::VisualList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVisualsForUser_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>* GeoService::Stub::AsyncGetVisualsForUserRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::model::VisualList>::Create(channel_.get(), cq, rpcmethod_GetVisualsForUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>* GeoService::Stub::PrepareAsyncGetVisualsForUserRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::model::VisualList>::Create(channel_.get(), cq, rpcmethod_GetVisualsForUser_, context, request, false);
}

::grpc::Status GeoService::Stub::AddUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters& request, ::mtm::geo::service::BoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddUserVisual_, context, request, response);
}

void GeoService::Stub::experimental_async::AddUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddUserVisual_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* GeoService::Stub::AsyncAddUserVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::BoolResponse>::Create(channel_.get(), cq, rpcmethod_AddUserVisual_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* GeoService::Stub::PrepareAsyncAddUserVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::BoolResponse>::Create(channel_.get(), cq, rpcmethod_AddUserVisual_, context, request, false);
}

::grpc::Status GeoService::Stub::AddUserVisual2(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters& request, ::mtm::geo::service::BoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddUserVisual2_, context, request, response);
}

void GeoService::Stub::experimental_async::AddUserVisual2(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddUserVisual2_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* GeoService::Stub::AsyncAddUserVisual2Raw(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::BoolResponse>::Create(channel_.get(), cq, rpcmethod_AddUserVisual2_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* GeoService::Stub::PrepareAsyncAddUserVisual2Raw(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::BoolResponse>::Create(channel_.get(), cq, rpcmethod_AddUserVisual2_, context, request, false);
}

::grpc::Status GeoService::Stub::RemoveUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters& request, ::mtm::geo::service::BoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveUserVisual_, context, request, response);
}

void GeoService::Stub::experimental_async::RemoveUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveUserVisual_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* GeoService::Stub::AsyncRemoveUserVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::BoolResponse>::Create(channel_.get(), cq, rpcmethod_RemoveUserVisual_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* GeoService::Stub::PrepareAsyncRemoveUserVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::BoolResponse>::Create(channel_.get(), cq, rpcmethod_RemoveUserVisual_, context, request, false);
}

::grpc::Status GeoService::Stub::GetVisual(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters& request, ::mtm::geo::service::VisualResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVisual_, context, request, response);
}

void GeoService::Stub::experimental_async::GetVisual(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters* request, ::mtm::geo::service::VisualResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVisual_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::VisualResponse>* GeoService::Stub::AsyncGetVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::VisualResponse>::Create(channel_.get(), cq, rpcmethod_GetVisual_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::VisualResponse>* GeoService::Stub::PrepareAsyncGetVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::VisualResponse>::Create(channel_.get(), cq, rpcmethod_GetVisual_, context, request, false);
}

::grpc::Status GeoService::Stub::AddBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters& request, ::mtm::Uuid* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddBitmap_, context, request, response);
}

void GeoService::Stub::experimental_async::AddBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters* request, ::mtm::Uuid* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddBitmap_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::Uuid>* GeoService::Stub::AsyncAddBitmapRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::Uuid>::Create(channel_.get(), cq, rpcmethod_AddBitmap_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::Uuid>* GeoService::Stub::PrepareAsyncAddBitmapRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::Uuid>::Create(channel_.get(), cq, rpcmethod_AddBitmap_, context, request, false);
}

::grpc::Status GeoService::Stub::GetBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters& request, ::mtm::geo::service::GetBitmapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBitmap_, context, request, response);
}

void GeoService::Stub::experimental_async::GetBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters* request, ::mtm::geo::service::GetBitmapResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBitmap_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GetBitmapResponse>* GeoService::Stub::AsyncGetBitmapRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::GetBitmapResponse>::Create(channel_.get(), cq, rpcmethod_GetBitmap_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GetBitmapResponse>* GeoService::Stub::PrepareAsyncGetBitmapRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::GetBitmapResponse>::Create(channel_.get(), cq, rpcmethod_GetBitmap_, context, request, false);
}

::grpc::Status GeoService::Stub::GetGeographyResources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mtm::geo::model::GeographyResourceList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetGeographyResources_, context, request, response);
}

void GeoService::Stub::experimental_async::GetGeographyResources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyResourceList* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetGeographyResources_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyResourceList>* GeoService::Stub::AsyncGetGeographyResourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::model::GeographyResourceList>::Create(channel_.get(), cq, rpcmethod_GetGeographyResources_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyResourceList>* GeoService::Stub::PrepareAsyncGetGeographyResourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::model::GeographyResourceList>::Create(channel_.get(), cq, rpcmethod_GetGeographyResources_, context, request, false);
}

::grpc::Status GeoService::Stub::RemoveGeographyResource(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters& request, ::mtm::geo::service::BoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveGeographyResource_, context, request, response);
}

void GeoService::Stub::experimental_async::RemoveGeographyResource(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveGeographyResource_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* GeoService::Stub::AsyncRemoveGeographyResourceRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::BoolResponse>::Create(channel_.get(), cq, rpcmethod_RemoveGeographyResource_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* GeoService::Stub::PrepareAsyncRemoveGeographyResourceRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mtm::geo::service::BoolResponse>::Create(channel_.get(), cq, rpcmethod_RemoveGeographyResource_, context, request, false);
}

::grpc::Status GeoService::Stub::Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void GeoService::Stub::experimental_async::Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeoService::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Ping_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeoService::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Ping_, context, request, false);
}

GeoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GeoService::Service, ::google::protobuf::Empty, ::mtm::geo::messages::GeoMessage>(
          std::mem_fn(&GeoService::Service::Subscribe), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::google::protobuf::Empty, ::mtm::geo::model::GeographyList>(
          std::mem_fn(&GeoService::Service::GetGeographies), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::Uuid, ::mtm::geo::service::GeographyResponse>(
          std::mem_fn(&GeoService::Service::GetGeography), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::AddGeographyParameters, ::mtm::Uuid>(
          std::mem_fn(&GeoService::Service::AddGeography), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::RemoveGeographyParameters, ::mtm::geo::service::BoolResponse>(
          std::mem_fn(&GeoService::Service::RemoveGeography), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::RemoveGeographiesParameters, ::mtm::geo::service::BoolResponse>(
          std::mem_fn(&GeoService::Service::RemoveGeographies), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::EditParameters, ::mtm::geo::service::EditResponse>(
          std::mem_fn(&GeoService::Service::Edit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::CommitParameters, ::google::protobuf::Empty>(
          std::mem_fn(&GeoService::Service::Commit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::RollbackParameters, ::google::protobuf::Empty>(
          std::mem_fn(&GeoService::Service::Rollback), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::Rollback2Parameters, ::google::protobuf::Empty>(
          std::mem_fn(&GeoService::Service::Rollback2), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::Rollback3Parameters, ::google::protobuf::Empty>(
          std::mem_fn(&GeoService::Service::Rollback3), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::google::protobuf::Empty, ::mtm::geo::model::VisualList>(
          std::mem_fn(&GeoService::Service::GetVisuals), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::GetVisualsForUserParameters, ::mtm::geo::model::VisualList>(
          std::mem_fn(&GeoService::Service::GetVisualsForUser), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::AddUserVisualParameters, ::mtm::geo::service::BoolResponse>(
          std::mem_fn(&GeoService::Service::AddUserVisual), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::AddUserVisual2Parameters, ::mtm::geo::service::BoolResponse>(
          std::mem_fn(&GeoService::Service::AddUserVisual2), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::RemoveUserVisualParameters, ::mtm::geo::service::BoolResponse>(
          std::mem_fn(&GeoService::Service::RemoveUserVisual), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::GetVisualParameters, ::mtm::geo::service::VisualResponse>(
          std::mem_fn(&GeoService::Service::GetVisual), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::AddBitmapParameters, ::mtm::Uuid>(
          std::mem_fn(&GeoService::Service::AddBitmap), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::GetBitmapParameters, ::mtm::geo::service::GetBitmapResponse>(
          std::mem_fn(&GeoService::Service::GetBitmap), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::google::protobuf::Empty, ::mtm::geo::model::GeographyResourceList>(
          std::mem_fn(&GeoService::Service::GetGeographyResources), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::mtm::geo::service::RemoveGeographyResourceParameters, ::mtm::geo::service::BoolResponse>(
          std::mem_fn(&GeoService::Service::RemoveGeographyResource), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeoService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeoService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&GeoService::Service::Ping), this)));
}

GeoService::Service::~Service() {
}

::grpc::Status GeoService::Service::Subscribe(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::mtm::geo::messages::GeoMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::GetGeographies(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::GetGeography(::grpc::ServerContext* context, const ::mtm::Uuid* request, ::mtm::geo::service::GeographyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::AddGeography(::grpc::ServerContext* context, const ::mtm::geo::service::AddGeographyParameters* request, ::mtm::Uuid* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::RemoveGeography(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographyParameters* request, ::mtm::geo::service::BoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::RemoveGeographies(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographiesParameters* request, ::mtm::geo::service::BoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::Edit(::grpc::ServerContext* context, const ::mtm::geo::service::EditParameters* request, ::mtm::geo::service::EditResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::Commit(::grpc::ServerContext* context, const ::mtm::geo::service::CommitParameters* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::Rollback(::grpc::ServerContext* context, const ::mtm::geo::service::RollbackParameters* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::Rollback2(::grpc::ServerContext* context, const ::mtm::geo::service::Rollback2Parameters* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::Rollback3(::grpc::ServerContext* context, const ::mtm::geo::service::Rollback3Parameters* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::GetVisuals(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::VisualList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::GetVisualsForUser(::grpc::ServerContext* context, const ::mtm::geo::service::GetVisualsForUserParameters* request, ::mtm::geo::model::VisualList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::AddUserVisual(::grpc::ServerContext* context, const ::mtm::geo::service::AddUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::AddUserVisual2(::grpc::ServerContext* context, const ::mtm::geo::service::AddUserVisual2Parameters* request, ::mtm::geo::service::BoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::RemoveUserVisual(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::GetVisual(::grpc::ServerContext* context, const ::mtm::geo::service::GetVisualParameters* request, ::mtm::geo::service::VisualResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::AddBitmap(::grpc::ServerContext* context, const ::mtm::geo::service::AddBitmapParameters* request, ::mtm::Uuid* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::GetBitmap(::grpc::ServerContext* context, const ::mtm::geo::service::GetBitmapParameters* request, ::mtm::geo::service::GetBitmapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::GetGeographyResources(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyResourceList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::RemoveGeographyResource(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters* request, ::mtm::geo::service::BoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeoService::Service::Ping(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mtm
}  // namespace geo
}  // namespace service

