// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mtm/geo/service/geo_service.proto
#ifndef GRPC_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto__INCLUDED
#define GRPC_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto__INCLUDED

#include "mtm/geo/service/geo_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace mtm {
namespace geo {
namespace service {

// Geo gRPC Service
class GeoService final {
 public:
  static constexpr char const* service_full_name() {
    return "mtm.geo.service.GeoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe to received Notifications when the Geography is updated.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mtm::geo::messages::GeoMessage>> Subscribe(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mtm::geo::messages::GeoMessage>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mtm::geo::messages::GeoMessage>> AsyncSubscribe(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mtm::geo::messages::GeoMessage>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mtm::geo::messages::GeoMessage>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mtm::geo::messages::GeoMessage>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    // Get all Geographies
    virtual ::grpc::Status GetGeographies(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mtm::geo::model::GeographyList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::GeographyList>> AsyncGetGeographies(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::GeographyList>>(AsyncGetGeographiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::GeographyList>> PrepareAsyncGetGeographies(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::GeographyList>>(PrepareAsyncGetGeographiesRaw(context, request, cq));
    }
    // Get specified Geography
    virtual ::grpc::Status GetGeography(::grpc::ClientContext* context, const ::mtm::Uuid& request, ::mtm::geo::service::GeographyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::GeographyResponse>> AsyncGetGeography(::grpc::ClientContext* context, const ::mtm::Uuid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::GeographyResponse>>(AsyncGetGeographyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::GeographyResponse>> PrepareAsyncGetGeography(::grpc::ClientContext* context, const ::mtm::Uuid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::GeographyResponse>>(PrepareAsyncGetGeographyRaw(context, request, cq));
    }
    // Add a Geography, return ID if successful
    virtual ::grpc::Status AddGeography(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters& request, ::mtm::Uuid* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::Uuid>> AsyncAddGeography(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::Uuid>>(AsyncAddGeographyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::Uuid>> PrepareAsyncAddGeography(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::Uuid>>(PrepareAsyncAddGeographyRaw(context, request, cq));
    }
    // Remove an existing Geography from the GeoServer, return true if successful.
    virtual ::grpc::Status RemoveGeography(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters& request, ::mtm::geo::service::BoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>> AsyncRemoveGeography(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>>(AsyncRemoveGeographyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>> PrepareAsyncRemoveGeography(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>>(PrepareAsyncRemoveGeographyRaw(context, request, cq));
    }
    // Remove a list of Geographies, return true if successful.
    virtual ::grpc::Status RemoveGeographies(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters& request, ::mtm::geo::service::BoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>> AsyncRemoveGeographies(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>>(AsyncRemoveGeographiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>> PrepareAsyncRemoveGeographies(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>>(PrepareAsyncRemoveGeographiesRaw(context, request, cq));
    }
    //  Edit/change properties of an GeoObject that already exists in the GeoServer.
    virtual ::grpc::Status Edit(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters& request, ::mtm::geo::service::EditResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::EditResponse>> AsyncEdit(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::EditResponse>>(AsyncEditRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::EditResponse>> PrepareAsyncEdit(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::EditResponse>>(PrepareAsyncEditRaw(context, request, cq));
    }
    // Commit ongoing Edit
    virtual ::grpc::Status Commit(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncCommit(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    // Rollback ongoing Edit, by User ID and object ID
    virtual ::grpc::Status Rollback(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncRollback(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncRollbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncRollback(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncRollbackRaw(context, request, cq));
    }
    // Rollback ongoing Edit, by User ID
    virtual ::grpc::Status Rollback2(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncRollback2(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncRollback2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncRollback2(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncRollback2Raw(context, request, cq));
    }
    // Rollback ongoing Edit, by object ID
    virtual ::grpc::Status Rollback3(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncRollback3(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncRollback3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncRollback3(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncRollback3Raw(context, request, cq));
    }
    // Get all Visuals
    virtual ::grpc::Status GetVisuals(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mtm::geo::model::VisualList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::VisualList>> AsyncGetVisuals(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::VisualList>>(AsyncGetVisualsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::VisualList>> PrepareAsyncGetVisuals(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::VisualList>>(PrepareAsyncGetVisualsRaw(context, request, cq));
    }
    // Get all Visuals for specified User
    virtual ::grpc::Status GetVisualsForUser(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters& request, ::mtm::geo::model::VisualList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::VisualList>> AsyncGetVisualsForUser(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::VisualList>>(AsyncGetVisualsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::VisualList>> PrepareAsyncGetVisualsForUser(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::VisualList>>(PrepareAsyncGetVisualsForUserRaw(context, request, cq));
    }
    // Add User Visual
    virtual ::grpc::Status AddUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters& request, ::mtm::geo::service::BoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>> AsyncAddUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>>(AsyncAddUserVisualRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>> PrepareAsyncAddUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>>(PrepareAsyncAddUserVisualRaw(context, request, cq));
    }
    // Add User Visual 2
    virtual ::grpc::Status AddUserVisual2(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters& request, ::mtm::geo::service::BoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>> AsyncAddUserVisual2(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>>(AsyncAddUserVisual2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>> PrepareAsyncAddUserVisual2(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>>(PrepareAsyncAddUserVisual2Raw(context, request, cq));
    }
    // Remove user Visual
    virtual ::grpc::Status RemoveUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters& request, ::mtm::geo::service::BoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>> AsyncRemoveUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>>(AsyncRemoveUserVisualRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>> PrepareAsyncRemoveUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>>(PrepareAsyncRemoveUserVisualRaw(context, request, cq));
    }
    // Get Visual matching ID and User ID
    virtual ::grpc::Status GetVisual(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters& request, ::mtm::geo::service::VisualResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::VisualResponse>> AsyncGetVisual(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::VisualResponse>>(AsyncGetVisualRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::VisualResponse>> PrepareAsyncGetVisual(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::VisualResponse>>(PrepareAsyncGetVisualRaw(context, request, cq));
    }
    // Add a Bitmap
    virtual ::grpc::Status AddBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters& request, ::mtm::Uuid* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::Uuid>> AsyncAddBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::Uuid>>(AsyncAddBitmapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::Uuid>> PrepareAsyncAddBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::Uuid>>(PrepareAsyncAddBitmapRaw(context, request, cq));
    }
    // Add a Bitmap
    virtual ::grpc::Status GetBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters& request, ::mtm::geo::service::GetBitmapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::GetBitmapResponse>> AsyncGetBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::GetBitmapResponse>>(AsyncGetBitmapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::GetBitmapResponse>> PrepareAsyncGetBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::GetBitmapResponse>>(PrepareAsyncGetBitmapRaw(context, request, cq));
    }
    // Get all GeographyResources
    virtual ::grpc::Status GetGeographyResources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mtm::geo::model::GeographyResourceList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::GeographyResourceList>> AsyncGetGeographyResources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::GeographyResourceList>>(AsyncGetGeographyResourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::GeographyResourceList>> PrepareAsyncGetGeographyResources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::GeographyResourceList>>(PrepareAsyncGetGeographyResourcesRaw(context, request, cq));
    }
    // Remove GeographyResource
    virtual ::grpc::Status RemoveGeographyResource(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters& request, ::mtm::geo::service::BoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>> AsyncRemoveGeographyResource(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>>(AsyncRemoveGeographyResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>> PrepareAsyncRemoveGeographyResource(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>>(PrepareAsyncRemoveGeographyResourceRaw(context, request, cq));
    }
    // Ping
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncPing(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncPing(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncPingRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Subscribe to received Notifications when the Geography is updated.
      // Get all Geographies
      virtual void GetGeographies(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyList* response, std::function<void(::grpc::Status)>) = 0;
      // Get specified Geography
      virtual void GetGeography(::grpc::ClientContext* context, const ::mtm::Uuid* request, ::mtm::geo::service::GeographyResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Add a Geography, return ID if successful
      virtual void AddGeography(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters* request, ::mtm::Uuid* response, std::function<void(::grpc::Status)>) = 0;
      // Remove an existing Geography from the GeoServer, return true if successful.
      virtual void RemoveGeography(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Remove a list of Geographies, return true if successful.
      virtual void RemoveGeographies(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      //  Edit/change properties of an GeoObject that already exists in the GeoServer.
      virtual void Edit(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters* request, ::mtm::geo::service::EditResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Commit ongoing Edit
      virtual void Commit(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      // Rollback ongoing Edit, by User ID and object ID
      virtual void Rollback(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      // Rollback ongoing Edit, by User ID
      virtual void Rollback2(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      // Rollback ongoing Edit, by object ID
      virtual void Rollback3(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      // Get all Visuals
      virtual void GetVisuals(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::VisualList* response, std::function<void(::grpc::Status)>) = 0;
      // Get all Visuals for specified User
      virtual void GetVisualsForUser(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters* request, ::mtm::geo::model::VisualList* response, std::function<void(::grpc::Status)>) = 0;
      // Add User Visual
      virtual void AddUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Add User Visual 2
      virtual void AddUserVisual2(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Remove user Visual
      virtual void RemoveUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get Visual matching ID and User ID
      virtual void GetVisual(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters* request, ::mtm::geo::service::VisualResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Add a Bitmap
      virtual void AddBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters* request, ::mtm::Uuid* response, std::function<void(::grpc::Status)>) = 0;
      // Add a Bitmap
      virtual void GetBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters* request, ::mtm::geo::service::GetBitmapResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get all GeographyResources
      virtual void GetGeographyResources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyResourceList* response, std::function<void(::grpc::Status)>) = 0;
      // Remove GeographyResource
      virtual void RemoveGeographyResource(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Ping
      virtual void Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::mtm::geo::messages::GeoMessage>* SubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mtm::geo::messages::GeoMessage>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mtm::geo::messages::GeoMessage>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::GeographyList>* AsyncGetGeographiesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::GeographyList>* PrepareAsyncGetGeographiesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::GeographyResponse>* AsyncGetGeographyRaw(::grpc::ClientContext* context, const ::mtm::Uuid& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::GeographyResponse>* PrepareAsyncGetGeographyRaw(::grpc::ClientContext* context, const ::mtm::Uuid& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::Uuid>* AsyncAddGeographyRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::Uuid>* PrepareAsyncAddGeographyRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>* AsyncRemoveGeographyRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>* PrepareAsyncRemoveGeographyRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>* AsyncRemoveGeographiesRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>* PrepareAsyncRemoveGeographiesRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::EditResponse>* AsyncEditRaw(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::EditResponse>* PrepareAsyncEditRaw(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncCommitRaw(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncRollbackRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncRollback2Raw(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncRollback2Raw(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncRollback3Raw(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncRollback3Raw(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::VisualList>* AsyncGetVisualsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::VisualList>* PrepareAsyncGetVisualsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::VisualList>* AsyncGetVisualsForUserRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::VisualList>* PrepareAsyncGetVisualsForUserRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>* AsyncAddUserVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>* PrepareAsyncAddUserVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>* AsyncAddUserVisual2Raw(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>* PrepareAsyncAddUserVisual2Raw(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>* AsyncRemoveUserVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>* PrepareAsyncRemoveUserVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::VisualResponse>* AsyncGetVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::VisualResponse>* PrepareAsyncGetVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::Uuid>* AsyncAddBitmapRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::Uuid>* PrepareAsyncAddBitmapRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::GetBitmapResponse>* AsyncGetBitmapRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::GetBitmapResponse>* PrepareAsyncGetBitmapRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::GeographyResourceList>* AsyncGetGeographyResourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::model::GeographyResourceList>* PrepareAsyncGetGeographyResourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>* AsyncRemoveGeographyResourceRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mtm::geo::service::BoolResponse>* PrepareAsyncRemoveGeographyResourceRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::mtm::geo::messages::GeoMessage>> Subscribe(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mtm::geo::messages::GeoMessage>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mtm::geo::messages::GeoMessage>> AsyncSubscribe(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mtm::geo::messages::GeoMessage>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mtm::geo::messages::GeoMessage>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mtm::geo::messages::GeoMessage>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    ::grpc::Status GetGeographies(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mtm::geo::model::GeographyList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyList>> AsyncGetGeographies(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyList>>(AsyncGetGeographiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyList>> PrepareAsyncGetGeographies(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyList>>(PrepareAsyncGetGeographiesRaw(context, request, cq));
    }
    ::grpc::Status GetGeography(::grpc::ClientContext* context, const ::mtm::Uuid& request, ::mtm::geo::service::GeographyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GeographyResponse>> AsyncGetGeography(::grpc::ClientContext* context, const ::mtm::Uuid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GeographyResponse>>(AsyncGetGeographyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GeographyResponse>> PrepareAsyncGetGeography(::grpc::ClientContext* context, const ::mtm::Uuid& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GeographyResponse>>(PrepareAsyncGetGeographyRaw(context, request, cq));
    }
    ::grpc::Status AddGeography(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters& request, ::mtm::Uuid* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::Uuid>> AsyncAddGeography(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::Uuid>>(AsyncAddGeographyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::Uuid>> PrepareAsyncAddGeography(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::Uuid>>(PrepareAsyncAddGeographyRaw(context, request, cq));
    }
    ::grpc::Status RemoveGeography(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters& request, ::mtm::geo::service::BoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>> AsyncRemoveGeography(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>>(AsyncRemoveGeographyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>> PrepareAsyncRemoveGeography(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>>(PrepareAsyncRemoveGeographyRaw(context, request, cq));
    }
    ::grpc::Status RemoveGeographies(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters& request, ::mtm::geo::service::BoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>> AsyncRemoveGeographies(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>>(AsyncRemoveGeographiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>> PrepareAsyncRemoveGeographies(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>>(PrepareAsyncRemoveGeographiesRaw(context, request, cq));
    }
    ::grpc::Status Edit(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters& request, ::mtm::geo::service::EditResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::EditResponse>> AsyncEdit(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::EditResponse>>(AsyncEditRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::EditResponse>> PrepareAsyncEdit(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::EditResponse>>(PrepareAsyncEditRaw(context, request, cq));
    }
    ::grpc::Status Commit(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncCommit(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    ::grpc::Status Rollback(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncRollback(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncRollbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncRollback(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncRollbackRaw(context, request, cq));
    }
    ::grpc::Status Rollback2(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncRollback2(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncRollback2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncRollback2(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncRollback2Raw(context, request, cq));
    }
    ::grpc::Status Rollback3(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncRollback3(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncRollback3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncRollback3(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncRollback3Raw(context, request, cq));
    }
    ::grpc::Status GetVisuals(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mtm::geo::model::VisualList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>> AsyncGetVisuals(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>>(AsyncGetVisualsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>> PrepareAsyncGetVisuals(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>>(PrepareAsyncGetVisualsRaw(context, request, cq));
    }
    ::grpc::Status GetVisualsForUser(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters& request, ::mtm::geo::model::VisualList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>> AsyncGetVisualsForUser(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>>(AsyncGetVisualsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>> PrepareAsyncGetVisualsForUser(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>>(PrepareAsyncGetVisualsForUserRaw(context, request, cq));
    }
    ::grpc::Status AddUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters& request, ::mtm::geo::service::BoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>> AsyncAddUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>>(AsyncAddUserVisualRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>> PrepareAsyncAddUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>>(PrepareAsyncAddUserVisualRaw(context, request, cq));
    }
    ::grpc::Status AddUserVisual2(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters& request, ::mtm::geo::service::BoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>> AsyncAddUserVisual2(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>>(AsyncAddUserVisual2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>> PrepareAsyncAddUserVisual2(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>>(PrepareAsyncAddUserVisual2Raw(context, request, cq));
    }
    ::grpc::Status RemoveUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters& request, ::mtm::geo::service::BoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>> AsyncRemoveUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>>(AsyncRemoveUserVisualRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>> PrepareAsyncRemoveUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>>(PrepareAsyncRemoveUserVisualRaw(context, request, cq));
    }
    ::grpc::Status GetVisual(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters& request, ::mtm::geo::service::VisualResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::VisualResponse>> AsyncGetVisual(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::VisualResponse>>(AsyncGetVisualRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::VisualResponse>> PrepareAsyncGetVisual(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::VisualResponse>>(PrepareAsyncGetVisualRaw(context, request, cq));
    }
    ::grpc::Status AddBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters& request, ::mtm::Uuid* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::Uuid>> AsyncAddBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::Uuid>>(AsyncAddBitmapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::Uuid>> PrepareAsyncAddBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::Uuid>>(PrepareAsyncAddBitmapRaw(context, request, cq));
    }
    ::grpc::Status GetBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters& request, ::mtm::geo::service::GetBitmapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GetBitmapResponse>> AsyncGetBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GetBitmapResponse>>(AsyncGetBitmapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GetBitmapResponse>> PrepareAsyncGetBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GetBitmapResponse>>(PrepareAsyncGetBitmapRaw(context, request, cq));
    }
    ::grpc::Status GetGeographyResources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::mtm::geo::model::GeographyResourceList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyResourceList>> AsyncGetGeographyResources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyResourceList>>(AsyncGetGeographyResourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyResourceList>> PrepareAsyncGetGeographyResources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyResourceList>>(PrepareAsyncGetGeographyResourcesRaw(context, request, cq));
    }
    ::grpc::Status RemoveGeographyResource(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters& request, ::mtm::geo::service::BoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>> AsyncRemoveGeographyResource(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>>(AsyncRemoveGeographyResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>> PrepareAsyncRemoveGeographyResource(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>>(PrepareAsyncRemoveGeographyResourceRaw(context, request, cq));
    }
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncPing(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncPing(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncPingRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetGeographies(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyList* response, std::function<void(::grpc::Status)>) override;
      void GetGeography(::grpc::ClientContext* context, const ::mtm::Uuid* request, ::mtm::geo::service::GeographyResponse* response, std::function<void(::grpc::Status)>) override;
      void AddGeography(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters* request, ::mtm::Uuid* response, std::function<void(::grpc::Status)>) override;
      void RemoveGeography(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveGeographies(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)>) override;
      void Edit(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters* request, ::mtm::geo::service::EditResponse* response, std::function<void(::grpc::Status)>) override;
      void Commit(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Rollback(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Rollback2(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Rollback3(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void GetVisuals(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::VisualList* response, std::function<void(::grpc::Status)>) override;
      void GetVisualsForUser(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters* request, ::mtm::geo::model::VisualList* response, std::function<void(::grpc::Status)>) override;
      void AddUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)>) override;
      void AddUserVisual2(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveUserVisual(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)>) override;
      void GetVisual(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters* request, ::mtm::geo::service::VisualResponse* response, std::function<void(::grpc::Status)>) override;
      void AddBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters* request, ::mtm::Uuid* response, std::function<void(::grpc::Status)>) override;
      void GetBitmap(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters* request, ::mtm::geo::service::GetBitmapResponse* response, std::function<void(::grpc::Status)>) override;
      void GetGeographyResources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyResourceList* response, std::function<void(::grpc::Status)>) override;
      void RemoveGeographyResource(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters* request, ::mtm::geo::service::BoolResponse* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::mtm::geo::messages::GeoMessage>* SubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) override;
    ::grpc::ClientAsyncReader< ::mtm::geo::messages::GeoMessage>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mtm::geo::messages::GeoMessage>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyList>* AsyncGetGeographiesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyList>* PrepareAsyncGetGeographiesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GeographyResponse>* AsyncGetGeographyRaw(::grpc::ClientContext* context, const ::mtm::Uuid& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GeographyResponse>* PrepareAsyncGetGeographyRaw(::grpc::ClientContext* context, const ::mtm::Uuid& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::Uuid>* AsyncAddGeographyRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::Uuid>* PrepareAsyncAddGeographyRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddGeographyParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* AsyncRemoveGeographyRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* PrepareAsyncRemoveGeographyRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* AsyncRemoveGeographiesRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* PrepareAsyncRemoveGeographiesRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographiesParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::EditResponse>* AsyncEditRaw(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::EditResponse>* PrepareAsyncEditRaw(::grpc::ClientContext* context, const ::mtm::geo::service::EditParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncCommitRaw(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::mtm::geo::service::CommitParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncRollbackRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncRollbackRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RollbackParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncRollback2Raw(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncRollback2Raw(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback2Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncRollback3Raw(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncRollback3Raw(::grpc::ClientContext* context, const ::mtm::geo::service::Rollback3Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>* AsyncGetVisualsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>* PrepareAsyncGetVisualsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>* AsyncGetVisualsForUserRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::VisualList>* PrepareAsyncGetVisualsForUserRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualsForUserParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* AsyncAddUserVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* PrepareAsyncAddUserVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisualParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* AsyncAddUserVisual2Raw(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* PrepareAsyncAddUserVisual2Raw(::grpc::ClientContext* context, const ::mtm::geo::service::AddUserVisual2Parameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* AsyncRemoveUserVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* PrepareAsyncRemoveUserVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveUserVisualParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::VisualResponse>* AsyncGetVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::VisualResponse>* PrepareAsyncGetVisualRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetVisualParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::Uuid>* AsyncAddBitmapRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::Uuid>* PrepareAsyncAddBitmapRaw(::grpc::ClientContext* context, const ::mtm::geo::service::AddBitmapParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GetBitmapResponse>* AsyncGetBitmapRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::GetBitmapResponse>* PrepareAsyncGetBitmapRaw(::grpc::ClientContext* context, const ::mtm::geo::service::GetBitmapParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyResourceList>* AsyncGetGeographyResourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::model::GeographyResourceList>* PrepareAsyncGetGeographyResourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* AsyncRemoveGeographyResourceRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mtm::geo::service::BoolResponse>* PrepareAsyncRemoveGeographyResourceRaw(::grpc::ClientContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGeographies_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGeography_;
    const ::grpc::internal::RpcMethod rpcmethod_AddGeography_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveGeography_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveGeographies_;
    const ::grpc::internal::RpcMethod rpcmethod_Edit_;
    const ::grpc::internal::RpcMethod rpcmethod_Commit_;
    const ::grpc::internal::RpcMethod rpcmethod_Rollback_;
    const ::grpc::internal::RpcMethod rpcmethod_Rollback2_;
    const ::grpc::internal::RpcMethod rpcmethod_Rollback3_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVisuals_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVisualsForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_AddUserVisual_;
    const ::grpc::internal::RpcMethod rpcmethod_AddUserVisual2_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveUserVisual_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVisual_;
    const ::grpc::internal::RpcMethod rpcmethod_AddBitmap_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBitmap_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGeographyResources_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveGeographyResource_;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe to received Notifications when the Geography is updated.
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::mtm::geo::messages::GeoMessage>* writer);
    // Get all Geographies
    virtual ::grpc::Status GetGeographies(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyList* response);
    // Get specified Geography
    virtual ::grpc::Status GetGeography(::grpc::ServerContext* context, const ::mtm::Uuid* request, ::mtm::geo::service::GeographyResponse* response);
    // Add a Geography, return ID if successful
    virtual ::grpc::Status AddGeography(::grpc::ServerContext* context, const ::mtm::geo::service::AddGeographyParameters* request, ::mtm::Uuid* response);
    // Remove an existing Geography from the GeoServer, return true if successful.
    virtual ::grpc::Status RemoveGeography(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographyParameters* request, ::mtm::geo::service::BoolResponse* response);
    // Remove a list of Geographies, return true if successful.
    virtual ::grpc::Status RemoveGeographies(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographiesParameters* request, ::mtm::geo::service::BoolResponse* response);
    //  Edit/change properties of an GeoObject that already exists in the GeoServer.
    virtual ::grpc::Status Edit(::grpc::ServerContext* context, const ::mtm::geo::service::EditParameters* request, ::mtm::geo::service::EditResponse* response);
    // Commit ongoing Edit
    virtual ::grpc::Status Commit(::grpc::ServerContext* context, const ::mtm::geo::service::CommitParameters* request, ::google::protobuf::Empty* response);
    // Rollback ongoing Edit, by User ID and object ID
    virtual ::grpc::Status Rollback(::grpc::ServerContext* context, const ::mtm::geo::service::RollbackParameters* request, ::google::protobuf::Empty* response);
    // Rollback ongoing Edit, by User ID
    virtual ::grpc::Status Rollback2(::grpc::ServerContext* context, const ::mtm::geo::service::Rollback2Parameters* request, ::google::protobuf::Empty* response);
    // Rollback ongoing Edit, by object ID
    virtual ::grpc::Status Rollback3(::grpc::ServerContext* context, const ::mtm::geo::service::Rollback3Parameters* request, ::google::protobuf::Empty* response);
    // Get all Visuals
    virtual ::grpc::Status GetVisuals(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::VisualList* response);
    // Get all Visuals for specified User
    virtual ::grpc::Status GetVisualsForUser(::grpc::ServerContext* context, const ::mtm::geo::service::GetVisualsForUserParameters* request, ::mtm::geo::model::VisualList* response);
    // Add User Visual
    virtual ::grpc::Status AddUserVisual(::grpc::ServerContext* context, const ::mtm::geo::service::AddUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response);
    // Add User Visual 2
    virtual ::grpc::Status AddUserVisual2(::grpc::ServerContext* context, const ::mtm::geo::service::AddUserVisual2Parameters* request, ::mtm::geo::service::BoolResponse* response);
    // Remove user Visual
    virtual ::grpc::Status RemoveUserVisual(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response);
    // Get Visual matching ID and User ID
    virtual ::grpc::Status GetVisual(::grpc::ServerContext* context, const ::mtm::geo::service::GetVisualParameters* request, ::mtm::geo::service::VisualResponse* response);
    // Add a Bitmap
    virtual ::grpc::Status AddBitmap(::grpc::ServerContext* context, const ::mtm::geo::service::AddBitmapParameters* request, ::mtm::Uuid* response);
    // Add a Bitmap
    virtual ::grpc::Status GetBitmap(::grpc::ServerContext* context, const ::mtm::geo::service::GetBitmapParameters* request, ::mtm::geo::service::GetBitmapResponse* response);
    // Get all GeographyResources
    virtual ::grpc::Status GetGeographyResources(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyResourceList* response);
    // Remove GeographyResource
    virtual ::grpc::Status RemoveGeographyResource(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters* request, ::mtm::geo::service::BoolResponse* response);
    // Ping
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::mtm::geo::messages::GeoMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncWriter< ::mtm::geo::messages::GeoMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGeographies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetGeographies() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetGeographies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGeographies(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGeographies(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::model::GeographyList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGeography : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetGeography() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetGeography() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGeography(::grpc::ServerContext* context, const ::mtm::Uuid* request, ::mtm::geo::service::GeographyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGeography(::grpc::ServerContext* context, ::mtm::Uuid* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::service::GeographyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddGeography : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddGeography() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AddGeography() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGeography(::grpc::ServerContext* context, const ::mtm::geo::service::AddGeographyParameters* request, ::mtm::Uuid* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddGeography(::grpc::ServerContext* context, ::mtm::geo::service::AddGeographyParameters* request, ::grpc::ServerAsyncResponseWriter< ::mtm::Uuid>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveGeography : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveGeography() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RemoveGeography() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGeography(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographyParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveGeography(::grpc::ServerContext* context, ::mtm::geo::service::RemoveGeographyParameters* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::service::BoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveGeographies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveGeographies() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RemoveGeographies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGeographies(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographiesParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveGeographies(::grpc::ServerContext* context, ::mtm::geo::service::RemoveGeographiesParameters* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::service::BoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Edit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Edit() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Edit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Edit(::grpc::ServerContext* context, const ::mtm::geo::service::EditParameters* request, ::mtm::geo::service::EditResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEdit(::grpc::ServerContext* context, ::mtm::geo::service::EditParameters* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::service::EditResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Commit() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::mtm::geo::service::CommitParameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommit(::grpc::ServerContext* context, ::mtm::geo::service::CommitParameters* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Rollback() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::mtm::geo::service::RollbackParameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollback(::grpc::ServerContext* context, ::mtm::geo::service::RollbackParameters* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rollback2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Rollback2() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Rollback2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback2(::grpc::ServerContext* context, const ::mtm::geo::service::Rollback2Parameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollback2(::grpc::ServerContext* context, ::mtm::geo::service::Rollback2Parameters* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rollback3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Rollback3() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_Rollback3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback3(::grpc::ServerContext* context, const ::mtm::geo::service::Rollback3Parameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollback3(::grpc::ServerContext* context, ::mtm::geo::service::Rollback3Parameters* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVisuals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetVisuals() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetVisuals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVisuals(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::VisualList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVisuals(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::model::VisualList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVisualsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetVisualsForUser() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetVisualsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVisualsForUser(::grpc::ServerContext* context, const ::mtm::geo::service::GetVisualsForUserParameters* request, ::mtm::geo::model::VisualList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVisualsForUser(::grpc::ServerContext* context, ::mtm::geo::service::GetVisualsForUserParameters* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::model::VisualList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddUserVisual : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddUserVisual() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_AddUserVisual() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUserVisual(::grpc::ServerContext* context, const ::mtm::geo::service::AddUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUserVisual(::grpc::ServerContext* context, ::mtm::geo::service::AddUserVisualParameters* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::service::BoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddUserVisual2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddUserVisual2() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_AddUserVisual2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUserVisual2(::grpc::ServerContext* context, const ::mtm::geo::service::AddUserVisual2Parameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUserVisual2(::grpc::ServerContext* context, ::mtm::geo::service::AddUserVisual2Parameters* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::service::BoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveUserVisual : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveUserVisual() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_RemoveUserVisual() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveUserVisual(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveUserVisual(::grpc::ServerContext* context, ::mtm::geo::service::RemoveUserVisualParameters* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::service::BoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVisual : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetVisual() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetVisual() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVisual(::grpc::ServerContext* context, const ::mtm::geo::service::GetVisualParameters* request, ::mtm::geo::service::VisualResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVisual(::grpc::ServerContext* context, ::mtm::geo::service::GetVisualParameters* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::service::VisualResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddBitmap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddBitmap() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_AddBitmap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBitmap(::grpc::ServerContext* context, const ::mtm::geo::service::AddBitmapParameters* request, ::mtm::Uuid* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddBitmap(::grpc::ServerContext* context, ::mtm::geo::service::AddBitmapParameters* request, ::grpc::ServerAsyncResponseWriter< ::mtm::Uuid>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBitmap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBitmap() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetBitmap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBitmap(::grpc::ServerContext* context, const ::mtm::geo::service::GetBitmapParameters* request, ::mtm::geo::service::GetBitmapResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBitmap(::grpc::ServerContext* context, ::mtm::geo::service::GetBitmapParameters* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::service::GetBitmapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGeographyResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetGeographyResources() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_GetGeographyResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGeographyResources(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyResourceList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGeographyResources(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::model::GeographyResourceList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveGeographyResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveGeographyResource() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_RemoveGeographyResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGeographyResource(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveGeographyResource(::grpc::ServerContext* context, ::mtm::geo::service::RemoveGeographyResourceParameters* request, ::grpc::ServerAsyncResponseWriter< ::mtm::geo::service::BoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<WithAsyncMethod_GetGeographies<WithAsyncMethod_GetGeography<WithAsyncMethod_AddGeography<WithAsyncMethod_RemoveGeography<WithAsyncMethod_RemoveGeographies<WithAsyncMethod_Edit<WithAsyncMethod_Commit<WithAsyncMethod_Rollback<WithAsyncMethod_Rollback2<WithAsyncMethod_Rollback3<WithAsyncMethod_GetVisuals<WithAsyncMethod_GetVisualsForUser<WithAsyncMethod_AddUserVisual<WithAsyncMethod_AddUserVisual2<WithAsyncMethod_RemoveUserVisual<WithAsyncMethod_GetVisual<WithAsyncMethod_AddBitmap<WithAsyncMethod_GetBitmap<WithAsyncMethod_GetGeographyResources<WithAsyncMethod_RemoveGeographyResource<WithAsyncMethod_Ping<Service > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::mtm::geo::messages::GeoMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGeographies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetGeographies() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetGeographies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGeographies(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGeography : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetGeography() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetGeography() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGeography(::grpc::ServerContext* context, const ::mtm::Uuid* request, ::mtm::geo::service::GeographyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddGeography : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddGeography() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AddGeography() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGeography(::grpc::ServerContext* context, const ::mtm::geo::service::AddGeographyParameters* request, ::mtm::Uuid* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveGeography : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveGeography() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RemoveGeography() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGeography(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographyParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveGeographies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveGeographies() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RemoveGeographies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGeographies(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographiesParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Edit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Edit() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Edit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Edit(::grpc::ServerContext* context, const ::mtm::geo::service::EditParameters* request, ::mtm::geo::service::EditResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Commit() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::mtm::geo::service::CommitParameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Rollback() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::mtm::geo::service::RollbackParameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rollback2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Rollback2() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Rollback2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback2(::grpc::ServerContext* context, const ::mtm::geo::service::Rollback2Parameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rollback3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Rollback3() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_Rollback3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback3(::grpc::ServerContext* context, const ::mtm::geo::service::Rollback3Parameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVisuals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetVisuals() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetVisuals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVisuals(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::VisualList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVisualsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetVisualsForUser() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetVisualsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVisualsForUser(::grpc::ServerContext* context, const ::mtm::geo::service::GetVisualsForUserParameters* request, ::mtm::geo::model::VisualList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddUserVisual : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddUserVisual() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_AddUserVisual() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUserVisual(::grpc::ServerContext* context, const ::mtm::geo::service::AddUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddUserVisual2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddUserVisual2() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_AddUserVisual2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUserVisual2(::grpc::ServerContext* context, const ::mtm::geo::service::AddUserVisual2Parameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveUserVisual : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveUserVisual() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_RemoveUserVisual() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveUserVisual(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVisual : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetVisual() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetVisual() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVisual(::grpc::ServerContext* context, const ::mtm::geo::service::GetVisualParameters* request, ::mtm::geo::service::VisualResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddBitmap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddBitmap() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_AddBitmap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBitmap(::grpc::ServerContext* context, const ::mtm::geo::service::AddBitmapParameters* request, ::mtm::Uuid* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBitmap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBitmap() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetBitmap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBitmap(::grpc::ServerContext* context, const ::mtm::geo::service::GetBitmapParameters* request, ::mtm::geo::service::GetBitmapResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGeographyResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetGeographyResources() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_GetGeographyResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGeographyResources(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyResourceList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveGeographyResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveGeographyResource() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_RemoveGeographyResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGeographyResource(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::mtm::geo::messages::GeoMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGeographies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetGeographies() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetGeographies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGeographies(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGeographies(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGeography : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetGeography() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetGeography() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGeography(::grpc::ServerContext* context, const ::mtm::Uuid* request, ::mtm::geo::service::GeographyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGeography(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddGeography : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddGeography() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AddGeography() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddGeography(::grpc::ServerContext* context, const ::mtm::geo::service::AddGeographyParameters* request, ::mtm::Uuid* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddGeography(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveGeography : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RemoveGeography() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RemoveGeography() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGeography(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographyParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveGeography(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveGeographies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RemoveGeographies() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RemoveGeographies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGeographies(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographiesParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveGeographies(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Edit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Edit() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Edit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Edit(::grpc::ServerContext* context, const ::mtm::geo::service::EditParameters* request, ::mtm::geo::service::EditResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEdit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Commit() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::mtm::geo::service::CommitParameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Rollback() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::mtm::geo::service::RollbackParameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rollback2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Rollback2() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Rollback2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback2(::grpc::ServerContext* context, const ::mtm::geo::service::Rollback2Parameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollback2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rollback3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Rollback3() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_Rollback3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rollback3(::grpc::ServerContext* context, const ::mtm::geo::service::Rollback3Parameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollback3(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVisuals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetVisuals() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetVisuals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVisuals(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::VisualList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVisuals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVisualsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetVisualsForUser() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetVisualsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVisualsForUser(::grpc::ServerContext* context, const ::mtm::geo::service::GetVisualsForUserParameters* request, ::mtm::geo::model::VisualList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVisualsForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddUserVisual : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddUserVisual() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_AddUserVisual() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUserVisual(::grpc::ServerContext* context, const ::mtm::geo::service::AddUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUserVisual(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddUserVisual2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddUserVisual2() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_AddUserVisual2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUserVisual2(::grpc::ServerContext* context, const ::mtm::geo::service::AddUserVisual2Parameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUserVisual2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveUserVisual : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RemoveUserVisual() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_RemoveUserVisual() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveUserVisual(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveUserVisual(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVisual : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetVisual() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetVisual() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVisual(::grpc::ServerContext* context, const ::mtm::geo::service::GetVisualParameters* request, ::mtm::geo::service::VisualResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVisual(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddBitmap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddBitmap() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_AddBitmap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBitmap(::grpc::ServerContext* context, const ::mtm::geo::service::AddBitmapParameters* request, ::mtm::Uuid* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddBitmap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBitmap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetBitmap() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_GetBitmap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBitmap(::grpc::ServerContext* context, const ::mtm::geo::service::GetBitmapParameters* request, ::mtm::geo::service::GetBitmapResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBitmap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGeographyResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetGeographyResources() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_GetGeographyResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGeographyResources(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyResourceList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGeographyResources(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveGeographyResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RemoveGeographyResource() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_RemoveGeographyResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveGeographyResource(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveGeographyResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGeographies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetGeographies() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::mtm::geo::model::GeographyList>(std::bind(&WithStreamedUnaryMethod_GetGeographies<BaseClass>::StreamedGetGeographies, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetGeographies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGeographies(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGeographies(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::mtm::geo::model::GeographyList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGeography : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetGeography() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::Uuid, ::mtm::geo::service::GeographyResponse>(std::bind(&WithStreamedUnaryMethod_GetGeography<BaseClass>::StreamedGetGeography, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetGeography() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGeography(::grpc::ServerContext* context, const ::mtm::Uuid* request, ::mtm::geo::service::GeographyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGeography(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::Uuid,::mtm::geo::service::GeographyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddGeography : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddGeography() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::AddGeographyParameters, ::mtm::Uuid>(std::bind(&WithStreamedUnaryMethod_AddGeography<BaseClass>::StreamedAddGeography, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddGeography() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddGeography(::grpc::ServerContext* context, const ::mtm::geo::service::AddGeographyParameters* request, ::mtm::Uuid* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddGeography(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::AddGeographyParameters,::mtm::Uuid>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveGeography : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RemoveGeography() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::RemoveGeographyParameters, ::mtm::geo::service::BoolResponse>(std::bind(&WithStreamedUnaryMethod_RemoveGeography<BaseClass>::StreamedRemoveGeography, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveGeography() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveGeography(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographyParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveGeography(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::RemoveGeographyParameters,::mtm::geo::service::BoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveGeographies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RemoveGeographies() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::RemoveGeographiesParameters, ::mtm::geo::service::BoolResponse>(std::bind(&WithStreamedUnaryMethod_RemoveGeographies<BaseClass>::StreamedRemoveGeographies, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveGeographies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveGeographies(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographiesParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveGeographies(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::RemoveGeographiesParameters,::mtm::geo::service::BoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Edit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Edit() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::EditParameters, ::mtm::geo::service::EditResponse>(std::bind(&WithStreamedUnaryMethod_Edit<BaseClass>::StreamedEdit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Edit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Edit(::grpc::ServerContext* context, const ::mtm::geo::service::EditParameters* request, ::mtm::geo::service::EditResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEdit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::EditParameters,::mtm::geo::service::EditResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Commit() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::CommitParameters, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_Commit<BaseClass>::StreamedCommit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Commit(::grpc::ServerContext* context, const ::mtm::geo::service::CommitParameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::CommitParameters,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rollback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Rollback() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::RollbackParameters, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_Rollback<BaseClass>::StreamedRollback, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Rollback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rollback(::grpc::ServerContext* context, const ::mtm::geo::service::RollbackParameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRollback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::RollbackParameters,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rollback2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Rollback2() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::Rollback2Parameters, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_Rollback2<BaseClass>::StreamedRollback2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Rollback2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rollback2(::grpc::ServerContext* context, const ::mtm::geo::service::Rollback2Parameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRollback2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::Rollback2Parameters,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rollback3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Rollback3() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::Rollback3Parameters, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_Rollback3<BaseClass>::StreamedRollback3, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Rollback3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rollback3(::grpc::ServerContext* context, const ::mtm::geo::service::Rollback3Parameters* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRollback3(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::Rollback3Parameters,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVisuals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetVisuals() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::mtm::geo::model::VisualList>(std::bind(&WithStreamedUnaryMethod_GetVisuals<BaseClass>::StreamedGetVisuals, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetVisuals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVisuals(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::VisualList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVisuals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::mtm::geo::model::VisualList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVisualsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetVisualsForUser() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::GetVisualsForUserParameters, ::mtm::geo::model::VisualList>(std::bind(&WithStreamedUnaryMethod_GetVisualsForUser<BaseClass>::StreamedGetVisualsForUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetVisualsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVisualsForUser(::grpc::ServerContext* context, const ::mtm::geo::service::GetVisualsForUserParameters* request, ::mtm::geo::model::VisualList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVisualsForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::GetVisualsForUserParameters,::mtm::geo::model::VisualList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddUserVisual : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddUserVisual() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::AddUserVisualParameters, ::mtm::geo::service::BoolResponse>(std::bind(&WithStreamedUnaryMethod_AddUserVisual<BaseClass>::StreamedAddUserVisual, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddUserVisual() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddUserVisual(::grpc::ServerContext* context, const ::mtm::geo::service::AddUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddUserVisual(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::AddUserVisualParameters,::mtm::geo::service::BoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddUserVisual2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddUserVisual2() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::AddUserVisual2Parameters, ::mtm::geo::service::BoolResponse>(std::bind(&WithStreamedUnaryMethod_AddUserVisual2<BaseClass>::StreamedAddUserVisual2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddUserVisual2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddUserVisual2(::grpc::ServerContext* context, const ::mtm::geo::service::AddUserVisual2Parameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddUserVisual2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::AddUserVisual2Parameters,::mtm::geo::service::BoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveUserVisual : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RemoveUserVisual() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::RemoveUserVisualParameters, ::mtm::geo::service::BoolResponse>(std::bind(&WithStreamedUnaryMethod_RemoveUserVisual<BaseClass>::StreamedRemoveUserVisual, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveUserVisual() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveUserVisual(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveUserVisualParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveUserVisual(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::RemoveUserVisualParameters,::mtm::geo::service::BoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVisual : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetVisual() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::GetVisualParameters, ::mtm::geo::service::VisualResponse>(std::bind(&WithStreamedUnaryMethod_GetVisual<BaseClass>::StreamedGetVisual, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetVisual() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVisual(::grpc::ServerContext* context, const ::mtm::geo::service::GetVisualParameters* request, ::mtm::geo::service::VisualResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVisual(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::GetVisualParameters,::mtm::geo::service::VisualResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddBitmap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddBitmap() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::AddBitmapParameters, ::mtm::Uuid>(std::bind(&WithStreamedUnaryMethod_AddBitmap<BaseClass>::StreamedAddBitmap, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddBitmap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddBitmap(::grpc::ServerContext* context, const ::mtm::geo::service::AddBitmapParameters* request, ::mtm::Uuid* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddBitmap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::AddBitmapParameters,::mtm::Uuid>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBitmap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBitmap() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::GetBitmapParameters, ::mtm::geo::service::GetBitmapResponse>(std::bind(&WithStreamedUnaryMethod_GetBitmap<BaseClass>::StreamedGetBitmap, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBitmap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBitmap(::grpc::ServerContext* context, const ::mtm::geo::service::GetBitmapParameters* request, ::mtm::geo::service::GetBitmapResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBitmap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::GetBitmapParameters,::mtm::geo::service::GetBitmapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGeographyResources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetGeographyResources() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::mtm::geo::model::GeographyResourceList>(std::bind(&WithStreamedUnaryMethod_GetGeographyResources<BaseClass>::StreamedGetGeographyResources, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetGeographyResources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGeographyResources(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::mtm::geo::model::GeographyResourceList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGeographyResources(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::mtm::geo::model::GeographyResourceList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveGeographyResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RemoveGeographyResource() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler< ::mtm::geo::service::RemoveGeographyResourceParameters, ::mtm::geo::service::BoolResponse>(std::bind(&WithStreamedUnaryMethod_RemoveGeographyResource<BaseClass>::StreamedRemoveGeographyResource, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveGeographyResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveGeographyResource(::grpc::ServerContext* context, const ::mtm::geo::service::RemoveGeographyResourceParameters* request, ::mtm::geo::service::BoolResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveGeographyResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mtm::geo::service::RemoveGeographyResourceParameters,::mtm::geo::service::BoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_Ping<BaseClass>::StreamedPing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetGeographies<WithStreamedUnaryMethod_GetGeography<WithStreamedUnaryMethod_AddGeography<WithStreamedUnaryMethod_RemoveGeography<WithStreamedUnaryMethod_RemoveGeographies<WithStreamedUnaryMethod_Edit<WithStreamedUnaryMethod_Commit<WithStreamedUnaryMethod_Rollback<WithStreamedUnaryMethod_Rollback2<WithStreamedUnaryMethod_Rollback3<WithStreamedUnaryMethod_GetVisuals<WithStreamedUnaryMethod_GetVisualsForUser<WithStreamedUnaryMethod_AddUserVisual<WithStreamedUnaryMethod_AddUserVisual2<WithStreamedUnaryMethod_RemoveUserVisual<WithStreamedUnaryMethod_GetVisual<WithStreamedUnaryMethod_AddBitmap<WithStreamedUnaryMethod_GetBitmap<WithStreamedUnaryMethod_GetGeographyResources<WithStreamedUnaryMethod_RemoveGeographyResource<WithStreamedUnaryMethod_Ping<Service > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::google::protobuf::Empty, ::mtm::geo::messages::GeoMessage>(std::bind(&WithSplitStreamingMethod_Subscribe<BaseClass>::StreamedSubscribe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::mtm::geo::messages::GeoMessage>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::protobuf::Empty,::mtm::geo::messages::GeoMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<WithStreamedUnaryMethod_GetGeographies<WithStreamedUnaryMethod_GetGeography<WithStreamedUnaryMethod_AddGeography<WithStreamedUnaryMethod_RemoveGeography<WithStreamedUnaryMethod_RemoveGeographies<WithStreamedUnaryMethod_Edit<WithStreamedUnaryMethod_Commit<WithStreamedUnaryMethod_Rollback<WithStreamedUnaryMethod_Rollback2<WithStreamedUnaryMethod_Rollback3<WithStreamedUnaryMethod_GetVisuals<WithStreamedUnaryMethod_GetVisualsForUser<WithStreamedUnaryMethod_AddUserVisual<WithStreamedUnaryMethod_AddUserVisual2<WithStreamedUnaryMethod_RemoveUserVisual<WithStreamedUnaryMethod_GetVisual<WithStreamedUnaryMethod_AddBitmap<WithStreamedUnaryMethod_GetBitmap<WithStreamedUnaryMethod_GetGeographyResources<WithStreamedUnaryMethod_RemoveGeographyResource<WithStreamedUnaryMethod_Ping<Service > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace service
}  // namespace geo
}  // namespace mtm


#endif  // GRPC_mtm_2fgeo_2fservice_2fgeo_5fservice_2eproto__INCLUDED
