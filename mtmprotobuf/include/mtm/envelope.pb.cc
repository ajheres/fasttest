// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/envelope.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtm/envelope.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mtm {

namespace {

const ::google::protobuf::Descriptor* Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Envelope_reflection_ = NULL;
struct EnvelopeOneofInstance {
  const ::google::protobuf::Any* message_;
  ::google::protobuf::internal::ArenaStringPtr blob_;
}* Envelope_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_mtm_2fenvelope_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mtm_2fenvelope_2eproto() {
  protobuf_AddDesc_mtm_2fenvelope_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mtm/envelope.proto");
  GOOGLE_CHECK(file != NULL);
  Envelope_descriptor_ = file->message_type(0);
  static const int Envelope_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, key_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, key_seq_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, checksum_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, message_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Envelope_default_oneof_instance_, blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, content_),
  };
  Envelope_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Envelope_descriptor_,
      Envelope::default_instance_,
      Envelope_offsets_,
      -1,
      -1,
      -1,
      Envelope_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _oneof_case_[0]),
      sizeof(Envelope),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mtm_2fenvelope_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Envelope_descriptor_, &Envelope::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mtm_2fenvelope_2eproto() {
  delete Envelope::default_instance_;
  delete Envelope_default_oneof_instance_;
  delete Envelope_reflection_;
}

void protobuf_AddDesc_mtm_2fenvelope_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mtm_2fenvelope_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022mtm/envelope.proto\022\003mtm\032\037google/protob"
    "uf/timestamp.proto\032\031google/protobuf/any."
    "proto\"\330\001\n\010Envelope\022(\n\004time\030\001 \001(\0132\032.googl"
    "e.protobuf.Timestamp\022\016\n\006key_id\030\002 \001(\r\022\025\n\r"
    "key_server_id\030\003 \001(\r\022\022\n\nkey_seq_no\030\004 \001(\r\022"
    "\021\n\tsource_id\030\005 \001(\r\022\020\n\010checksum\030\006 \001(\r\022\'\n\007"
    "message\030\007 \001(\0132\024.google.protobuf.AnyH\000\022\016\n"
    "\004blob\030\010 \001(\014H\000B\t\n\007contentb\006proto3", 312);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/envelope.proto", &protobuf_RegisterTypes);
  Envelope::default_instance_ = new Envelope();
  Envelope_default_oneof_instance_ = new EnvelopeOneofInstance();
  Envelope::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtm_2fenvelope_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtm_2fenvelope_2eproto {
  StaticDescriptorInitializer_mtm_2fenvelope_2eproto() {
    protobuf_AddDesc_mtm_2fenvelope_2eproto();
  }
} static_descriptor_initializer_mtm_2fenvelope_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Envelope::kTimeFieldNumber;
const int Envelope::kKeyIdFieldNumber;
const int Envelope::kKeyServerIdFieldNumber;
const int Envelope::kKeySeqNoFieldNumber;
const int Envelope::kSourceIdFieldNumber;
const int Envelope::kChecksumFieldNumber;
const int Envelope::kMessageFieldNumber;
const int Envelope::kBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Envelope::Envelope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.Envelope)
}

void Envelope::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  time_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  Envelope_default_oneof_instance_->message_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
  Envelope_default_oneof_instance_->blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.Envelope)
}

void Envelope::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = NULL;
  key_id_ = 0u;
  key_server_id_ = 0u;
  key_seq_no_ = 0u;
  source_id_ = 0u;
  checksum_ = 0u;
  clear_has_content();
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:mtm.Envelope)
  SharedDtor();
}

void Envelope::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
  if (this != default_instance_) {
    delete time_;
  }
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_descriptor_;
}

const Envelope& Envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fenvelope_2eproto();
  return *default_instance_;
}

Envelope* Envelope::default_instance_ = NULL;

Envelope* Envelope::New(::google::protobuf::Arena* arena) const {
  Envelope* n = new Envelope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Envelope::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:mtm.Envelope)
  switch(content_case()) {
    case kMessage: {
      delete content_.message_;
      break;
    }
    case kBlob: {
      content_.blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.Envelope)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Envelope, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Envelope*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(key_id_, checksum_);
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  clear_content();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.Envelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.Timestamp time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key_id;
        break;
      }

      // optional uint32 key_id = 2;
      case 2: {
        if (tag == 16) {
         parse_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_key_server_id;
        break;
      }

      // optional uint32 key_server_id = 3;
      case 3: {
        if (tag == 24) {
         parse_key_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_server_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_key_seq_no;
        break;
      }

      // optional uint32 key_seq_no = 4;
      case 4: {
        if (tag == 32) {
         parse_key_seq_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_seq_no_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_source_id;
        break;
      }

      // optional uint32 source_id = 5;
      case 5: {
        if (tag == 40) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_checksum;
        break;
      }

      // optional uint32 checksum = 6;
      case 6: {
        if (tag == 48) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_message;
        break;
      }

      // optional .google.protobuf.Any message = 7;
      case 7: {
        if (tag == 58) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_blob;
        break;
      }

      // optional bytes blob = 8;
      case 8: {
        if (tag == 66) {
         parse_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.Envelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.Envelope)
  return false;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.Envelope)
  // optional .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->time_, output);
  }

  // optional uint32 key_id = 2;
  if (this->key_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->key_id(), output);
  }

  // optional uint32 key_server_id = 3;
  if (this->key_server_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->key_server_id(), output);
  }

  // optional uint32 key_seq_no = 4;
  if (this->key_seq_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->key_seq_no(), output);
  }

  // optional uint32 source_id = 5;
  if (this->source_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_id(), output);
  }

  // optional uint32 checksum = 6;
  if (this->checksum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->checksum(), output);
  }

  // optional .google.protobuf.Any message = 7;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *content_.message_, output);
  }

  // optional bytes blob = 8;
  if (has_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->blob(), output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.Envelope)
}

::google::protobuf::uint8* Envelope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.Envelope)
  // optional .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->time_, false, target);
  }

  // optional uint32 key_id = 2;
  if (this->key_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->key_id(), target);
  }

  // optional uint32 key_server_id = 3;
  if (this->key_server_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->key_server_id(), target);
  }

  // optional uint32 key_seq_no = 4;
  if (this->key_seq_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->key_seq_no(), target);
  }

  // optional uint32 source_id = 5;
  if (this->source_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_id(), target);
  }

  // optional uint32 checksum = 6;
  if (this->checksum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->checksum(), target);
  }

  // optional .google.protobuf.Any message = 7;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *content_.message_, false, target);
  }

  // optional bytes blob = 8;
  if (has_blob()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->blob(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.Envelope)
  return target;
}

int Envelope::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.Envelope)
  int total_size = 0;

  // optional .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);
  }

  // optional uint32 key_id = 2;
  if (this->key_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key_id());
  }

  // optional uint32 key_server_id = 3;
  if (this->key_server_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key_server_id());
  }

  // optional uint32 key_seq_no = 4;
  if (this->key_seq_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key_seq_no());
  }

  // optional uint32 source_id = 5;
  if (this->source_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_id());
  }

  // optional uint32 checksum = 6;
  if (this->checksum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checksum());
  }

  switch (content_case()) {
    // optional .google.protobuf.Any message = 7;
    case kMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.message_);
      break;
    }
    // optional bytes blob = 8;
    case kBlob: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->blob());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.Envelope)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Envelope* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Envelope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.Envelope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.Envelope)
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.Envelope)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.content_case()) {
    case kMessage: {
      mutable_message()->::google::protobuf::Any::MergeFrom(from.message());
      break;
    }
    case kBlob: {
      set_blob(from.blob());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (from.has_time()) {
    mutable_time()->::google::protobuf::Timestamp::MergeFrom(from.time());
  }
  if (from.key_id() != 0) {
    set_key_id(from.key_id());
  }
  if (from.key_server_id() != 0) {
    set_key_server_id(from.key_server_id());
  }
  if (from.key_seq_no() != 0) {
    set_key_seq_no(from.key_seq_no());
  }
  if (from.source_id() != 0) {
    set_source_id(from.source_id());
  }
  if (from.checksum() != 0) {
    set_checksum(from.checksum());
  }
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {

  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Envelope::InternalSwap(Envelope* other) {
  std::swap(time_, other->time_);
  std::swap(key_id_, other->key_id_);
  std::swap(key_server_id_, other->key_server_id_);
  std::swap(key_seq_no_, other->key_seq_no_);
  std::swap(source_id_, other->source_id_);
  std::swap(checksum_, other->checksum_);
  std::swap(content_, other->content_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Envelope_descriptor_;
  metadata.reflection = Envelope_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Envelope

// optional .google.protobuf.Timestamp time = 1;
bool Envelope::has_time() const {
  return !_is_default_instance_ && time_ != NULL;
}
void Envelope::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
}
const ::google::protobuf::Timestamp& Envelope::time() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
::google::protobuf::Timestamp* Envelope::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.Envelope.time)
  return time_;
}
::google::protobuf::Timestamp* Envelope::release_time() {
  // @@protoc_insertion_point(field_release:mtm.Envelope.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
void Envelope::set_allocated_time(::google::protobuf::Timestamp* time) {
  delete time_;
  if (time != NULL && time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_time = new ::google::protobuf::Timestamp;
    new_time->CopyFrom(*time);
    time = new_time;
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.Envelope.time)
}

// optional uint32 key_id = 2;
void Envelope::clear_key_id() {
  key_id_ = 0u;
}
 ::google::protobuf::uint32 Envelope::key_id() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.key_id)
  return key_id_;
}
 void Envelope::set_key_id(::google::protobuf::uint32 value) {
  
  key_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.Envelope.key_id)
}

// optional uint32 key_server_id = 3;
void Envelope::clear_key_server_id() {
  key_server_id_ = 0u;
}
 ::google::protobuf::uint32 Envelope::key_server_id() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.key_server_id)
  return key_server_id_;
}
 void Envelope::set_key_server_id(::google::protobuf::uint32 value) {
  
  key_server_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.Envelope.key_server_id)
}

// optional uint32 key_seq_no = 4;
void Envelope::clear_key_seq_no() {
  key_seq_no_ = 0u;
}
 ::google::protobuf::uint32 Envelope::key_seq_no() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.key_seq_no)
  return key_seq_no_;
}
 void Envelope::set_key_seq_no(::google::protobuf::uint32 value) {
  
  key_seq_no_ = value;
  // @@protoc_insertion_point(field_set:mtm.Envelope.key_seq_no)
}

// optional uint32 source_id = 5;
void Envelope::clear_source_id() {
  source_id_ = 0u;
}
 ::google::protobuf::uint32 Envelope::source_id() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.source_id)
  return source_id_;
}
 void Envelope::set_source_id(::google::protobuf::uint32 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.Envelope.source_id)
}

// optional uint32 checksum = 6;
void Envelope::clear_checksum() {
  checksum_ = 0u;
}
 ::google::protobuf::uint32 Envelope::checksum() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.checksum)
  return checksum_;
}
 void Envelope::set_checksum(::google::protobuf::uint32 value) {
  
  checksum_ = value;
  // @@protoc_insertion_point(field_set:mtm.Envelope.checksum)
}

// optional .google.protobuf.Any message = 7;
bool Envelope::has_message() const {
  return content_case() == kMessage;
}
void Envelope::set_has_message() {
  _oneof_case_[0] = kMessage;
}
void Envelope::clear_message() {
  if (has_message()) {
    delete content_.message_;
    clear_has_content();
  }
}
 const ::google::protobuf::Any& Envelope::message() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.message)
  return has_message()
      ? *content_.message_
      : ::google::protobuf::Any::default_instance();
}
::google::protobuf::Any* Envelope::mutable_message() {
  if (!has_message()) {
    clear_content();
    set_has_message();
    content_.message_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:mtm.Envelope.message)
  return content_.message_;
}
::google::protobuf::Any* Envelope::release_message() {
  // @@protoc_insertion_point(field_release:mtm.Envelope.message)
  if (has_message()) {
    clear_has_content();
    ::google::protobuf::Any* temp = content_.message_;
    content_.message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Envelope::set_allocated_message(::google::protobuf::Any* message) {
  clear_content();
  if (message) {
    set_has_message();
    content_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.Envelope.message)
}

// optional bytes blob = 8;
bool Envelope::has_blob() const {
  return content_case() == kBlob;
}
void Envelope::set_has_blob() {
  _oneof_case_[0] = kBlob;
}
void Envelope::clear_blob() {
  if (has_blob()) {
    content_.blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
 const ::std::string& Envelope::blob() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.blob)
  if (has_blob()) {
    return content_.blob_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void Envelope::set_blob(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mtm.Envelope.blob)
  if (!has_blob()) {
    clear_content();
    set_has_blob();
    content_.blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.Envelope.blob)
}
 void Envelope::set_blob(const char* value) {
  if (!has_blob()) {
    clear_content();
    set_has_blob();
    content_.blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.Envelope.blob)
}
 void Envelope::set_blob(const void* value, size_t size) {
  if (!has_blob()) {
    clear_content();
    set_has_blob();
    content_.blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.Envelope.blob)
}
 ::std::string* Envelope::mutable_blob() {
  if (!has_blob()) {
    clear_content();
    set_has_blob();
    content_.blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:mtm.Envelope.blob)
  return content_.blob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Envelope::release_blob() {
  // @@protoc_insertion_point(field_release:mtm.Envelope.blob)
  if (has_blob()) {
    clear_has_content();
    return content_.blob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void Envelope::set_allocated_blob(::std::string* blob) {
  if (!has_blob()) {
    content_.blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_content();
  if (blob != NULL) {
    set_has_blob();
    content_.blob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        blob);
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.Envelope.blob)
}

bool Envelope::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
void Envelope::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
Envelope::ContentCase Envelope::content_case() const {
  return Envelope::ContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mtm

// @@protoc_insertion_point(global_scope)
