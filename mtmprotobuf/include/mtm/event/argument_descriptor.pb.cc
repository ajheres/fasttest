// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/event/argument_descriptor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtm/event/argument_descriptor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mtm {
namespace event {

namespace {

const ::google::protobuf::Descriptor* ArgumentDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArgumentDescriptor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mtm_2fevent_2fargument_5fdescriptor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mtm_2fevent_2fargument_5fdescriptor_2eproto() {
  protobuf_AddDesc_mtm_2fevent_2fargument_5fdescriptor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mtm/event/argument_descriptor.proto");
  GOOGLE_CHECK(file != NULL);
  ArgumentDescriptor_descriptor_ = file->message_type(0);
  static const int ArgumentDescriptor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentDescriptor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentDescriptor, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentDescriptor, optional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentDescriptor, type_url_),
  };
  ArgumentDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArgumentDescriptor_descriptor_,
      ArgumentDescriptor::default_instance_,
      ArgumentDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(ArgumentDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentDescriptor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentDescriptor, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mtm_2fevent_2fargument_5fdescriptor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArgumentDescriptor_descriptor_, &ArgumentDescriptor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mtm_2fevent_2fargument_5fdescriptor_2eproto() {
  delete ArgumentDescriptor::default_instance_;
  delete ArgumentDescriptor_reflection_;
}

void protobuf_AddDesc_mtm_2fevent_2fargument_5fdescriptor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mtm_2fevent_2fargument_5fdescriptor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::mtm::protobuf_AddDesc_mtm_2fcommon_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#mtm/event/argument_descriptor.proto\022\tm"
    "tm.event\032\036google/protobuf/wrappers.proto"
    "\032\026mtm/common_types.proto\"\207\001\n\022ArgumentDes"
    "criptor\022\014\n\004name\030\001 \001(\t\0221\n\013description\030\002 \001"
    "(\0132\034.google.protobuf.StringValue\022\020\n\010opti"
    "onal\030\003 \001(\010\022\036\n\010type_url\030\n \001(\0132\014.mtm.TypeU"
    "rlb\006proto3", 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/event/argument_descriptor.proto", &protobuf_RegisterTypes);
  ArgumentDescriptor::default_instance_ = new ArgumentDescriptor();
  ArgumentDescriptor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtm_2fevent_2fargument_5fdescriptor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtm_2fevent_2fargument_5fdescriptor_2eproto {
  StaticDescriptorInitializer_mtm_2fevent_2fargument_5fdescriptor_2eproto() {
    protobuf_AddDesc_mtm_2fevent_2fargument_5fdescriptor_2eproto();
  }
} static_descriptor_initializer_mtm_2fevent_2fargument_5fdescriptor_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArgumentDescriptor::kNameFieldNumber;
const int ArgumentDescriptor::kDescriptionFieldNumber;
const int ArgumentDescriptor::kOptionalFieldNumber;
const int ArgumentDescriptor::kTypeUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArgumentDescriptor::ArgumentDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.event.ArgumentDescriptor)
}

void ArgumentDescriptor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  description_ = const_cast< ::google::protobuf::StringValue*>(&::google::protobuf::StringValue::default_instance());
  type_url_ = const_cast< ::mtm::TypeUrl*>(&::mtm::TypeUrl::default_instance());
}

ArgumentDescriptor::ArgumentDescriptor(const ArgumentDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.event.ArgumentDescriptor)
}

void ArgumentDescriptor::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = NULL;
  optional_ = false;
  type_url_ = NULL;
}

ArgumentDescriptor::~ArgumentDescriptor() {
  // @@protoc_insertion_point(destructor:mtm.event.ArgumentDescriptor)
  SharedDtor();
}

void ArgumentDescriptor::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete description_;
    delete type_url_;
  }
}

void ArgumentDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArgumentDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArgumentDescriptor_descriptor_;
}

const ArgumentDescriptor& ArgumentDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fevent_2fargument_5fdescriptor_2eproto();
  return *default_instance_;
}

ArgumentDescriptor* ArgumentDescriptor::default_instance_ = NULL;

ArgumentDescriptor* ArgumentDescriptor::New(::google::protobuf::Arena* arena) const {
  ArgumentDescriptor* n = new ArgumentDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArgumentDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.event.ArgumentDescriptor)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && description_ != NULL) delete description_;
  description_ = NULL;
  optional_ = false;
  if (GetArenaNoVirtual() == NULL && type_url_ != NULL) delete type_url_;
  type_url_ = NULL;
}

bool ArgumentDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.event.ArgumentDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mtm.event.ArgumentDescriptor.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional .google.protobuf.StringValue description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_optional;
        break;
      }

      // optional bool optional = 3;
      case 3: {
        if (tag == 24) {
         parse_optional:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optional_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_type_url;
        break;
      }

      // optional .mtm.TypeUrl type_url = 10;
      case 10: {
        if (tag == 82) {
         parse_type_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.event.ArgumentDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.event.ArgumentDescriptor)
  return false;
#undef DO_
}

void ArgumentDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.event.ArgumentDescriptor)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mtm.event.ArgumentDescriptor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .google.protobuf.StringValue description = 2;
  if (this->has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->description_, output);
  }

  // optional bool optional = 3;
  if (this->optional() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->optional(), output);
  }

  // optional .mtm.TypeUrl type_url = 10;
  if (this->has_type_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->type_url_, output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.event.ArgumentDescriptor)
}

::google::protobuf::uint8* ArgumentDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.event.ArgumentDescriptor)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mtm.event.ArgumentDescriptor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .google.protobuf.StringValue description = 2;
  if (this->has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->description_, false, target);
  }

  // optional bool optional = 3;
  if (this->optional() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->optional(), target);
  }

  // optional .mtm.TypeUrl type_url = 10;
  if (this->has_type_url()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->type_url_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.event.ArgumentDescriptor)
  return target;
}

int ArgumentDescriptor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.event.ArgumentDescriptor)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .google.protobuf.StringValue description = 2;
  if (this->has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->description_);
  }

  // optional bool optional = 3;
  if (this->optional() != 0) {
    total_size += 1 + 1;
  }

  // optional .mtm.TypeUrl type_url = 10;
  if (this->has_type_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->type_url_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArgumentDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.event.ArgumentDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ArgumentDescriptor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ArgumentDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.event.ArgumentDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.event.ArgumentDescriptor)
    MergeFrom(*source);
  }
}

void ArgumentDescriptor::MergeFrom(const ArgumentDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.event.ArgumentDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_description()) {
    mutable_description()->::google::protobuf::StringValue::MergeFrom(from.description());
  }
  if (from.optional() != 0) {
    set_optional(from.optional());
  }
  if (from.has_type_url()) {
    mutable_type_url()->::mtm::TypeUrl::MergeFrom(from.type_url());
  }
}

void ArgumentDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.event.ArgumentDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArgumentDescriptor::CopyFrom(const ArgumentDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.event.ArgumentDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgumentDescriptor::IsInitialized() const {

  return true;
}

void ArgumentDescriptor::Swap(ArgumentDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArgumentDescriptor::InternalSwap(ArgumentDescriptor* other) {
  name_.Swap(&other->name_);
  std::swap(description_, other->description_);
  std::swap(optional_, other->optional_);
  std::swap(type_url_, other->type_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArgumentDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArgumentDescriptor_descriptor_;
  metadata.reflection = ArgumentDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArgumentDescriptor

// optional string name = 1;
void ArgumentDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ArgumentDescriptor::name() const {
  // @@protoc_insertion_point(field_get:mtm.event.ArgumentDescriptor.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ArgumentDescriptor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.event.ArgumentDescriptor.name)
}
 void ArgumentDescriptor::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.event.ArgumentDescriptor.name)
}
 void ArgumentDescriptor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.event.ArgumentDescriptor.name)
}
 ::std::string* ArgumentDescriptor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mtm.event.ArgumentDescriptor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ArgumentDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:mtm.event.ArgumentDescriptor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ArgumentDescriptor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mtm.event.ArgumentDescriptor.name)
}

// optional .google.protobuf.StringValue description = 2;
bool ArgumentDescriptor::has_description() const {
  return !_is_default_instance_ && description_ != NULL;
}
void ArgumentDescriptor::clear_description() {
  if (GetArenaNoVirtual() == NULL && description_ != NULL) delete description_;
  description_ = NULL;
}
const ::google::protobuf::StringValue& ArgumentDescriptor::description() const {
  // @@protoc_insertion_point(field_get:mtm.event.ArgumentDescriptor.description)
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
::google::protobuf::StringValue* ArgumentDescriptor::mutable_description() {
  
  if (description_ == NULL) {
    description_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.ArgumentDescriptor.description)
  return description_;
}
::google::protobuf::StringValue* ArgumentDescriptor::release_description() {
  // @@protoc_insertion_point(field_release:mtm.event.ArgumentDescriptor.description)
  
  ::google::protobuf::StringValue* temp = description_;
  description_ = NULL;
  return temp;
}
void ArgumentDescriptor::set_allocated_description(::google::protobuf::StringValue* description) {
  delete description_;
  if (description != NULL && description->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_description = new ::google::protobuf::StringValue;
    new_description->CopyFrom(*description);
    description = new_description;
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.ArgumentDescriptor.description)
}

// optional bool optional = 3;
void ArgumentDescriptor::clear_optional() {
  optional_ = false;
}
 bool ArgumentDescriptor::optional() const {
  // @@protoc_insertion_point(field_get:mtm.event.ArgumentDescriptor.optional)
  return optional_;
}
 void ArgumentDescriptor::set_optional(bool value) {
  
  optional_ = value;
  // @@protoc_insertion_point(field_set:mtm.event.ArgumentDescriptor.optional)
}

// optional .mtm.TypeUrl type_url = 10;
bool ArgumentDescriptor::has_type_url() const {
  return !_is_default_instance_ && type_url_ != NULL;
}
void ArgumentDescriptor::clear_type_url() {
  if (GetArenaNoVirtual() == NULL && type_url_ != NULL) delete type_url_;
  type_url_ = NULL;
}
const ::mtm::TypeUrl& ArgumentDescriptor::type_url() const {
  // @@protoc_insertion_point(field_get:mtm.event.ArgumentDescriptor.type_url)
  return type_url_ != NULL ? *type_url_ : *default_instance_->type_url_;
}
::mtm::TypeUrl* ArgumentDescriptor::mutable_type_url() {
  
  if (type_url_ == NULL) {
    type_url_ = new ::mtm::TypeUrl;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.ArgumentDescriptor.type_url)
  return type_url_;
}
::mtm::TypeUrl* ArgumentDescriptor::release_type_url() {
  // @@protoc_insertion_point(field_release:mtm.event.ArgumentDescriptor.type_url)
  
  ::mtm::TypeUrl* temp = type_url_;
  type_url_ = NULL;
  return temp;
}
void ArgumentDescriptor::set_allocated_type_url(::mtm::TypeUrl* type_url) {
  delete type_url_;
  type_url_ = type_url;
  if (type_url) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.ArgumentDescriptor.type_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace mtm

// @@protoc_insertion_point(global_scope)
