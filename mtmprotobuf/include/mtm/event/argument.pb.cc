// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/event/argument.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtm/event/argument.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mtm {
namespace event {

namespace {

const ::google::protobuf::Descriptor* Argument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Argument_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArgumentCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArgumentCollection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mtm_2fevent_2fargument_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mtm_2fevent_2fargument_2eproto() {
  protobuf_AddDesc_mtm_2fevent_2fargument_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mtm/event/argument.proto");
  GOOGLE_CHECK(file != NULL);
  Argument_descriptor_ = file->message_type(0);
  static const int Argument_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, content_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, content_),
  };
  Argument_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Argument_descriptor_,
      Argument::default_instance_,
      Argument_offsets_,
      -1,
      -1,
      -1,
      sizeof(Argument),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _is_default_instance_));
  ArgumentCollection_descriptor_ = file->message_type(1);
  static const int ArgumentCollection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentCollection, arguments_),
  };
  ArgumentCollection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ArgumentCollection_descriptor_,
      ArgumentCollection::default_instance_,
      ArgumentCollection_offsets_,
      -1,
      -1,
      -1,
      sizeof(ArgumentCollection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentCollection, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArgumentCollection, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mtm_2fevent_2fargument_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Argument_descriptor_, &Argument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ArgumentCollection_descriptor_, &ArgumentCollection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mtm_2fevent_2fargument_2eproto() {
  delete Argument::default_instance_;
  delete Argument_reflection_;
  delete ArgumentCollection::default_instance_;
  delete ArgumentCollection_reflection_;
}

void protobuf_AddDesc_mtm_2fevent_2fargument_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mtm_2fevent_2fargument_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::mtm::protobuf_AddDesc_mtm_2fcommon_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030mtm/event/argument.proto\022\tmtm.event\032\031g"
    "oogle/protobuf/any.proto\032\036google/protobu"
    "f/wrappers.proto\032\026mtm/common_types.proto"
    "\"W\n\010Argument\022\014\n\004name\030\001 \001(\t\022\026\n\016content_st"
    "ring\030\002 \001(\t\022%\n\007content\030d \001(\0132\024.google.pro"
    "tobuf.Any\"<\n\022ArgumentCollection\022&\n\targum"
    "ents\030\001 \003(\0132\023.mtm.event.Argumentb\006proto3", 279);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/event/argument.proto", &protobuf_RegisterTypes);
  Argument::default_instance_ = new Argument();
  ArgumentCollection::default_instance_ = new ArgumentCollection();
  Argument::default_instance_->InitAsDefaultInstance();
  ArgumentCollection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtm_2fevent_2fargument_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtm_2fevent_2fargument_2eproto {
  StaticDescriptorInitializer_mtm_2fevent_2fargument_2eproto() {
    protobuf_AddDesc_mtm_2fevent_2fargument_2eproto();
  }
} static_descriptor_initializer_mtm_2fevent_2fargument_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Argument::kNameFieldNumber;
const int Argument::kContentStringFieldNumber;
const int Argument::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Argument::Argument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.event.Argument)
}

void Argument::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  content_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

Argument::Argument(const Argument& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.event.Argument)
}

void Argument::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = NULL;
}

Argument::~Argument() {
  // @@protoc_insertion_point(destructor:mtm.event.Argument)
  SharedDtor();
}

void Argument::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete content_;
  }
}

void Argument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Argument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Argument_descriptor_;
}

const Argument& Argument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fevent_2fargument_2eproto();
  return *default_instance_;
}

Argument* Argument::default_instance_ = NULL;

Argument* Argument::New(::google::protobuf::Arena* arena) const {
  Argument* n = new Argument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Argument::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.event.Argument)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && content_ != NULL) delete content_;
  content_ = NULL;
}

bool Argument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.event.Argument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mtm.event.Argument.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content_string;
        break;
      }

      // optional string content_string = 2;
      case 2: {
        if (tag == 18) {
         parse_content_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content_string().data(), this->content_string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mtm.event.Argument.content_string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_content;
        break;
      }

      // optional .google.protobuf.Any content = 100;
      case 100: {
        if (tag == 802) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.event.Argument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.event.Argument)
  return false;
#undef DO_
}

void Argument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.event.Argument)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mtm.event.Argument.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string content_string = 2;
  if (this->content_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content_string().data(), this->content_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mtm.event.Argument.content_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content_string(), output);
  }

  // optional .google.protobuf.Any content = 100;
  if (this->has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->content_, output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.event.Argument)
}

::google::protobuf::uint8* Argument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.event.Argument)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mtm.event.Argument.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string content_string = 2;
  if (this->content_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content_string().data(), this->content_string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mtm.event.Argument.content_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content_string(), target);
  }

  // optional .google.protobuf.Any content = 100;
  if (this->has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        100, *this->content_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.event.Argument)
  return target;
}

int Argument::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.event.Argument)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string content_string = 2;
  if (this->content_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content_string());
  }

  // optional .google.protobuf.Any content = 100;
  if (this->has_content()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->content_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Argument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.event.Argument)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Argument* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Argument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.event.Argument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.event.Argument)
    MergeFrom(*source);
  }
}

void Argument::MergeFrom(const Argument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.event.Argument)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.content_string().size() > 0) {

    content_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_string_);
  }
  if (from.has_content()) {
    mutable_content()->::google::protobuf::Any::MergeFrom(from.content());
  }
}

void Argument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.event.Argument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Argument::CopyFrom(const Argument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.event.Argument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Argument::IsInitialized() const {

  return true;
}

void Argument::Swap(Argument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Argument::InternalSwap(Argument* other) {
  name_.Swap(&other->name_);
  content_string_.Swap(&other->content_string_);
  std::swap(content_, other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Argument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Argument_descriptor_;
  metadata.reflection = Argument_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Argument

// optional string name = 1;
void Argument::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Argument::name() const {
  // @@protoc_insertion_point(field_get:mtm.event.Argument.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Argument::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.event.Argument.name)
}
 void Argument::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.event.Argument.name)
}
 void Argument::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.event.Argument.name)
}
 ::std::string* Argument::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mtm.event.Argument.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Argument::release_name() {
  // @@protoc_insertion_point(field_release:mtm.event.Argument.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Argument::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Argument.name)
}

// optional string content_string = 2;
void Argument::clear_content_string() {
  content_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Argument::content_string() const {
  // @@protoc_insertion_point(field_get:mtm.event.Argument.content_string)
  return content_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Argument::set_content_string(const ::std::string& value) {
  
  content_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.event.Argument.content_string)
}
 void Argument::set_content_string(const char* value) {
  
  content_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.event.Argument.content_string)
}
 void Argument::set_content_string(const char* value, size_t size) {
  
  content_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.event.Argument.content_string)
}
 ::std::string* Argument::mutable_content_string() {
  
  // @@protoc_insertion_point(field_mutable:mtm.event.Argument.content_string)
  return content_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Argument::release_content_string() {
  // @@protoc_insertion_point(field_release:mtm.event.Argument.content_string)
  
  return content_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Argument::set_allocated_content_string(::std::string* content_string) {
  if (content_string != NULL) {
    
  } else {
    
  }
  content_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_string);
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Argument.content_string)
}

// optional .google.protobuf.Any content = 100;
bool Argument::has_content() const {
  return !_is_default_instance_ && content_ != NULL;
}
void Argument::clear_content() {
  if (GetArenaNoVirtual() == NULL && content_ != NULL) delete content_;
  content_ = NULL;
}
const ::google::protobuf::Any& Argument::content() const {
  // @@protoc_insertion_point(field_get:mtm.event.Argument.content)
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
::google::protobuf::Any* Argument::mutable_content() {
  
  if (content_ == NULL) {
    content_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.Argument.content)
  return content_;
}
::google::protobuf::Any* Argument::release_content() {
  // @@protoc_insertion_point(field_release:mtm.event.Argument.content)
  
  ::google::protobuf::Any* temp = content_;
  content_ = NULL;
  return temp;
}
void Argument::set_allocated_content(::google::protobuf::Any* content) {
  delete content_;
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Argument.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArgumentCollection::kArgumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArgumentCollection::ArgumentCollection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.event.ArgumentCollection)
}

void ArgumentCollection::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ArgumentCollection::ArgumentCollection(const ArgumentCollection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.event.ArgumentCollection)
}

void ArgumentCollection::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ArgumentCollection::~ArgumentCollection() {
  // @@protoc_insertion_point(destructor:mtm.event.ArgumentCollection)
  SharedDtor();
}

void ArgumentCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArgumentCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArgumentCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArgumentCollection_descriptor_;
}

const ArgumentCollection& ArgumentCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fevent_2fargument_2eproto();
  return *default_instance_;
}

ArgumentCollection* ArgumentCollection::default_instance_ = NULL;

ArgumentCollection* ArgumentCollection::New(::google::protobuf::Arena* arena) const {
  ArgumentCollection* n = new ArgumentCollection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArgumentCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.event.ArgumentCollection)
  arguments_.Clear();
}

bool ArgumentCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.event.ArgumentCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mtm.event.Argument arguments = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_arguments;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.event.ArgumentCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.event.ArgumentCollection)
  return false;
#undef DO_
}

void ArgumentCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.event.ArgumentCollection)
  // repeated .mtm.event.Argument arguments = 1;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arguments(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.event.ArgumentCollection)
}

::google::protobuf::uint8* ArgumentCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.event.ArgumentCollection)
  // repeated .mtm.event.Argument arguments = 1;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->arguments(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.event.ArgumentCollection)
  return target;
}

int ArgumentCollection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.event.ArgumentCollection)
  int total_size = 0;

  // repeated .mtm.event.Argument arguments = 1;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArgumentCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.event.ArgumentCollection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ArgumentCollection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ArgumentCollection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.event.ArgumentCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.event.ArgumentCollection)
    MergeFrom(*source);
  }
}

void ArgumentCollection::MergeFrom(const ArgumentCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.event.ArgumentCollection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  arguments_.MergeFrom(from.arguments_);
}

void ArgumentCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.event.ArgumentCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArgumentCollection::CopyFrom(const ArgumentCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.event.ArgumentCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgumentCollection::IsInitialized() const {

  return true;
}

void ArgumentCollection::Swap(ArgumentCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArgumentCollection::InternalSwap(ArgumentCollection* other) {
  arguments_.UnsafeArenaSwap(&other->arguments_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArgumentCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArgumentCollection_descriptor_;
  metadata.reflection = ArgumentCollection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ArgumentCollection

// repeated .mtm.event.Argument arguments = 1;
int ArgumentCollection::arguments_size() const {
  return arguments_.size();
}
void ArgumentCollection::clear_arguments() {
  arguments_.Clear();
}
const ::mtm::event::Argument& ArgumentCollection::arguments(int index) const {
  // @@protoc_insertion_point(field_get:mtm.event.ArgumentCollection.arguments)
  return arguments_.Get(index);
}
::mtm::event::Argument* ArgumentCollection::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.event.ArgumentCollection.arguments)
  return arguments_.Mutable(index);
}
::mtm::event::Argument* ArgumentCollection::add_arguments() {
  // @@protoc_insertion_point(field_add:mtm.event.ArgumentCollection.arguments)
  return arguments_.Add();
}
::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >*
ArgumentCollection::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:mtm.event.ArgumentCollection.arguments)
  return &arguments_;
}
const ::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >&
ArgumentCollection::arguments() const {
  // @@protoc_insertion_point(field_list:mtm.event.ArgumentCollection.arguments)
  return arguments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace mtm

// @@protoc_insertion_point(global_scope)
