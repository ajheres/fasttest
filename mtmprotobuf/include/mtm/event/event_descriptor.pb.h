// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/event/event_descriptor.proto

#ifndef PROTOBUF_INCLUDED_mtm_2fevent_2fevent_5fdescriptor_2eproto
#define PROTOBUF_INCLUDED_mtm_2fevent_2fevent_5fdescriptor_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "mtm/event/argument_descriptor.pb.h"
#include "mtm/common_types.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fevent_2fevent_5fdescriptor_2eproto 

namespace protobuf_mtm_2fevent_2fevent_5fdescriptor_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mtm_2fevent_2fevent_5fdescriptor_2eproto
namespace mtm {
namespace event {
class EventDescriptor;
class EventDescriptorDefaultTypeInternal;
extern EventDescriptorDefaultTypeInternal _EventDescriptor_default_instance_;
class EventDescriptorCollection;
class EventDescriptorCollectionDefaultTypeInternal;
extern EventDescriptorCollectionDefaultTypeInternal _EventDescriptorCollection_default_instance_;
}  // namespace event
}  // namespace mtm
namespace google {
namespace protobuf {
template<> ::mtm::event::EventDescriptor* Arena::CreateMaybeMessage<::mtm::event::EventDescriptor>(Arena*);
template<> ::mtm::event::EventDescriptorCollection* Arena::CreateMaybeMessage<::mtm::event::EventDescriptorCollection>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mtm {
namespace event {

// ===================================================================

class EventDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.event.EventDescriptor) */ {
 public:
  EventDescriptor();
  virtual ~EventDescriptor();

  EventDescriptor(const EventDescriptor& from);

  inline EventDescriptor& operator=(const EventDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventDescriptor(EventDescriptor&& from) noexcept
    : EventDescriptor() {
    *this = ::std::move(from);
  }

  inline EventDescriptor& operator=(EventDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventDescriptor* internal_default_instance() {
    return reinterpret_cast<const EventDescriptor*>(
               &_EventDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EventDescriptor* other);
  friend void swap(EventDescriptor& a, EventDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventDescriptor* New() const final {
    return CreateMaybeMessage<EventDescriptor>(NULL);
  }

  EventDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventDescriptor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventDescriptor& from);
  void MergeFrom(const EventDescriptor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtm.event.ArgumentDescriptor arguments = 8;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 8;
  ::mtm::event::ArgumentDescriptor* mutable_arguments(int index);
  ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor >*
      mutable_arguments();
  const ::mtm::event::ArgumentDescriptor& arguments(int index) const;
  ::mtm::event::ArgumentDescriptor* add_arguments();
  const ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor >&
      arguments() const;

  // .mtm.Uuid descriptorId = 1;
  bool has_descriptorid() const;
  void clear_descriptorid();
  static const int kDescriptorIdFieldNumber = 1;
  private:
  const ::mtm::Uuid& _internal_descriptorid() const;
  public:
  const ::mtm::Uuid& descriptorid() const;
  ::mtm::Uuid* release_descriptorid();
  ::mtm::Uuid* mutable_descriptorid();
  void set_allocated_descriptorid(::mtm::Uuid* descriptorid);

  // .google.protobuf.Timestamp time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  public:
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);

  // .google.protobuf.StringValue displayName = 4;
  bool has_displayname() const;
  void clear_displayname();
  static const int kDisplayNameFieldNumber = 4;
  private:
  const ::google::protobuf::StringValue& _internal_displayname() const;
  public:
  const ::google::protobuf::StringValue& displayname() const;
  ::google::protobuf::StringValue* release_displayname();
  ::google::protobuf::StringValue* mutable_displayname();
  void set_allocated_displayname(::google::protobuf::StringValue* displayname);

  // .google.protobuf.StringValue formatString = 5;
  bool has_formatstring() const;
  void clear_formatstring();
  static const int kFormatStringFieldNumber = 5;
  private:
  const ::google::protobuf::StringValue& _internal_formatstring() const;
  public:
  const ::google::protobuf::StringValue& formatstring() const;
  ::google::protobuf::StringValue* release_formatstring();
  ::google::protobuf::StringValue* mutable_formatstring();
  void set_allocated_formatstring(::google::protobuf::StringValue* formatstring);

  // .google.protobuf.BoolValue removed = 7;
  bool has_removed() const;
  void clear_removed();
  static const int kRemovedFieldNumber = 7;
  private:
  const ::google::protobuf::BoolValue& _internal_removed() const;
  public:
  const ::google::protobuf::BoolValue& removed() const;
  ::google::protobuf::BoolValue* release_removed();
  ::google::protobuf::BoolValue* mutable_removed();
  void set_allocated_removed(::google::protobuf::BoolValue* removed);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mtm.event.EventDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor > arguments_;
  ::mtm::Uuid* descriptorid_;
  ::google::protobuf::Timestamp* time_;
  ::google::protobuf::StringValue* displayname_;
  ::google::protobuf::StringValue* formatstring_;
  ::google::protobuf::BoolValue* removed_;
  ::google::protobuf::uint32 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fevent_2fevent_5fdescriptor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventDescriptorCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.event.EventDescriptorCollection) */ {
 public:
  EventDescriptorCollection();
  virtual ~EventDescriptorCollection();

  EventDescriptorCollection(const EventDescriptorCollection& from);

  inline EventDescriptorCollection& operator=(const EventDescriptorCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventDescriptorCollection(EventDescriptorCollection&& from) noexcept
    : EventDescriptorCollection() {
    *this = ::std::move(from);
  }

  inline EventDescriptorCollection& operator=(EventDescriptorCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventDescriptorCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventDescriptorCollection* internal_default_instance() {
    return reinterpret_cast<const EventDescriptorCollection*>(
               &_EventDescriptorCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EventDescriptorCollection* other);
  friend void swap(EventDescriptorCollection& a, EventDescriptorCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventDescriptorCollection* New() const final {
    return CreateMaybeMessage<EventDescriptorCollection>(NULL);
  }

  EventDescriptorCollection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventDescriptorCollection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventDescriptorCollection& from);
  void MergeFrom(const EventDescriptorCollection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventDescriptorCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtm.event.EventDescriptor data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  ::mtm::event::EventDescriptor* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField< ::mtm::event::EventDescriptor >*
      mutable_data();
  const ::mtm::event::EventDescriptor& data(int index) const;
  ::mtm::event::EventDescriptor* add_data();
  const ::google::protobuf::RepeatedPtrField< ::mtm::event::EventDescriptor >&
      data() const;

  // @@protoc_insertion_point(class_scope:mtm.event.EventDescriptorCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mtm::event::EventDescriptor > data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fevent_2fevent_5fdescriptor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventDescriptor

// .mtm.Uuid descriptorId = 1;
inline bool EventDescriptor::has_descriptorid() const {
  return this != internal_default_instance() && descriptorid_ != NULL;
}
inline const ::mtm::Uuid& EventDescriptor::_internal_descriptorid() const {
  return *descriptorid_;
}
inline const ::mtm::Uuid& EventDescriptor::descriptorid() const {
  const ::mtm::Uuid* p = descriptorid_;
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.descriptorId)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::Uuid*>(
      &::mtm::_Uuid_default_instance_);
}
inline ::mtm::Uuid* EventDescriptor::release_descriptorid() {
  // @@protoc_insertion_point(field_release:mtm.event.EventDescriptor.descriptorId)
  
  ::mtm::Uuid* temp = descriptorid_;
  descriptorid_ = NULL;
  return temp;
}
inline ::mtm::Uuid* EventDescriptor::mutable_descriptorid() {
  
  if (descriptorid_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::Uuid>(GetArenaNoVirtual());
    descriptorid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptor.descriptorId)
  return descriptorid_;
}
inline void EventDescriptor::set_allocated_descriptorid(::mtm::Uuid* descriptorid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(descriptorid_);
  }
  if (descriptorid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      descriptorid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, descriptorid, submessage_arena);
    }
    
  } else {
    
  }
  descriptorid_ = descriptorid;
  // @@protoc_insertion_point(field_set_allocated:mtm.event.EventDescriptor.descriptorId)
}

// uint32 version = 2;
inline void EventDescriptor::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 EventDescriptor::version() const {
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.version)
  return version_;
}
inline void EventDescriptor::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:mtm.event.EventDescriptor.version)
}

// .google.protobuf.Timestamp time = 3;
inline bool EventDescriptor::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
inline const ::google::protobuf::Timestamp& EventDescriptor::_internal_time() const {
  return *time_;
}
inline const ::google::protobuf::Timestamp& EventDescriptor::time() const {
  const ::google::protobuf::Timestamp* p = time_;
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* EventDescriptor::release_time() {
  // @@protoc_insertion_point(field_release:mtm.event.EventDescriptor.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* EventDescriptor::mutable_time() {
  
  if (time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptor.time)
  return time_;
}
inline void EventDescriptor::set_allocated_time(::google::protobuf::Timestamp* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_);
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:mtm.event.EventDescriptor.time)
}

// .google.protobuf.StringValue displayName = 4;
inline bool EventDescriptor::has_displayname() const {
  return this != internal_default_instance() && displayname_ != NULL;
}
inline const ::google::protobuf::StringValue& EventDescriptor::_internal_displayname() const {
  return *displayname_;
}
inline const ::google::protobuf::StringValue& EventDescriptor::displayname() const {
  const ::google::protobuf::StringValue* p = displayname_;
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.displayName)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* EventDescriptor::release_displayname() {
  // @@protoc_insertion_point(field_release:mtm.event.EventDescriptor.displayName)
  
  ::google::protobuf::StringValue* temp = displayname_;
  displayname_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* EventDescriptor::mutable_displayname() {
  
  if (displayname_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    displayname_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptor.displayName)
  return displayname_;
}
inline void EventDescriptor::set_allocated_displayname(::google::protobuf::StringValue* displayname) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(displayname_);
  }
  if (displayname) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(displayname)->GetArena();
    if (message_arena != submessage_arena) {
      displayname = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, displayname, submessage_arena);
    }
    
  } else {
    
  }
  displayname_ = displayname;
  // @@protoc_insertion_point(field_set_allocated:mtm.event.EventDescriptor.displayName)
}

// .google.protobuf.StringValue formatString = 5;
inline bool EventDescriptor::has_formatstring() const {
  return this != internal_default_instance() && formatstring_ != NULL;
}
inline const ::google::protobuf::StringValue& EventDescriptor::_internal_formatstring() const {
  return *formatstring_;
}
inline const ::google::protobuf::StringValue& EventDescriptor::formatstring() const {
  const ::google::protobuf::StringValue* p = formatstring_;
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.formatString)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* EventDescriptor::release_formatstring() {
  // @@protoc_insertion_point(field_release:mtm.event.EventDescriptor.formatString)
  
  ::google::protobuf::StringValue* temp = formatstring_;
  formatstring_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* EventDescriptor::mutable_formatstring() {
  
  if (formatstring_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    formatstring_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptor.formatString)
  return formatstring_;
}
inline void EventDescriptor::set_allocated_formatstring(::google::protobuf::StringValue* formatstring) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(formatstring_);
  }
  if (formatstring) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(formatstring)->GetArena();
    if (message_arena != submessage_arena) {
      formatstring = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, formatstring, submessage_arena);
    }
    
  } else {
    
  }
  formatstring_ = formatstring;
  // @@protoc_insertion_point(field_set_allocated:mtm.event.EventDescriptor.formatString)
}

// .google.protobuf.BoolValue removed = 7;
inline bool EventDescriptor::has_removed() const {
  return this != internal_default_instance() && removed_ != NULL;
}
inline const ::google::protobuf::BoolValue& EventDescriptor::_internal_removed() const {
  return *removed_;
}
inline const ::google::protobuf::BoolValue& EventDescriptor::removed() const {
  const ::google::protobuf::BoolValue* p = removed_;
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.removed)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* EventDescriptor::release_removed() {
  // @@protoc_insertion_point(field_release:mtm.event.EventDescriptor.removed)
  
  ::google::protobuf::BoolValue* temp = removed_;
  removed_ = NULL;
  return temp;
}
inline ::google::protobuf::BoolValue* EventDescriptor::mutable_removed() {
  
  if (removed_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::BoolValue>(GetArenaNoVirtual());
    removed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptor.removed)
  return removed_;
}
inline void EventDescriptor::set_allocated_removed(::google::protobuf::BoolValue* removed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(removed_);
  }
  if (removed) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(removed)->GetArena();
    if (message_arena != submessage_arena) {
      removed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, removed, submessage_arena);
    }
    
  } else {
    
  }
  removed_ = removed;
  // @@protoc_insertion_point(field_set_allocated:mtm.event.EventDescriptor.removed)
}

// repeated .mtm.event.ArgumentDescriptor arguments = 8;
inline int EventDescriptor::arguments_size() const {
  return arguments_.size();
}
inline ::mtm::event::ArgumentDescriptor* EventDescriptor::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptor.arguments)
  return arguments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor >*
EventDescriptor::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:mtm.event.EventDescriptor.arguments)
  return &arguments_;
}
inline const ::mtm::event::ArgumentDescriptor& EventDescriptor::arguments(int index) const {
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.arguments)
  return arguments_.Get(index);
}
inline ::mtm::event::ArgumentDescriptor* EventDescriptor::add_arguments() {
  // @@protoc_insertion_point(field_add:mtm.event.EventDescriptor.arguments)
  return arguments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor >&
EventDescriptor::arguments() const {
  // @@protoc_insertion_point(field_list:mtm.event.EventDescriptor.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// EventDescriptorCollection

// repeated .mtm.event.EventDescriptor data = 1;
inline int EventDescriptorCollection::data_size() const {
  return data_.size();
}
inline void EventDescriptorCollection::clear_data() {
  data_.Clear();
}
inline ::mtm::event::EventDescriptor* EventDescriptorCollection::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptorCollection.data)
  return data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::event::EventDescriptor >*
EventDescriptorCollection::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:mtm.event.EventDescriptorCollection.data)
  return &data_;
}
inline const ::mtm::event::EventDescriptor& EventDescriptorCollection::data(int index) const {
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptorCollection.data)
  return data_.Get(index);
}
inline ::mtm::event::EventDescriptor* EventDescriptorCollection::add_data() {
  // @@protoc_insertion_point(field_add:mtm.event.EventDescriptorCollection.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::event::EventDescriptor >&
EventDescriptorCollection::data() const {
  // @@protoc_insertion_point(field_list:mtm.event.EventDescriptorCollection.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mtm_2fevent_2fevent_5fdescriptor_2eproto
