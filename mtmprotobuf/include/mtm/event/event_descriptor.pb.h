// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/event/event_descriptor.proto

#ifndef PROTOBUF_mtm_2fevent_2fevent_5fdescriptor_2eproto__INCLUDED
#define PROTOBUF_mtm_2fevent_2fevent_5fdescriptor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "mtm/event/argument_descriptor.pb.h"
#include "mtm/common_types.pb.h"
// @@protoc_insertion_point(includes)

namespace mtm {
namespace event {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mtm_2fevent_2fevent_5fdescriptor_2eproto();
void protobuf_AssignDesc_mtm_2fevent_2fevent_5fdescriptor_2eproto();
void protobuf_ShutdownFile_mtm_2fevent_2fevent_5fdescriptor_2eproto();

class EventDescriptor;
class EventDescriptorCollection;

// ===================================================================

class EventDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.event.EventDescriptor) */ {
 public:
  EventDescriptor();
  virtual ~EventDescriptor();

  EventDescriptor(const EventDescriptor& from);

  inline EventDescriptor& operator=(const EventDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventDescriptor& default_instance();

  void Swap(EventDescriptor* other);

  // implements Message ----------------------------------------------

  inline EventDescriptor* New() const { return New(NULL); }

  EventDescriptor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventDescriptor& from);
  void MergeFrom(const EventDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mtm.Uuid descriptorId = 1;
  bool has_descriptorid() const;
  void clear_descriptorid();
  static const int kDescriptorIdFieldNumber = 1;
  const ::mtm::Uuid& descriptorid() const;
  ::mtm::Uuid* mutable_descriptorid();
  ::mtm::Uuid* release_descriptorid();
  void set_allocated_descriptorid(::mtm::Uuid* descriptorid);

  // optional uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .google.protobuf.Timestamp time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* mutable_time();
  ::google::protobuf::Timestamp* release_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);

  // optional .google.protobuf.StringValue displayName = 4;
  bool has_displayname() const;
  void clear_displayname();
  static const int kDisplayNameFieldNumber = 4;
  const ::google::protobuf::StringValue& displayname() const;
  ::google::protobuf::StringValue* mutable_displayname();
  ::google::protobuf::StringValue* release_displayname();
  void set_allocated_displayname(::google::protobuf::StringValue* displayname);

  // optional .google.protobuf.StringValue formatString = 5;
  bool has_formatstring() const;
  void clear_formatstring();
  static const int kFormatStringFieldNumber = 5;
  const ::google::protobuf::StringValue& formatstring() const;
  ::google::protobuf::StringValue* mutable_formatstring();
  ::google::protobuf::StringValue* release_formatstring();
  void set_allocated_formatstring(::google::protobuf::StringValue* formatstring);

  // optional .google.protobuf.BoolValue removed = 7;
  bool has_removed() const;
  void clear_removed();
  static const int kRemovedFieldNumber = 7;
  const ::google::protobuf::BoolValue& removed() const;
  ::google::protobuf::BoolValue* mutable_removed();
  ::google::protobuf::BoolValue* release_removed();
  void set_allocated_removed(::google::protobuf::BoolValue* removed);

  // repeated .mtm.event.ArgumentDescriptor arguments = 8;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 8;
  const ::mtm::event::ArgumentDescriptor& arguments(int index) const;
  ::mtm::event::ArgumentDescriptor* mutable_arguments(int index);
  ::mtm::event::ArgumentDescriptor* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor >&
      arguments() const;

  // @@protoc_insertion_point(class_scope:mtm.event.EventDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::mtm::Uuid* descriptorid_;
  ::google::protobuf::Timestamp* time_;
  ::google::protobuf::StringValue* displayname_;
  ::google::protobuf::StringValue* formatstring_;
  ::google::protobuf::BoolValue* removed_;
  ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor > arguments_;
  ::google::protobuf::uint32 version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2fevent_2fevent_5fdescriptor_2eproto();
  friend void protobuf_AssignDesc_mtm_2fevent_2fevent_5fdescriptor_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fevent_2fevent_5fdescriptor_2eproto();

  void InitAsDefaultInstance();
  static EventDescriptor* default_instance_;
};
// -------------------------------------------------------------------

class EventDescriptorCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.event.EventDescriptorCollection) */ {
 public:
  EventDescriptorCollection();
  virtual ~EventDescriptorCollection();

  EventDescriptorCollection(const EventDescriptorCollection& from);

  inline EventDescriptorCollection& operator=(const EventDescriptorCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventDescriptorCollection& default_instance();

  void Swap(EventDescriptorCollection* other);

  // implements Message ----------------------------------------------

  inline EventDescriptorCollection* New() const { return New(NULL); }

  EventDescriptorCollection* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventDescriptorCollection& from);
  void MergeFrom(const EventDescriptorCollection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventDescriptorCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtm.event.EventDescriptor data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::mtm::event::EventDescriptor& data(int index) const;
  ::mtm::event::EventDescriptor* mutable_data(int index);
  ::mtm::event::EventDescriptor* add_data();
  ::google::protobuf::RepeatedPtrField< ::mtm::event::EventDescriptor >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::mtm::event::EventDescriptor >&
      data() const;

  // @@protoc_insertion_point(class_scope:mtm.event.EventDescriptorCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::mtm::event::EventDescriptor > data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2fevent_2fevent_5fdescriptor_2eproto();
  friend void protobuf_AssignDesc_mtm_2fevent_2fevent_5fdescriptor_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fevent_2fevent_5fdescriptor_2eproto();

  void InitAsDefaultInstance();
  static EventDescriptorCollection* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EventDescriptor

// optional .mtm.Uuid descriptorId = 1;
inline bool EventDescriptor::has_descriptorid() const {
  return !_is_default_instance_ && descriptorid_ != NULL;
}
inline void EventDescriptor::clear_descriptorid() {
  if (GetArenaNoVirtual() == NULL && descriptorid_ != NULL) delete descriptorid_;
  descriptorid_ = NULL;
}
inline const ::mtm::Uuid& EventDescriptor::descriptorid() const {
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.descriptorId)
  return descriptorid_ != NULL ? *descriptorid_ : *default_instance_->descriptorid_;
}
inline ::mtm::Uuid* EventDescriptor::mutable_descriptorid() {
  
  if (descriptorid_ == NULL) {
    descriptorid_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptor.descriptorId)
  return descriptorid_;
}
inline ::mtm::Uuid* EventDescriptor::release_descriptorid() {
  // @@protoc_insertion_point(field_release:mtm.event.EventDescriptor.descriptorId)
  
  ::mtm::Uuid* temp = descriptorid_;
  descriptorid_ = NULL;
  return temp;
}
inline void EventDescriptor::set_allocated_descriptorid(::mtm::Uuid* descriptorid) {
  delete descriptorid_;
  descriptorid_ = descriptorid;
  if (descriptorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.EventDescriptor.descriptorId)
}

// optional uint32 version = 2;
inline void EventDescriptor::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 EventDescriptor::version() const {
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.version)
  return version_;
}
inline void EventDescriptor::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:mtm.event.EventDescriptor.version)
}

// optional .google.protobuf.Timestamp time = 3;
inline bool EventDescriptor::has_time() const {
  return !_is_default_instance_ && time_ != NULL;
}
inline void EventDescriptor::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
}
inline const ::google::protobuf::Timestamp& EventDescriptor::time() const {
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::google::protobuf::Timestamp* EventDescriptor::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptor.time)
  return time_;
}
inline ::google::protobuf::Timestamp* EventDescriptor::release_time() {
  // @@protoc_insertion_point(field_release:mtm.event.EventDescriptor.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
inline void EventDescriptor::set_allocated_time(::google::protobuf::Timestamp* time) {
  delete time_;
  if (time != NULL && time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_time = new ::google::protobuf::Timestamp;
    new_time->CopyFrom(*time);
    time = new_time;
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.EventDescriptor.time)
}

// optional .google.protobuf.StringValue displayName = 4;
inline bool EventDescriptor::has_displayname() const {
  return !_is_default_instance_ && displayname_ != NULL;
}
inline void EventDescriptor::clear_displayname() {
  if (GetArenaNoVirtual() == NULL && displayname_ != NULL) delete displayname_;
  displayname_ = NULL;
}
inline const ::google::protobuf::StringValue& EventDescriptor::displayname() const {
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.displayName)
  return displayname_ != NULL ? *displayname_ : *default_instance_->displayname_;
}
inline ::google::protobuf::StringValue* EventDescriptor::mutable_displayname() {
  
  if (displayname_ == NULL) {
    displayname_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptor.displayName)
  return displayname_;
}
inline ::google::protobuf::StringValue* EventDescriptor::release_displayname() {
  // @@protoc_insertion_point(field_release:mtm.event.EventDescriptor.displayName)
  
  ::google::protobuf::StringValue* temp = displayname_;
  displayname_ = NULL;
  return temp;
}
inline void EventDescriptor::set_allocated_displayname(::google::protobuf::StringValue* displayname) {
  delete displayname_;
  if (displayname != NULL && displayname->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_displayname = new ::google::protobuf::StringValue;
    new_displayname->CopyFrom(*displayname);
    displayname = new_displayname;
  }
  displayname_ = displayname;
  if (displayname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.EventDescriptor.displayName)
}

// optional .google.protobuf.StringValue formatString = 5;
inline bool EventDescriptor::has_formatstring() const {
  return !_is_default_instance_ && formatstring_ != NULL;
}
inline void EventDescriptor::clear_formatstring() {
  if (GetArenaNoVirtual() == NULL && formatstring_ != NULL) delete formatstring_;
  formatstring_ = NULL;
}
inline const ::google::protobuf::StringValue& EventDescriptor::formatstring() const {
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.formatString)
  return formatstring_ != NULL ? *formatstring_ : *default_instance_->formatstring_;
}
inline ::google::protobuf::StringValue* EventDescriptor::mutable_formatstring() {
  
  if (formatstring_ == NULL) {
    formatstring_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptor.formatString)
  return formatstring_;
}
inline ::google::protobuf::StringValue* EventDescriptor::release_formatstring() {
  // @@protoc_insertion_point(field_release:mtm.event.EventDescriptor.formatString)
  
  ::google::protobuf::StringValue* temp = formatstring_;
  formatstring_ = NULL;
  return temp;
}
inline void EventDescriptor::set_allocated_formatstring(::google::protobuf::StringValue* formatstring) {
  delete formatstring_;
  if (formatstring != NULL && formatstring->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_formatstring = new ::google::protobuf::StringValue;
    new_formatstring->CopyFrom(*formatstring);
    formatstring = new_formatstring;
  }
  formatstring_ = formatstring;
  if (formatstring) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.EventDescriptor.formatString)
}

// optional .google.protobuf.BoolValue removed = 7;
inline bool EventDescriptor::has_removed() const {
  return !_is_default_instance_ && removed_ != NULL;
}
inline void EventDescriptor::clear_removed() {
  if (GetArenaNoVirtual() == NULL && removed_ != NULL) delete removed_;
  removed_ = NULL;
}
inline const ::google::protobuf::BoolValue& EventDescriptor::removed() const {
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.removed)
  return removed_ != NULL ? *removed_ : *default_instance_->removed_;
}
inline ::google::protobuf::BoolValue* EventDescriptor::mutable_removed() {
  
  if (removed_ == NULL) {
    removed_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptor.removed)
  return removed_;
}
inline ::google::protobuf::BoolValue* EventDescriptor::release_removed() {
  // @@protoc_insertion_point(field_release:mtm.event.EventDescriptor.removed)
  
  ::google::protobuf::BoolValue* temp = removed_;
  removed_ = NULL;
  return temp;
}
inline void EventDescriptor::set_allocated_removed(::google::protobuf::BoolValue* removed) {
  delete removed_;
  if (removed != NULL && removed->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_removed = new ::google::protobuf::BoolValue;
    new_removed->CopyFrom(*removed);
    removed = new_removed;
  }
  removed_ = removed;
  if (removed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.EventDescriptor.removed)
}

// repeated .mtm.event.ArgumentDescriptor arguments = 8;
inline int EventDescriptor::arguments_size() const {
  return arguments_.size();
}
inline void EventDescriptor::clear_arguments() {
  arguments_.Clear();
}
inline const ::mtm::event::ArgumentDescriptor& EventDescriptor::arguments(int index) const {
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptor.arguments)
  return arguments_.Get(index);
}
inline ::mtm::event::ArgumentDescriptor* EventDescriptor::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptor.arguments)
  return arguments_.Mutable(index);
}
inline ::mtm::event::ArgumentDescriptor* EventDescriptor::add_arguments() {
  // @@protoc_insertion_point(field_add:mtm.event.EventDescriptor.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor >*
EventDescriptor::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:mtm.event.EventDescriptor.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor >&
EventDescriptor::arguments() const {
  // @@protoc_insertion_point(field_list:mtm.event.EventDescriptor.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// EventDescriptorCollection

// repeated .mtm.event.EventDescriptor data = 1;
inline int EventDescriptorCollection::data_size() const {
  return data_.size();
}
inline void EventDescriptorCollection::clear_data() {
  data_.Clear();
}
inline const ::mtm::event::EventDescriptor& EventDescriptorCollection::data(int index) const {
  // @@protoc_insertion_point(field_get:mtm.event.EventDescriptorCollection.data)
  return data_.Get(index);
}
inline ::mtm::event::EventDescriptor* EventDescriptorCollection::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.event.EventDescriptorCollection.data)
  return data_.Mutable(index);
}
inline ::mtm::event::EventDescriptor* EventDescriptorCollection::add_data() {
  // @@protoc_insertion_point(field_add:mtm.event.EventDescriptorCollection.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::event::EventDescriptor >*
EventDescriptorCollection::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:mtm.event.EventDescriptorCollection.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::event::EventDescriptor >&
EventDescriptorCollection::data() const {
  // @@protoc_insertion_point(field_list:mtm.event.EventDescriptorCollection.data)
  return data_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mtm_2fevent_2fevent_5fdescriptor_2eproto__INCLUDED
