// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/event/action/event_action_connection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtm/event/action/event_action_connection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mtm {
namespace event {
namespace action {

namespace {

const ::google::protobuf::Descriptor* EventActionConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventActionConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventActionConnectionCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventActionConnectionCollection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto() {
  protobuf_AddDesc_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mtm/event/action/event_action_connection.proto");
  GOOGLE_CHECK(file != NULL);
  EventActionConnection_descriptor_ = file->message_type(0);
  static const int EventActionConnection_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventActionConnection, connectionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventActionConnection, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventActionConnection, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventActionConnection, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventActionConnection, removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventActionConnection, arguments_),
  };
  EventActionConnection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EventActionConnection_descriptor_,
      EventActionConnection::default_instance_,
      EventActionConnection_offsets_,
      -1,
      -1,
      -1,
      sizeof(EventActionConnection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventActionConnection, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventActionConnection, _is_default_instance_));
  EventActionConnectionCollection_descriptor_ = file->message_type(1);
  static const int EventActionConnectionCollection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventActionConnectionCollection, data_),
  };
  EventActionConnectionCollection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EventActionConnectionCollection_descriptor_,
      EventActionConnectionCollection::default_instance_,
      EventActionConnectionCollection_offsets_,
      -1,
      -1,
      -1,
      sizeof(EventActionConnectionCollection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventActionConnectionCollection, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventActionConnectionCollection, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EventActionConnection_descriptor_, &EventActionConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EventActionConnectionCollection_descriptor_, &EventActionConnectionCollection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto() {
  delete EventActionConnection::default_instance_;
  delete EventActionConnection_reflection_;
  delete EventActionConnectionCollection::default_instance_;
  delete EventActionConnectionCollection_reflection_;
}

void protobuf_AddDesc_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::mtm::event::protobuf_AddDesc_mtm_2fevent_2fargument_2eproto();
  ::mtm::protobuf_AddDesc_mtm_2fcommon_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.mtm/event/action/event_action_connecti"
    "on.proto\022\020mtm.event.action\032\037google/proto"
    "buf/timestamp.proto\032\036google/protobuf/wra"
    "ppers.proto\032\030mtm/event/argument.proto\032\026m"
    "tm/common_types.proto\"\360\001\n\025EventActionCon"
    "nection\022\037\n\014connectionId\030\001 \001(\0132\t.mtm.Uuid"
    "\022\032\n\007eventId\030\002 \001(\0132\t.mtm.Uuid\022\033\n\010actionId"
    "\030\003 \001(\0132\t.mtm.Uuid\022(\n\004time\030\004 \001(\0132\032.google"
    ".protobuf.Timestamp\022+\n\007removed\030\005 \001(\0132\032.g"
    "oogle.protobuf.BoolValue\022&\n\targuments\030\010 "
    "\003(\0132\023.mtm.event.Argument\"X\n\037EventActionC"
    "onnectionCollection\0225\n\004data\030\001 \003(\0132\'.mtm."
    "event.action.EventActionConnectionb\006prot"
    "o3", 522);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/event/action/event_action_connection.proto", &protobuf_RegisterTypes);
  EventActionConnection::default_instance_ = new EventActionConnection();
  EventActionConnectionCollection::default_instance_ = new EventActionConnectionCollection();
  EventActionConnection::default_instance_->InitAsDefaultInstance();
  EventActionConnectionCollection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto {
  StaticDescriptorInitializer_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto() {
    protobuf_AddDesc_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto();
  }
} static_descriptor_initializer_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventActionConnection::kConnectionIdFieldNumber;
const int EventActionConnection::kEventIdFieldNumber;
const int EventActionConnection::kActionIdFieldNumber;
const int EventActionConnection::kTimeFieldNumber;
const int EventActionConnection::kRemovedFieldNumber;
const int EventActionConnection::kArgumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventActionConnection::EventActionConnection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.event.action.EventActionConnection)
}

void EventActionConnection::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  connectionid_ = const_cast< ::mtm::Uuid*>(&::mtm::Uuid::default_instance());
  eventid_ = const_cast< ::mtm::Uuid*>(&::mtm::Uuid::default_instance());
  actionid_ = const_cast< ::mtm::Uuid*>(&::mtm::Uuid::default_instance());
  time_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  removed_ = const_cast< ::google::protobuf::BoolValue*>(&::google::protobuf::BoolValue::default_instance());
}

EventActionConnection::EventActionConnection(const EventActionConnection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.event.action.EventActionConnection)
}

void EventActionConnection::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  connectionid_ = NULL;
  eventid_ = NULL;
  actionid_ = NULL;
  time_ = NULL;
  removed_ = NULL;
}

EventActionConnection::~EventActionConnection() {
  // @@protoc_insertion_point(destructor:mtm.event.action.EventActionConnection)
  SharedDtor();
}

void EventActionConnection::SharedDtor() {
  if (this != default_instance_) {
    delete connectionid_;
    delete eventid_;
    delete actionid_;
    delete time_;
    delete removed_;
  }
}

void EventActionConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventActionConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventActionConnection_descriptor_;
}

const EventActionConnection& EventActionConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto();
  return *default_instance_;
}

EventActionConnection* EventActionConnection::default_instance_ = NULL;

EventActionConnection* EventActionConnection::New(::google::protobuf::Arena* arena) const {
  EventActionConnection* n = new EventActionConnection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventActionConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.event.action.EventActionConnection)
  if (GetArenaNoVirtual() == NULL && connectionid_ != NULL) delete connectionid_;
  connectionid_ = NULL;
  if (GetArenaNoVirtual() == NULL && eventid_ != NULL) delete eventid_;
  eventid_ = NULL;
  if (GetArenaNoVirtual() == NULL && actionid_ != NULL) delete actionid_;
  actionid_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
  if (GetArenaNoVirtual() == NULL && removed_ != NULL) delete removed_;
  removed_ = NULL;
  arguments_.Clear();
}

bool EventActionConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.event.action.EventActionConnection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mtm.Uuid connectionId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectionid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_eventId;
        break;
      }

      // optional .mtm.Uuid eventId = 2;
      case 2: {
        if (tag == 18) {
         parse_eventId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_actionId;
        break;
      }

      // optional .mtm.Uuid actionId = 3;
      case 3: {
        if (tag == 26) {
         parse_actionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actionid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_time;
        break;
      }

      // optional .google.protobuf.Timestamp time = 4;
      case 4: {
        if (tag == 34) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_removed;
        break;
      }

      // optional .google.protobuf.BoolValue removed = 5;
      case 5: {
        if (tag == 42) {
         parse_removed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_removed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_arguments;
        break;
      }

      // repeated .mtm.event.Argument arguments = 8;
      case 8: {
        if (tag == 66) {
         parse_arguments:
          DO_(input->IncrementRecursionDepth());
         parse_loop_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_arguments;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.event.action.EventActionConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.event.action.EventActionConnection)
  return false;
#undef DO_
}

void EventActionConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.event.action.EventActionConnection)
  // optional .mtm.Uuid connectionId = 1;
  if (this->has_connectionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->connectionid_, output);
  }

  // optional .mtm.Uuid eventId = 2;
  if (this->has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->eventid_, output);
  }

  // optional .mtm.Uuid actionId = 3;
  if (this->has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->actionid_, output);
  }

  // optional .google.protobuf.Timestamp time = 4;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->time_, output);
  }

  // optional .google.protobuf.BoolValue removed = 5;
  if (this->has_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->removed_, output);
  }

  // repeated .mtm.event.Argument arguments = 8;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->arguments(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.event.action.EventActionConnection)
}

::google::protobuf::uint8* EventActionConnection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.event.action.EventActionConnection)
  // optional .mtm.Uuid connectionId = 1;
  if (this->has_connectionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->connectionid_, false, target);
  }

  // optional .mtm.Uuid eventId = 2;
  if (this->has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->eventid_, false, target);
  }

  // optional .mtm.Uuid actionId = 3;
  if (this->has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->actionid_, false, target);
  }

  // optional .google.protobuf.Timestamp time = 4;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->time_, false, target);
  }

  // optional .google.protobuf.BoolValue removed = 5;
  if (this->has_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->removed_, false, target);
  }

  // repeated .mtm.event.Argument arguments = 8;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->arguments(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.event.action.EventActionConnection)
  return target;
}

int EventActionConnection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.event.action.EventActionConnection)
  int total_size = 0;

  // optional .mtm.Uuid connectionId = 1;
  if (this->has_connectionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->connectionid_);
  }

  // optional .mtm.Uuid eventId = 2;
  if (this->has_eventid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->eventid_);
  }

  // optional .mtm.Uuid actionId = 3;
  if (this->has_actionid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->actionid_);
  }

  // optional .google.protobuf.Timestamp time = 4;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);
  }

  // optional .google.protobuf.BoolValue removed = 5;
  if (this->has_removed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->removed_);
  }

  // repeated .mtm.event.Argument arguments = 8;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventActionConnection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.event.action.EventActionConnection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EventActionConnection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EventActionConnection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.event.action.EventActionConnection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.event.action.EventActionConnection)
    MergeFrom(*source);
  }
}

void EventActionConnection::MergeFrom(const EventActionConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.event.action.EventActionConnection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  arguments_.MergeFrom(from.arguments_);
  if (from.has_connectionid()) {
    mutable_connectionid()->::mtm::Uuid::MergeFrom(from.connectionid());
  }
  if (from.has_eventid()) {
    mutable_eventid()->::mtm::Uuid::MergeFrom(from.eventid());
  }
  if (from.has_actionid()) {
    mutable_actionid()->::mtm::Uuid::MergeFrom(from.actionid());
  }
  if (from.has_time()) {
    mutable_time()->::google::protobuf::Timestamp::MergeFrom(from.time());
  }
  if (from.has_removed()) {
    mutable_removed()->::google::protobuf::BoolValue::MergeFrom(from.removed());
  }
}

void EventActionConnection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.event.action.EventActionConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventActionConnection::CopyFrom(const EventActionConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.event.action.EventActionConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventActionConnection::IsInitialized() const {

  return true;
}

void EventActionConnection::Swap(EventActionConnection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventActionConnection::InternalSwap(EventActionConnection* other) {
  std::swap(connectionid_, other->connectionid_);
  std::swap(eventid_, other->eventid_);
  std::swap(actionid_, other->actionid_);
  std::swap(time_, other->time_);
  std::swap(removed_, other->removed_);
  arguments_.UnsafeArenaSwap(&other->arguments_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventActionConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventActionConnection_descriptor_;
  metadata.reflection = EventActionConnection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventActionConnection

// optional .mtm.Uuid connectionId = 1;
bool EventActionConnection::has_connectionid() const {
  return !_is_default_instance_ && connectionid_ != NULL;
}
void EventActionConnection::clear_connectionid() {
  if (GetArenaNoVirtual() == NULL && connectionid_ != NULL) delete connectionid_;
  connectionid_ = NULL;
}
const ::mtm::Uuid& EventActionConnection::connectionid() const {
  // @@protoc_insertion_point(field_get:mtm.event.action.EventActionConnection.connectionId)
  return connectionid_ != NULL ? *connectionid_ : *default_instance_->connectionid_;
}
::mtm::Uuid* EventActionConnection::mutable_connectionid() {
  
  if (connectionid_ == NULL) {
    connectionid_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.action.EventActionConnection.connectionId)
  return connectionid_;
}
::mtm::Uuid* EventActionConnection::release_connectionid() {
  // @@protoc_insertion_point(field_release:mtm.event.action.EventActionConnection.connectionId)
  
  ::mtm::Uuid* temp = connectionid_;
  connectionid_ = NULL;
  return temp;
}
void EventActionConnection::set_allocated_connectionid(::mtm::Uuid* connectionid) {
  delete connectionid_;
  connectionid_ = connectionid;
  if (connectionid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.action.EventActionConnection.connectionId)
}

// optional .mtm.Uuid eventId = 2;
bool EventActionConnection::has_eventid() const {
  return !_is_default_instance_ && eventid_ != NULL;
}
void EventActionConnection::clear_eventid() {
  if (GetArenaNoVirtual() == NULL && eventid_ != NULL) delete eventid_;
  eventid_ = NULL;
}
const ::mtm::Uuid& EventActionConnection::eventid() const {
  // @@protoc_insertion_point(field_get:mtm.event.action.EventActionConnection.eventId)
  return eventid_ != NULL ? *eventid_ : *default_instance_->eventid_;
}
::mtm::Uuid* EventActionConnection::mutable_eventid() {
  
  if (eventid_ == NULL) {
    eventid_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.action.EventActionConnection.eventId)
  return eventid_;
}
::mtm::Uuid* EventActionConnection::release_eventid() {
  // @@protoc_insertion_point(field_release:mtm.event.action.EventActionConnection.eventId)
  
  ::mtm::Uuid* temp = eventid_;
  eventid_ = NULL;
  return temp;
}
void EventActionConnection::set_allocated_eventid(::mtm::Uuid* eventid) {
  delete eventid_;
  eventid_ = eventid;
  if (eventid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.action.EventActionConnection.eventId)
}

// optional .mtm.Uuid actionId = 3;
bool EventActionConnection::has_actionid() const {
  return !_is_default_instance_ && actionid_ != NULL;
}
void EventActionConnection::clear_actionid() {
  if (GetArenaNoVirtual() == NULL && actionid_ != NULL) delete actionid_;
  actionid_ = NULL;
}
const ::mtm::Uuid& EventActionConnection::actionid() const {
  // @@protoc_insertion_point(field_get:mtm.event.action.EventActionConnection.actionId)
  return actionid_ != NULL ? *actionid_ : *default_instance_->actionid_;
}
::mtm::Uuid* EventActionConnection::mutable_actionid() {
  
  if (actionid_ == NULL) {
    actionid_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.action.EventActionConnection.actionId)
  return actionid_;
}
::mtm::Uuid* EventActionConnection::release_actionid() {
  // @@protoc_insertion_point(field_release:mtm.event.action.EventActionConnection.actionId)
  
  ::mtm::Uuid* temp = actionid_;
  actionid_ = NULL;
  return temp;
}
void EventActionConnection::set_allocated_actionid(::mtm::Uuid* actionid) {
  delete actionid_;
  actionid_ = actionid;
  if (actionid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.action.EventActionConnection.actionId)
}

// optional .google.protobuf.Timestamp time = 4;
bool EventActionConnection::has_time() const {
  return !_is_default_instance_ && time_ != NULL;
}
void EventActionConnection::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
}
const ::google::protobuf::Timestamp& EventActionConnection::time() const {
  // @@protoc_insertion_point(field_get:mtm.event.action.EventActionConnection.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
::google::protobuf::Timestamp* EventActionConnection::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.action.EventActionConnection.time)
  return time_;
}
::google::protobuf::Timestamp* EventActionConnection::release_time() {
  // @@protoc_insertion_point(field_release:mtm.event.action.EventActionConnection.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
void EventActionConnection::set_allocated_time(::google::protobuf::Timestamp* time) {
  delete time_;
  if (time != NULL && time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_time = new ::google::protobuf::Timestamp;
    new_time->CopyFrom(*time);
    time = new_time;
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.action.EventActionConnection.time)
}

// optional .google.protobuf.BoolValue removed = 5;
bool EventActionConnection::has_removed() const {
  return !_is_default_instance_ && removed_ != NULL;
}
void EventActionConnection::clear_removed() {
  if (GetArenaNoVirtual() == NULL && removed_ != NULL) delete removed_;
  removed_ = NULL;
}
const ::google::protobuf::BoolValue& EventActionConnection::removed() const {
  // @@protoc_insertion_point(field_get:mtm.event.action.EventActionConnection.removed)
  return removed_ != NULL ? *removed_ : *default_instance_->removed_;
}
::google::protobuf::BoolValue* EventActionConnection::mutable_removed() {
  
  if (removed_ == NULL) {
    removed_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.action.EventActionConnection.removed)
  return removed_;
}
::google::protobuf::BoolValue* EventActionConnection::release_removed() {
  // @@protoc_insertion_point(field_release:mtm.event.action.EventActionConnection.removed)
  
  ::google::protobuf::BoolValue* temp = removed_;
  removed_ = NULL;
  return temp;
}
void EventActionConnection::set_allocated_removed(::google::protobuf::BoolValue* removed) {
  delete removed_;
  if (removed != NULL && removed->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_removed = new ::google::protobuf::BoolValue;
    new_removed->CopyFrom(*removed);
    removed = new_removed;
  }
  removed_ = removed;
  if (removed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.action.EventActionConnection.removed)
}

// repeated .mtm.event.Argument arguments = 8;
int EventActionConnection::arguments_size() const {
  return arguments_.size();
}
void EventActionConnection::clear_arguments() {
  arguments_.Clear();
}
const ::mtm::event::Argument& EventActionConnection::arguments(int index) const {
  // @@protoc_insertion_point(field_get:mtm.event.action.EventActionConnection.arguments)
  return arguments_.Get(index);
}
::mtm::event::Argument* EventActionConnection::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.event.action.EventActionConnection.arguments)
  return arguments_.Mutable(index);
}
::mtm::event::Argument* EventActionConnection::add_arguments() {
  // @@protoc_insertion_point(field_add:mtm.event.action.EventActionConnection.arguments)
  return arguments_.Add();
}
::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >*
EventActionConnection::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:mtm.event.action.EventActionConnection.arguments)
  return &arguments_;
}
const ::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >&
EventActionConnection::arguments() const {
  // @@protoc_insertion_point(field_list:mtm.event.action.EventActionConnection.arguments)
  return arguments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventActionConnectionCollection::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventActionConnectionCollection::EventActionConnectionCollection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.event.action.EventActionConnectionCollection)
}

void EventActionConnectionCollection::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EventActionConnectionCollection::EventActionConnectionCollection(const EventActionConnectionCollection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.event.action.EventActionConnectionCollection)
}

void EventActionConnectionCollection::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

EventActionConnectionCollection::~EventActionConnectionCollection() {
  // @@protoc_insertion_point(destructor:mtm.event.action.EventActionConnectionCollection)
  SharedDtor();
}

void EventActionConnectionCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventActionConnectionCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventActionConnectionCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventActionConnectionCollection_descriptor_;
}

const EventActionConnectionCollection& EventActionConnectionCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fevent_2faction_2fevent_5faction_5fconnection_2eproto();
  return *default_instance_;
}

EventActionConnectionCollection* EventActionConnectionCollection::default_instance_ = NULL;

EventActionConnectionCollection* EventActionConnectionCollection::New(::google::protobuf::Arena* arena) const {
  EventActionConnectionCollection* n = new EventActionConnectionCollection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventActionConnectionCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.event.action.EventActionConnectionCollection)
  data_.Clear();
}

bool EventActionConnectionCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.event.action.EventActionConnectionCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mtm.event.action.EventActionConnection data = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.event.action.EventActionConnectionCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.event.action.EventActionConnectionCollection)
  return false;
#undef DO_
}

void EventActionConnectionCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.event.action.EventActionConnectionCollection)
  // repeated .mtm.event.action.EventActionConnection data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.event.action.EventActionConnectionCollection)
}

::google::protobuf::uint8* EventActionConnectionCollection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.event.action.EventActionConnectionCollection)
  // repeated .mtm.event.action.EventActionConnection data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.event.action.EventActionConnectionCollection)
  return target;
}

int EventActionConnectionCollection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.event.action.EventActionConnectionCollection)
  int total_size = 0;

  // repeated .mtm.event.action.EventActionConnection data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventActionConnectionCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.event.action.EventActionConnectionCollection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EventActionConnectionCollection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EventActionConnectionCollection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.event.action.EventActionConnectionCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.event.action.EventActionConnectionCollection)
    MergeFrom(*source);
  }
}

void EventActionConnectionCollection::MergeFrom(const EventActionConnectionCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.event.action.EventActionConnectionCollection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
}

void EventActionConnectionCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.event.action.EventActionConnectionCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventActionConnectionCollection::CopyFrom(const EventActionConnectionCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.event.action.EventActionConnectionCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventActionConnectionCollection::IsInitialized() const {

  return true;
}

void EventActionConnectionCollection::Swap(EventActionConnectionCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventActionConnectionCollection::InternalSwap(EventActionConnectionCollection* other) {
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventActionConnectionCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventActionConnectionCollection_descriptor_;
  metadata.reflection = EventActionConnectionCollection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventActionConnectionCollection

// repeated .mtm.event.action.EventActionConnection data = 1;
int EventActionConnectionCollection::data_size() const {
  return data_.size();
}
void EventActionConnectionCollection::clear_data() {
  data_.Clear();
}
const ::mtm::event::action::EventActionConnection& EventActionConnectionCollection::data(int index) const {
  // @@protoc_insertion_point(field_get:mtm.event.action.EventActionConnectionCollection.data)
  return data_.Get(index);
}
::mtm::event::action::EventActionConnection* EventActionConnectionCollection::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.event.action.EventActionConnectionCollection.data)
  return data_.Mutable(index);
}
::mtm::event::action::EventActionConnection* EventActionConnectionCollection::add_data() {
  // @@protoc_insertion_point(field_add:mtm.event.action.EventActionConnectionCollection.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::mtm::event::action::EventActionConnection >*
EventActionConnectionCollection::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:mtm.event.action.EventActionConnectionCollection.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::mtm::event::action::EventActionConnection >&
EventActionConnectionCollection::data() const {
  // @@protoc_insertion_point(field_list:mtm.event.action.EventActionConnectionCollection.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace action
}  // namespace event
}  // namespace mtm

// @@protoc_insertion_point(global_scope)
