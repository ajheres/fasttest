// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/event/action/action_descriptor.proto

#ifndef PROTOBUF_mtm_2fevent_2faction_2faction_5fdescriptor_2eproto__INCLUDED
#define PROTOBUF_mtm_2fevent_2faction_2faction_5fdescriptor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "mtm/event/argument_descriptor.pb.h"
#include "mtm/common_types.pb.h"
// @@protoc_insertion_point(includes)

namespace mtm {
namespace event {
namespace action {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mtm_2fevent_2faction_2faction_5fdescriptor_2eproto();
void protobuf_AssignDesc_mtm_2fevent_2faction_2faction_5fdescriptor_2eproto();
void protobuf_ShutdownFile_mtm_2fevent_2faction_2faction_5fdescriptor_2eproto();

class ActionDescriptor;
class ActionDescriptorCollection;

// ===================================================================

class ActionDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.event.action.ActionDescriptor) */ {
 public:
  ActionDescriptor();
  virtual ~ActionDescriptor();

  ActionDescriptor(const ActionDescriptor& from);

  inline ActionDescriptor& operator=(const ActionDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionDescriptor& default_instance();

  void Swap(ActionDescriptor* other);

  // implements Message ----------------------------------------------

  inline ActionDescriptor* New() const { return New(NULL); }

  ActionDescriptor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionDescriptor& from);
  void MergeFrom(const ActionDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mtm.Uuid descriptorId = 1;
  bool has_descriptorid() const;
  void clear_descriptorid();
  static const int kDescriptorIdFieldNumber = 1;
  const ::mtm::Uuid& descriptorid() const;
  ::mtm::Uuid* mutable_descriptorid();
  ::mtm::Uuid* release_descriptorid();
  void set_allocated_descriptorid(::mtm::Uuid* descriptorid);

  // optional uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional .mtm.Uuid providerId = 3;
  bool has_providerid() const;
  void clear_providerid();
  static const int kProviderIdFieldNumber = 3;
  const ::mtm::Uuid& providerid() const;
  ::mtm::Uuid* mutable_providerid();
  ::mtm::Uuid* release_providerid();
  void set_allocated_providerid(::mtm::Uuid* providerid);

  // optional .google.protobuf.StringValue displayName = 5;
  bool has_displayname() const;
  void clear_displayname();
  static const int kDisplayNameFieldNumber = 5;
  const ::google::protobuf::StringValue& displayname() const;
  ::google::protobuf::StringValue* mutable_displayname();
  ::google::protobuf::StringValue* release_displayname();
  void set_allocated_displayname(::google::protobuf::StringValue* displayname);

  // optional .google.protobuf.StringValue shortDisplayName = 6;
  bool has_shortdisplayname() const;
  void clear_shortdisplayname();
  static const int kShortDisplayNameFieldNumber = 6;
  const ::google::protobuf::StringValue& shortdisplayname() const;
  ::google::protobuf::StringValue* mutable_shortdisplayname();
  ::google::protobuf::StringValue* release_shortdisplayname();
  void set_allocated_shortdisplayname(::google::protobuf::StringValue* shortdisplayname);

  // optional .google.protobuf.StringValue description = 7;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 7;
  const ::google::protobuf::StringValue& description() const;
  ::google::protobuf::StringValue* mutable_description();
  ::google::protobuf::StringValue* release_description();
  void set_allocated_description(::google::protobuf::StringValue* description);

  // optional .google.protobuf.Timestamp time = 8;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 8;
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* mutable_time();
  ::google::protobuf::Timestamp* release_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);

  // optional .google.protobuf.BoolValue removed = 9;
  bool has_removed() const;
  void clear_removed();
  static const int kRemovedFieldNumber = 9;
  const ::google::protobuf::BoolValue& removed() const;
  ::google::protobuf::BoolValue* mutable_removed();
  ::google::protobuf::BoolValue* release_removed();
  void set_allocated_removed(::google::protobuf::BoolValue* removed);

  // repeated .mtm.event.ArgumentDescriptor arguments = 10;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 10;
  const ::mtm::event::ArgumentDescriptor& arguments(int index) const;
  ::mtm::event::ArgumentDescriptor* mutable_arguments(int index);
  ::mtm::event::ArgumentDescriptor* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor >&
      arguments() const;

  // @@protoc_insertion_point(class_scope:mtm.event.action.ActionDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::mtm::Uuid* descriptorid_;
  ::mtm::Uuid* providerid_;
  ::google::protobuf::StringValue* displayname_;
  ::google::protobuf::StringValue* shortdisplayname_;
  ::google::protobuf::StringValue* description_;
  ::google::protobuf::Timestamp* time_;
  ::google::protobuf::BoolValue* removed_;
  ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor > arguments_;
  ::google::protobuf::uint32 version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2fevent_2faction_2faction_5fdescriptor_2eproto();
  friend void protobuf_AssignDesc_mtm_2fevent_2faction_2faction_5fdescriptor_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fevent_2faction_2faction_5fdescriptor_2eproto();

  void InitAsDefaultInstance();
  static ActionDescriptor* default_instance_;
};
// -------------------------------------------------------------------

class ActionDescriptorCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.event.action.ActionDescriptorCollection) */ {
 public:
  ActionDescriptorCollection();
  virtual ~ActionDescriptorCollection();

  ActionDescriptorCollection(const ActionDescriptorCollection& from);

  inline ActionDescriptorCollection& operator=(const ActionDescriptorCollection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionDescriptorCollection& default_instance();

  void Swap(ActionDescriptorCollection* other);

  // implements Message ----------------------------------------------

  inline ActionDescriptorCollection* New() const { return New(NULL); }

  ActionDescriptorCollection* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionDescriptorCollection& from);
  void MergeFrom(const ActionDescriptorCollection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionDescriptorCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtm.event.action.ActionDescriptor data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::mtm::event::action::ActionDescriptor& data(int index) const;
  ::mtm::event::action::ActionDescriptor* mutable_data(int index);
  ::mtm::event::action::ActionDescriptor* add_data();
  ::google::protobuf::RepeatedPtrField< ::mtm::event::action::ActionDescriptor >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::mtm::event::action::ActionDescriptor >&
      data() const;

  // @@protoc_insertion_point(class_scope:mtm.event.action.ActionDescriptorCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::mtm::event::action::ActionDescriptor > data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2fevent_2faction_2faction_5fdescriptor_2eproto();
  friend void protobuf_AssignDesc_mtm_2fevent_2faction_2faction_5fdescriptor_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fevent_2faction_2faction_5fdescriptor_2eproto();

  void InitAsDefaultInstance();
  static ActionDescriptorCollection* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionDescriptor

// optional .mtm.Uuid descriptorId = 1;
inline bool ActionDescriptor::has_descriptorid() const {
  return !_is_default_instance_ && descriptorid_ != NULL;
}
inline void ActionDescriptor::clear_descriptorid() {
  if (GetArenaNoVirtual() == NULL && descriptorid_ != NULL) delete descriptorid_;
  descriptorid_ = NULL;
}
inline const ::mtm::Uuid& ActionDescriptor::descriptorid() const {
  // @@protoc_insertion_point(field_get:mtm.event.action.ActionDescriptor.descriptorId)
  return descriptorid_ != NULL ? *descriptorid_ : *default_instance_->descriptorid_;
}
inline ::mtm::Uuid* ActionDescriptor::mutable_descriptorid() {
  
  if (descriptorid_ == NULL) {
    descriptorid_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.action.ActionDescriptor.descriptorId)
  return descriptorid_;
}
inline ::mtm::Uuid* ActionDescriptor::release_descriptorid() {
  // @@protoc_insertion_point(field_release:mtm.event.action.ActionDescriptor.descriptorId)
  
  ::mtm::Uuid* temp = descriptorid_;
  descriptorid_ = NULL;
  return temp;
}
inline void ActionDescriptor::set_allocated_descriptorid(::mtm::Uuid* descriptorid) {
  delete descriptorid_;
  descriptorid_ = descriptorid;
  if (descriptorid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.action.ActionDescriptor.descriptorId)
}

// optional uint32 version = 2;
inline void ActionDescriptor::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 ActionDescriptor::version() const {
  // @@protoc_insertion_point(field_get:mtm.event.action.ActionDescriptor.version)
  return version_;
}
inline void ActionDescriptor::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:mtm.event.action.ActionDescriptor.version)
}

// optional .mtm.Uuid providerId = 3;
inline bool ActionDescriptor::has_providerid() const {
  return !_is_default_instance_ && providerid_ != NULL;
}
inline void ActionDescriptor::clear_providerid() {
  if (GetArenaNoVirtual() == NULL && providerid_ != NULL) delete providerid_;
  providerid_ = NULL;
}
inline const ::mtm::Uuid& ActionDescriptor::providerid() const {
  // @@protoc_insertion_point(field_get:mtm.event.action.ActionDescriptor.providerId)
  return providerid_ != NULL ? *providerid_ : *default_instance_->providerid_;
}
inline ::mtm::Uuid* ActionDescriptor::mutable_providerid() {
  
  if (providerid_ == NULL) {
    providerid_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.action.ActionDescriptor.providerId)
  return providerid_;
}
inline ::mtm::Uuid* ActionDescriptor::release_providerid() {
  // @@protoc_insertion_point(field_release:mtm.event.action.ActionDescriptor.providerId)
  
  ::mtm::Uuid* temp = providerid_;
  providerid_ = NULL;
  return temp;
}
inline void ActionDescriptor::set_allocated_providerid(::mtm::Uuid* providerid) {
  delete providerid_;
  providerid_ = providerid;
  if (providerid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.action.ActionDescriptor.providerId)
}

// optional .google.protobuf.StringValue displayName = 5;
inline bool ActionDescriptor::has_displayname() const {
  return !_is_default_instance_ && displayname_ != NULL;
}
inline void ActionDescriptor::clear_displayname() {
  if (GetArenaNoVirtual() == NULL && displayname_ != NULL) delete displayname_;
  displayname_ = NULL;
}
inline const ::google::protobuf::StringValue& ActionDescriptor::displayname() const {
  // @@protoc_insertion_point(field_get:mtm.event.action.ActionDescriptor.displayName)
  return displayname_ != NULL ? *displayname_ : *default_instance_->displayname_;
}
inline ::google::protobuf::StringValue* ActionDescriptor::mutable_displayname() {
  
  if (displayname_ == NULL) {
    displayname_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.action.ActionDescriptor.displayName)
  return displayname_;
}
inline ::google::protobuf::StringValue* ActionDescriptor::release_displayname() {
  // @@protoc_insertion_point(field_release:mtm.event.action.ActionDescriptor.displayName)
  
  ::google::protobuf::StringValue* temp = displayname_;
  displayname_ = NULL;
  return temp;
}
inline void ActionDescriptor::set_allocated_displayname(::google::protobuf::StringValue* displayname) {
  delete displayname_;
  if (displayname != NULL && displayname->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_displayname = new ::google::protobuf::StringValue;
    new_displayname->CopyFrom(*displayname);
    displayname = new_displayname;
  }
  displayname_ = displayname;
  if (displayname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.action.ActionDescriptor.displayName)
}

// optional .google.protobuf.StringValue shortDisplayName = 6;
inline bool ActionDescriptor::has_shortdisplayname() const {
  return !_is_default_instance_ && shortdisplayname_ != NULL;
}
inline void ActionDescriptor::clear_shortdisplayname() {
  if (GetArenaNoVirtual() == NULL && shortdisplayname_ != NULL) delete shortdisplayname_;
  shortdisplayname_ = NULL;
}
inline const ::google::protobuf::StringValue& ActionDescriptor::shortdisplayname() const {
  // @@protoc_insertion_point(field_get:mtm.event.action.ActionDescriptor.shortDisplayName)
  return shortdisplayname_ != NULL ? *shortdisplayname_ : *default_instance_->shortdisplayname_;
}
inline ::google::protobuf::StringValue* ActionDescriptor::mutable_shortdisplayname() {
  
  if (shortdisplayname_ == NULL) {
    shortdisplayname_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.action.ActionDescriptor.shortDisplayName)
  return shortdisplayname_;
}
inline ::google::protobuf::StringValue* ActionDescriptor::release_shortdisplayname() {
  // @@protoc_insertion_point(field_release:mtm.event.action.ActionDescriptor.shortDisplayName)
  
  ::google::protobuf::StringValue* temp = shortdisplayname_;
  shortdisplayname_ = NULL;
  return temp;
}
inline void ActionDescriptor::set_allocated_shortdisplayname(::google::protobuf::StringValue* shortdisplayname) {
  delete shortdisplayname_;
  if (shortdisplayname != NULL && shortdisplayname->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_shortdisplayname = new ::google::protobuf::StringValue;
    new_shortdisplayname->CopyFrom(*shortdisplayname);
    shortdisplayname = new_shortdisplayname;
  }
  shortdisplayname_ = shortdisplayname;
  if (shortdisplayname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.action.ActionDescriptor.shortDisplayName)
}

// optional .google.protobuf.StringValue description = 7;
inline bool ActionDescriptor::has_description() const {
  return !_is_default_instance_ && description_ != NULL;
}
inline void ActionDescriptor::clear_description() {
  if (GetArenaNoVirtual() == NULL && description_ != NULL) delete description_;
  description_ = NULL;
}
inline const ::google::protobuf::StringValue& ActionDescriptor::description() const {
  // @@protoc_insertion_point(field_get:mtm.event.action.ActionDescriptor.description)
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::google::protobuf::StringValue* ActionDescriptor::mutable_description() {
  
  if (description_ == NULL) {
    description_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.action.ActionDescriptor.description)
  return description_;
}
inline ::google::protobuf::StringValue* ActionDescriptor::release_description() {
  // @@protoc_insertion_point(field_release:mtm.event.action.ActionDescriptor.description)
  
  ::google::protobuf::StringValue* temp = description_;
  description_ = NULL;
  return temp;
}
inline void ActionDescriptor::set_allocated_description(::google::protobuf::StringValue* description) {
  delete description_;
  if (description != NULL && description->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_description = new ::google::protobuf::StringValue;
    new_description->CopyFrom(*description);
    description = new_description;
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.action.ActionDescriptor.description)
}

// optional .google.protobuf.Timestamp time = 8;
inline bool ActionDescriptor::has_time() const {
  return !_is_default_instance_ && time_ != NULL;
}
inline void ActionDescriptor::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
}
inline const ::google::protobuf::Timestamp& ActionDescriptor::time() const {
  // @@protoc_insertion_point(field_get:mtm.event.action.ActionDescriptor.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::google::protobuf::Timestamp* ActionDescriptor::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.action.ActionDescriptor.time)
  return time_;
}
inline ::google::protobuf::Timestamp* ActionDescriptor::release_time() {
  // @@protoc_insertion_point(field_release:mtm.event.action.ActionDescriptor.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
inline void ActionDescriptor::set_allocated_time(::google::protobuf::Timestamp* time) {
  delete time_;
  if (time != NULL && time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_time = new ::google::protobuf::Timestamp;
    new_time->CopyFrom(*time);
    time = new_time;
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.action.ActionDescriptor.time)
}

// optional .google.protobuf.BoolValue removed = 9;
inline bool ActionDescriptor::has_removed() const {
  return !_is_default_instance_ && removed_ != NULL;
}
inline void ActionDescriptor::clear_removed() {
  if (GetArenaNoVirtual() == NULL && removed_ != NULL) delete removed_;
  removed_ = NULL;
}
inline const ::google::protobuf::BoolValue& ActionDescriptor::removed() const {
  // @@protoc_insertion_point(field_get:mtm.event.action.ActionDescriptor.removed)
  return removed_ != NULL ? *removed_ : *default_instance_->removed_;
}
inline ::google::protobuf::BoolValue* ActionDescriptor::mutable_removed() {
  
  if (removed_ == NULL) {
    removed_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.action.ActionDescriptor.removed)
  return removed_;
}
inline ::google::protobuf::BoolValue* ActionDescriptor::release_removed() {
  // @@protoc_insertion_point(field_release:mtm.event.action.ActionDescriptor.removed)
  
  ::google::protobuf::BoolValue* temp = removed_;
  removed_ = NULL;
  return temp;
}
inline void ActionDescriptor::set_allocated_removed(::google::protobuf::BoolValue* removed) {
  delete removed_;
  if (removed != NULL && removed->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_removed = new ::google::protobuf::BoolValue;
    new_removed->CopyFrom(*removed);
    removed = new_removed;
  }
  removed_ = removed;
  if (removed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.action.ActionDescriptor.removed)
}

// repeated .mtm.event.ArgumentDescriptor arguments = 10;
inline int ActionDescriptor::arguments_size() const {
  return arguments_.size();
}
inline void ActionDescriptor::clear_arguments() {
  arguments_.Clear();
}
inline const ::mtm::event::ArgumentDescriptor& ActionDescriptor::arguments(int index) const {
  // @@protoc_insertion_point(field_get:mtm.event.action.ActionDescriptor.arguments)
  return arguments_.Get(index);
}
inline ::mtm::event::ArgumentDescriptor* ActionDescriptor::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.event.action.ActionDescriptor.arguments)
  return arguments_.Mutable(index);
}
inline ::mtm::event::ArgumentDescriptor* ActionDescriptor::add_arguments() {
  // @@protoc_insertion_point(field_add:mtm.event.action.ActionDescriptor.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor >*
ActionDescriptor::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:mtm.event.action.ActionDescriptor.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::event::ArgumentDescriptor >&
ActionDescriptor::arguments() const {
  // @@protoc_insertion_point(field_list:mtm.event.action.ActionDescriptor.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// ActionDescriptorCollection

// repeated .mtm.event.action.ActionDescriptor data = 1;
inline int ActionDescriptorCollection::data_size() const {
  return data_.size();
}
inline void ActionDescriptorCollection::clear_data() {
  data_.Clear();
}
inline const ::mtm::event::action::ActionDescriptor& ActionDescriptorCollection::data(int index) const {
  // @@protoc_insertion_point(field_get:mtm.event.action.ActionDescriptorCollection.data)
  return data_.Get(index);
}
inline ::mtm::event::action::ActionDescriptor* ActionDescriptorCollection::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.event.action.ActionDescriptorCollection.data)
  return data_.Mutable(index);
}
inline ::mtm::event::action::ActionDescriptor* ActionDescriptorCollection::add_data() {
  // @@protoc_insertion_point(field_add:mtm.event.action.ActionDescriptorCollection.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::event::action::ActionDescriptor >*
ActionDescriptorCollection::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:mtm.event.action.ActionDescriptorCollection.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::event::action::ActionDescriptor >&
ActionDescriptorCollection::data() const {
  // @@protoc_insertion_point(field_list:mtm.event.action.ActionDescriptorCollection.data)
  return data_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace action
}  // namespace event
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mtm_2fevent_2faction_2faction_5fdescriptor_2eproto__INCLUDED
