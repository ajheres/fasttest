// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/event/argument.proto

#ifndef PROTOBUF_INCLUDED_mtm_2fevent_2fargument_2eproto
#define PROTOBUF_INCLUDED_mtm_2fevent_2fargument_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "mtm/common_types.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fevent_2fargument_2eproto 

namespace protobuf_mtm_2fevent_2fargument_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mtm_2fevent_2fargument_2eproto
namespace mtm {
namespace event {
class Argument;
class ArgumentDefaultTypeInternal;
extern ArgumentDefaultTypeInternal _Argument_default_instance_;
class ArgumentCollection;
class ArgumentCollectionDefaultTypeInternal;
extern ArgumentCollectionDefaultTypeInternal _ArgumentCollection_default_instance_;
}  // namespace event
}  // namespace mtm
namespace google {
namespace protobuf {
template<> ::mtm::event::Argument* Arena::CreateMaybeMessage<::mtm::event::Argument>(Arena*);
template<> ::mtm::event::ArgumentCollection* Arena::CreateMaybeMessage<::mtm::event::ArgumentCollection>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mtm {
namespace event {

// ===================================================================

class Argument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.event.Argument) */ {
 public:
  Argument();
  virtual ~Argument();

  Argument(const Argument& from);

  inline Argument& operator=(const Argument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Argument(Argument&& from) noexcept
    : Argument() {
    *this = ::std::move(from);
  }

  inline Argument& operator=(Argument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Argument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Argument* internal_default_instance() {
    return reinterpret_cast<const Argument*>(
               &_Argument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Argument* other);
  friend void swap(Argument& a, Argument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Argument* New() const final {
    return CreateMaybeMessage<Argument>(NULL);
  }

  Argument* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Argument>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Argument& from);
  void MergeFrom(const Argument& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Argument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string content_string = 2;
  void clear_content_string();
  static const int kContentStringFieldNumber = 2;
  const ::std::string& content_string() const;
  void set_content_string(const ::std::string& value);
  #if LANG_CXX11
  void set_content_string(::std::string&& value);
  #endif
  void set_content_string(const char* value);
  void set_content_string(const char* value, size_t size);
  ::std::string* mutable_content_string();
  ::std::string* release_content_string();
  void set_allocated_content_string(::std::string* content_string);

  // .google.protobuf.Any content = 100;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 100;
  private:
  const ::google::protobuf::Any& _internal_content() const;
  public:
  const ::google::protobuf::Any& content() const;
  ::google::protobuf::Any* release_content();
  ::google::protobuf::Any* mutable_content();
  void set_allocated_content(::google::protobuf::Any* content);

  // @@protoc_insertion_point(class_scope:mtm.event.Argument)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr content_string_;
  ::google::protobuf::Any* content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fevent_2fargument_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ArgumentCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.event.ArgumentCollection) */ {
 public:
  ArgumentCollection();
  virtual ~ArgumentCollection();

  ArgumentCollection(const ArgumentCollection& from);

  inline ArgumentCollection& operator=(const ArgumentCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArgumentCollection(ArgumentCollection&& from) noexcept
    : ArgumentCollection() {
    *this = ::std::move(from);
  }

  inline ArgumentCollection& operator=(ArgumentCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgumentCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArgumentCollection* internal_default_instance() {
    return reinterpret_cast<const ArgumentCollection*>(
               &_ArgumentCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ArgumentCollection* other);
  friend void swap(ArgumentCollection& a, ArgumentCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArgumentCollection* New() const final {
    return CreateMaybeMessage<ArgumentCollection>(NULL);
  }

  ArgumentCollection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArgumentCollection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArgumentCollection& from);
  void MergeFrom(const ArgumentCollection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArgumentCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mtm.event.Argument arguments = 1;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 1;
  ::mtm::event::Argument* mutable_arguments(int index);
  ::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >*
      mutable_arguments();
  const ::mtm::event::Argument& arguments(int index) const;
  ::mtm::event::Argument* add_arguments();
  const ::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >&
      arguments() const;

  // @@protoc_insertion_point(class_scope:mtm.event.ArgumentCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mtm::event::Argument > arguments_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fevent_2fargument_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Argument

// string name = 1;
inline void Argument::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Argument::name() const {
  // @@protoc_insertion_point(field_get:mtm.event.Argument.name)
  return name_.GetNoArena();
}
inline void Argument::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.event.Argument.name)
}
#if LANG_CXX11
inline void Argument::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtm.event.Argument.name)
}
#endif
inline void Argument::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.event.Argument.name)
}
inline void Argument::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.event.Argument.name)
}
inline ::std::string* Argument::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mtm.event.Argument.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_name() {
  // @@protoc_insertion_point(field_release:mtm.event.Argument.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Argument.name)
}

// string content_string = 2;
inline void Argument::clear_content_string() {
  content_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Argument::content_string() const {
  // @@protoc_insertion_point(field_get:mtm.event.Argument.content_string)
  return content_string_.GetNoArena();
}
inline void Argument::set_content_string(const ::std::string& value) {
  
  content_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.event.Argument.content_string)
}
#if LANG_CXX11
inline void Argument::set_content_string(::std::string&& value) {
  
  content_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtm.event.Argument.content_string)
}
#endif
inline void Argument::set_content_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.event.Argument.content_string)
}
inline void Argument::set_content_string(const char* value, size_t size) {
  
  content_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.event.Argument.content_string)
}
inline ::std::string* Argument::mutable_content_string() {
  
  // @@protoc_insertion_point(field_mutable:mtm.event.Argument.content_string)
  return content_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_content_string() {
  // @@protoc_insertion_point(field_release:mtm.event.Argument.content_string)
  
  return content_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_allocated_content_string(::std::string* content_string) {
  if (content_string != NULL) {
    
  } else {
    
  }
  content_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_string);
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Argument.content_string)
}

// .google.protobuf.Any content = 100;
inline bool Argument::has_content() const {
  return this != internal_default_instance() && content_ != NULL;
}
inline const ::google::protobuf::Any& Argument::_internal_content() const {
  return *content_;
}
inline const ::google::protobuf::Any& Argument::content() const {
  const ::google::protobuf::Any* p = content_;
  // @@protoc_insertion_point(field_get:mtm.event.Argument.content)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* Argument::release_content() {
  // @@protoc_insertion_point(field_release:mtm.event.Argument.content)
  
  ::google::protobuf::Any* temp = content_;
  content_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* Argument::mutable_content() {
  
  if (content_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArenaNoVirtual());
    content_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.Argument.content)
  return content_;
}
inline void Argument::set_allocated_content(::google::protobuf::Any* content) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(content_);
  }
  if (content) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      content = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Argument.content)
}

// -------------------------------------------------------------------

// ArgumentCollection

// repeated .mtm.event.Argument arguments = 1;
inline int ArgumentCollection::arguments_size() const {
  return arguments_.size();
}
inline void ArgumentCollection::clear_arguments() {
  arguments_.Clear();
}
inline ::mtm::event::Argument* ArgumentCollection::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.event.ArgumentCollection.arguments)
  return arguments_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >*
ArgumentCollection::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:mtm.event.ArgumentCollection.arguments)
  return &arguments_;
}
inline const ::mtm::event::Argument& ArgumentCollection::arguments(int index) const {
  // @@protoc_insertion_point(field_get:mtm.event.ArgumentCollection.arguments)
  return arguments_.Get(index);
}
inline ::mtm::event::Argument* ArgumentCollection::add_arguments() {
  // @@protoc_insertion_point(field_add:mtm.event.ArgumentCollection.arguments)
  return arguments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >&
ArgumentCollection::arguments() const {
  // @@protoc_insertion_point(field_list:mtm.event.ArgumentCollection.arguments)
  return arguments_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mtm_2fevent_2fargument_2eproto
