// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/event/event.proto

#include "mtm/event/event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_mtm_2fcommon_5ftypes_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fcommon_5ftypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Uuid;
}  // namespace protobuf_mtm_2fcommon_5ftypes_2eproto
namespace protobuf_mtm_2fevent_2fargument_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fevent_2fargument_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Argument;
}  // namespace protobuf_mtm_2fevent_2fargument_2eproto
namespace mtm {
namespace event {
class EventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Event>
      _instance;
} _Event_default_instance_;
}  // namespace event
}  // namespace mtm
namespace protobuf_mtm_2fevent_2fevent_2eproto {
static void InitDefaultsEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mtm::event::_Event_default_instance_;
    new (ptr) ::mtm::event::Event();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mtm::event::Event::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Event =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsEvent}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_mtm_2fcommon_5ftypes_2eproto::scc_info_Uuid.base,
      &protobuf_mtm_2fevent_2fargument_2eproto::scc_info_Argument.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Event.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::event::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::event::Event, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::event::Event, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::event::Event, event_type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::event::Event, source_system_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::event::Event, source_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::event::Event, sent_by_system_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::event::Event, sent_by_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::event::Event, operator_account_system_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mtm::event::Event, arguments_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mtm::event::Event)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mtm::event::_Event_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mtm/event/event.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025mtm/event/event.proto\022\tmtm.event\032\037goog"
      "le/protobuf/timestamp.proto\032\026mtm/common_"
      "types.proto\032\030mtm/event/argument.proto\"\254\002"
      "\n\005Event\022(\n\004time\030\001 \001(\0132\032.google.protobuf."
      "Timestamp\022\025\n\002id\030\002 \001(\0132\t.mtm.Uuid\022 \n\reven"
      "t_type_id\030\003 \001(\0132\t.mtm.Uuid\022\030\n\020source_sys"
      "tem_id\030\004 \001(\r\022\036\n\013source_type\030\005 \001(\0132\t.mtm."
      "Uuid\022\031\n\021sent_by_system_id\030\006 \001(\r\022\037\n\014sent_"
      "by_type\030\007 \001(\0132\t.mtm.Uuid\022\"\n\032operator_acc"
      "ount_system_id\030\010 \001(\r\022&\n\targuments\030\n \003(\0132"
      "\023.mtm.event.Argumentb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 428);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/event/event.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_mtm_2fcommon_5ftypes_2eproto::AddDescriptors();
  ::protobuf_mtm_2fevent_2fargument_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mtm_2fevent_2fevent_2eproto
namespace mtm {
namespace event {

// ===================================================================

void Event::InitAsDefaultInstance() {
  ::mtm::event::_Event_default_instance_._instance.get_mutable()->time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::mtm::event::_Event_default_instance_._instance.get_mutable()->id_ = const_cast< ::mtm::Uuid*>(
      ::mtm::Uuid::internal_default_instance());
  ::mtm::event::_Event_default_instance_._instance.get_mutable()->event_type_id_ = const_cast< ::mtm::Uuid*>(
      ::mtm::Uuid::internal_default_instance());
  ::mtm::event::_Event_default_instance_._instance.get_mutable()->source_type_ = const_cast< ::mtm::Uuid*>(
      ::mtm::Uuid::internal_default_instance());
  ::mtm::event::_Event_default_instance_._instance.get_mutable()->sent_by_type_ = const_cast< ::mtm::Uuid*>(
      ::mtm::Uuid::internal_default_instance());
}
void Event::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
}
void Event::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void Event::clear_event_type_id() {
  if (GetArenaNoVirtual() == NULL && event_type_id_ != NULL) {
    delete event_type_id_;
  }
  event_type_id_ = NULL;
}
void Event::clear_source_type() {
  if (GetArenaNoVirtual() == NULL && source_type_ != NULL) {
    delete source_type_;
  }
  source_type_ = NULL;
}
void Event::clear_sent_by_type() {
  if (GetArenaNoVirtual() == NULL && sent_by_type_ != NULL) {
    delete sent_by_type_;
  }
  sent_by_type_ = NULL;
}
void Event::clear_arguments() {
  arguments_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kTimeFieldNumber;
const int Event::kIdFieldNumber;
const int Event::kEventTypeIdFieldNumber;
const int Event::kSourceSystemIdFieldNumber;
const int Event::kSourceTypeFieldNumber;
const int Event::kSentBySystemIdFieldNumber;
const int Event::kSentByTypeFieldNumber;
const int Event::kOperatorAccountSystemIdFieldNumber;
const int Event::kArgumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mtm_2fevent_2fevent_2eproto::scc_info_Event.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.event.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time()) {
    time_ = new ::google::protobuf::Timestamp(*from.time_);
  } else {
    time_ = NULL;
  }
  if (from.has_id()) {
    id_ = new ::mtm::Uuid(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_event_type_id()) {
    event_type_id_ = new ::mtm::Uuid(*from.event_type_id_);
  } else {
    event_type_id_ = NULL;
  }
  if (from.has_source_type()) {
    source_type_ = new ::mtm::Uuid(*from.source_type_);
  } else {
    source_type_ = NULL;
  }
  if (from.has_sent_by_type()) {
    sent_by_type_ = new ::mtm::Uuid(*from.sent_by_type_);
  } else {
    sent_by_type_ = NULL;
  }
  ::memcpy(&source_system_id_, &from.source_system_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&operator_account_system_id_) -
    reinterpret_cast<char*>(&source_system_id_)) + sizeof(operator_account_system_id_));
  // @@protoc_insertion_point(copy_constructor:mtm.event.Event)
}

void Event::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator_account_system_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(operator_account_system_id_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:mtm.event.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete event_type_id_;
  if (this != internal_default_instance()) delete source_type_;
  if (this != internal_default_instance()) delete sent_by_type_;
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  ::protobuf_mtm_2fevent_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fevent_2fevent_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event& Event::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mtm_2fevent_2fevent_2eproto::scc_info_Event.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.event.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && event_type_id_ != NULL) {
    delete event_type_id_;
  }
  event_type_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_type_ != NULL) {
    delete source_type_;
  }
  source_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && sent_by_type_ != NULL) {
    delete sent_by_type_;
  }
  sent_by_type_ = NULL;
  ::memset(&source_system_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operator_account_system_id_) -
      reinterpret_cast<char*>(&source_system_id_)) + sizeof(operator_account_system_id_));
  _internal_metadata_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.event.Event)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.Uuid id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.Uuid event_type_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event_type_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 source_system_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_system_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.Uuid source_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sent_by_system_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sent_by_system_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mtm.Uuid sent_by_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sent_by_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 operator_account_system_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operator_account_system_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mtm.event.Argument arguments = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.event.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.event.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.event.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_time(), output);
  }

  // .mtm.Uuid id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_id(), output);
  }

  // .mtm.Uuid event_type_id = 3;
  if (this->has_event_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_event_type_id(), output);
  }

  // uint32 source_system_id = 4;
  if (this->source_system_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_system_id(), output);
  }

  // .mtm.Uuid source_type = 5;
  if (this->has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_source_type(), output);
  }

  // uint32 sent_by_system_id = 6;
  if (this->sent_by_system_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sent_by_system_id(), output);
  }

  // .mtm.Uuid sent_by_type = 7;
  if (this->has_sent_by_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_sent_by_type(), output);
  }

  // uint32 operator_account_system_id = 8;
  if (this->operator_account_system_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->operator_account_system_id(), output);
  }

  // repeated .mtm.event.Argument arguments = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arguments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->arguments(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mtm.event.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mtm.event.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_time(), deterministic, target);
  }

  // .mtm.Uuid id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_id(), deterministic, target);
  }

  // .mtm.Uuid event_type_id = 3;
  if (this->has_event_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_event_type_id(), deterministic, target);
  }

  // uint32 source_system_id = 4;
  if (this->source_system_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_system_id(), target);
  }

  // .mtm.Uuid source_type = 5;
  if (this->has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_source_type(), deterministic, target);
  }

  // uint32 sent_by_system_id = 6;
  if (this->sent_by_system_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sent_by_system_id(), target);
  }

  // .mtm.Uuid sent_by_type = 7;
  if (this->has_sent_by_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_sent_by_type(), deterministic, target);
  }

  // uint32 operator_account_system_id = 8;
  if (this->operator_account_system_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->operator_account_system_id(), target);
  }

  // repeated .mtm.event.Argument arguments = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arguments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->arguments(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mtm.event.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.event.Event)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .mtm.event.Argument arguments = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->arguments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->arguments(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .mtm.Uuid id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .mtm.Uuid event_type_id = 3;
  if (this->has_event_type_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *event_type_id_);
  }

  // .mtm.Uuid source_type = 5;
  if (this->has_source_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *source_type_);
  }

  // .mtm.Uuid sent_by_type = 7;
  if (this->has_sent_by_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sent_by_type_);
  }

  // uint32 source_system_id = 4;
  if (this->source_system_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_system_id());
  }

  // uint32 sent_by_system_id = 6;
  if (this->sent_by_system_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sent_by_system_id());
  }

  // uint32 operator_account_system_id = 8;
  if (this->operator_account_system_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->operator_account_system_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.event.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.event.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.event.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.event.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  if (from.has_time()) {
    mutable_time()->::google::protobuf::Timestamp::MergeFrom(from.time());
  }
  if (from.has_id()) {
    mutable_id()->::mtm::Uuid::MergeFrom(from.id());
  }
  if (from.has_event_type_id()) {
    mutable_event_type_id()->::mtm::Uuid::MergeFrom(from.event_type_id());
  }
  if (from.has_source_type()) {
    mutable_source_type()->::mtm::Uuid::MergeFrom(from.source_type());
  }
  if (from.has_sent_by_type()) {
    mutable_sent_by_type()->::mtm::Uuid::MergeFrom(from.sent_by_type());
  }
  if (from.source_system_id() != 0) {
    set_source_system_id(from.source_system_id());
  }
  if (from.sent_by_system_id() != 0) {
    set_sent_by_system_id(from.sent_by_system_id());
  }
  if (from.operator_account_system_id() != 0) {
    set_operator_account_system_id(from.operator_account_system_id());
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.event.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.event.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  using std::swap;
  CastToBase(&arguments_)->InternalSwap(CastToBase(&other->arguments_));
  swap(time_, other->time_);
  swap(id_, other->id_);
  swap(event_type_id_, other->event_type_id_);
  swap(source_type_, other->source_type_);
  swap(sent_by_type_, other->sent_by_type_);
  swap(source_system_id_, other->source_system_id_);
  swap(sent_by_system_id_, other->sent_by_system_id_);
  swap(operator_account_system_id_, other->operator_account_system_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_mtm_2fevent_2fevent_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mtm_2fevent_2fevent_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace event
}  // namespace mtm
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mtm::event::Event* Arena::CreateMaybeMessage< ::mtm::event::Event >(Arena* arena) {
  return Arena::CreateInternal< ::mtm::event::Event >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
