// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/event/event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtm/event/event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mtm {
namespace event {

namespace {

const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mtm_2fevent_2fevent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mtm_2fevent_2fevent_2eproto() {
  protobuf_AddDesc_mtm_2fevent_2fevent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mtm/event/event.proto");
  GOOGLE_CHECK(file != NULL);
  Event_descriptor_ = file->message_type(0);
  static const int Event_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, source_system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, sent_by_system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, sent_by_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, operator_account_system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, arguments_),
  };
  Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      -1,
      -1,
      -1,
      sizeof(Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mtm_2fevent_2fevent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Event_descriptor_, &Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mtm_2fevent_2fevent_2eproto() {
  delete Event::default_instance_;
  delete Event_reflection_;
}

void protobuf_AddDesc_mtm_2fevent_2fevent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mtm_2fevent_2fevent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2ftimestamp_2eproto();
  ::mtm::protobuf_AddDesc_mtm_2fcommon_5ftypes_2eproto();
  ::mtm::event::protobuf_AddDesc_mtm_2fevent_2fargument_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025mtm/event/event.proto\022\tmtm.event\032\037goog"
    "le/protobuf/timestamp.proto\032\026mtm/common_"
    "types.proto\032\030mtm/event/argument.proto\"\254\002"
    "\n\005Event\022(\n\004time\030\001 \001(\0132\032.google.protobuf."
    "Timestamp\022\025\n\002id\030\002 \001(\0132\t.mtm.Uuid\022 \n\reven"
    "t_type_id\030\003 \001(\0132\t.mtm.Uuid\022\030\n\020source_sys"
    "tem_id\030\004 \001(\r\022\036\n\013source_type\030\005 \001(\0132\t.mtm."
    "Uuid\022\031\n\021sent_by_system_id\030\006 \001(\r\022\037\n\014sent_"
    "by_type\030\007 \001(\0132\t.mtm.Uuid\022\"\n\032operator_acc"
    "ount_system_id\030\010 \001(\r\022&\n\targuments\030\n \003(\0132"
    "\023.mtm.event.Argumentb\006proto3", 428);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtm/event/event.proto", &protobuf_RegisterTypes);
  Event::default_instance_ = new Event();
  Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtm_2fevent_2fevent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtm_2fevent_2fevent_2eproto {
  StaticDescriptorInitializer_mtm_2fevent_2fevent_2eproto() {
    protobuf_AddDesc_mtm_2fevent_2fevent_2eproto();
  }
} static_descriptor_initializer_mtm_2fevent_2fevent_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kTimeFieldNumber;
const int Event::kIdFieldNumber;
const int Event::kEventTypeIdFieldNumber;
const int Event::kSourceSystemIdFieldNumber;
const int Event::kSourceTypeFieldNumber;
const int Event::kSentBySystemIdFieldNumber;
const int Event::kSentByTypeFieldNumber;
const int Event::kOperatorAccountSystemIdFieldNumber;
const int Event::kArgumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mtm.event.Event)
}

void Event::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  time_ = const_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::Timestamp::default_instance());
  id_ = const_cast< ::mtm::Uuid*>(&::mtm::Uuid::default_instance());
  event_type_id_ = const_cast< ::mtm::Uuid*>(&::mtm::Uuid::default_instance());
  source_type_ = const_cast< ::mtm::Uuid*>(&::mtm::Uuid::default_instance());
  sent_by_type_ = const_cast< ::mtm::Uuid*>(&::mtm::Uuid::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mtm.event.Event)
}

void Event::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_ = NULL;
  id_ = NULL;
  event_type_id_ = NULL;
  source_system_id_ = 0u;
  source_type_ = NULL;
  sent_by_system_id_ = 0u;
  sent_by_type_ = NULL;
  operator_account_system_id_ = 0u;
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:mtm.event.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
    delete id_;
    delete event_type_id_;
    delete source_type_;
    delete sent_by_type_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtm_2fevent_2fevent_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:mtm.event.Event)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Event, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Event*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(source_system_id_, sent_by_system_id_);
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && event_type_id_ != NULL) delete event_type_id_;
  event_type_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_type_ != NULL) delete source_type_;
  source_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && sent_by_type_ != NULL) delete sent_by_type_;
  sent_by_type_ = NULL;
  operator_account_system_id_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  arguments_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mtm.event.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.Timestamp time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional .mtm.Uuid id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_event_type_id;
        break;
      }

      // optional .mtm.Uuid event_type_id = 3;
      case 3: {
        if (tag == 26) {
         parse_event_type_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_type_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_source_system_id;
        break;
      }

      // optional uint32 source_system_id = 4;
      case 4: {
        if (tag == 32) {
         parse_source_system_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_system_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_source_type;
        break;
      }

      // optional .mtm.Uuid source_type = 5;
      case 5: {
        if (tag == 42) {
         parse_source_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sent_by_system_id;
        break;
      }

      // optional uint32 sent_by_system_id = 6;
      case 6: {
        if (tag == 48) {
         parse_sent_by_system_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sent_by_system_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sent_by_type;
        break;
      }

      // optional .mtm.Uuid sent_by_type = 7;
      case 7: {
        if (tag == 58) {
         parse_sent_by_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sent_by_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_operator_account_system_id;
        break;
      }

      // optional uint32 operator_account_system_id = 8;
      case 8: {
        if (tag == 64) {
         parse_operator_account_system_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operator_account_system_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_arguments;
        break;
      }

      // repeated .mtm.event.Argument arguments = 10;
      case 10: {
        if (tag == 82) {
         parse_arguments:
          DO_(input->IncrementRecursionDepth());
         parse_loop_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_arguments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_arguments;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mtm.event.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mtm.event.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mtm.event.Event)
  // optional .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->time_, output);
  }

  // optional .mtm.Uuid id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->id_, output);
  }

  // optional .mtm.Uuid event_type_id = 3;
  if (this->has_event_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->event_type_id_, output);
  }

  // optional uint32 source_system_id = 4;
  if (this->source_system_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_system_id(), output);
  }

  // optional .mtm.Uuid source_type = 5;
  if (this->has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->source_type_, output);
  }

  // optional uint32 sent_by_system_id = 6;
  if (this->sent_by_system_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sent_by_system_id(), output);
  }

  // optional .mtm.Uuid sent_by_type = 7;
  if (this->has_sent_by_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->sent_by_type_, output);
  }

  // optional uint32 operator_account_system_id = 8;
  if (this->operator_account_system_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->operator_account_system_id(), output);
  }

  // repeated .mtm.event.Argument arguments = 10;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->arguments(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mtm.event.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mtm.event.Event)
  // optional .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->time_, false, target);
  }

  // optional .mtm.Uuid id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->id_, false, target);
  }

  // optional .mtm.Uuid event_type_id = 3;
  if (this->has_event_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->event_type_id_, false, target);
  }

  // optional uint32 source_system_id = 4;
  if (this->source_system_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_system_id(), target);
  }

  // optional .mtm.Uuid source_type = 5;
  if (this->has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->source_type_, false, target);
  }

  // optional uint32 sent_by_system_id = 6;
  if (this->sent_by_system_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sent_by_system_id(), target);
  }

  // optional .mtm.Uuid sent_by_type = 7;
  if (this->has_sent_by_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->sent_by_type_, false, target);
  }

  // optional uint32 operator_account_system_id = 8;
  if (this->operator_account_system_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->operator_account_system_id(), target);
  }

  // repeated .mtm.event.Argument arguments = 10;
  for (unsigned int i = 0, n = this->arguments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->arguments(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mtm.event.Event)
  return target;
}

int Event::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mtm.event.Event)
  int total_size = 0;

  // optional .google.protobuf.Timestamp time = 1;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);
  }

  // optional .mtm.Uuid id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // optional .mtm.Uuid event_type_id = 3;
  if (this->has_event_type_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->event_type_id_);
  }

  // optional uint32 source_system_id = 4;
  if (this->source_system_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_system_id());
  }

  // optional .mtm.Uuid source_type = 5;
  if (this->has_source_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_type_);
  }

  // optional uint32 sent_by_system_id = 6;
  if (this->sent_by_system_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sent_by_system_id());
  }

  // optional .mtm.Uuid sent_by_type = 7;
  if (this->has_sent_by_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sent_by_type_);
  }

  // optional uint32 operator_account_system_id = 8;
  if (this->operator_account_system_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->operator_account_system_id());
  }

  // repeated .mtm.event.Argument arguments = 10;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mtm.event.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Event* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mtm.event.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mtm.event.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mtm.event.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  arguments_.MergeFrom(from.arguments_);
  if (from.has_time()) {
    mutable_time()->::google::protobuf::Timestamp::MergeFrom(from.time());
  }
  if (from.has_id()) {
    mutable_id()->::mtm::Uuid::MergeFrom(from.id());
  }
  if (from.has_event_type_id()) {
    mutable_event_type_id()->::mtm::Uuid::MergeFrom(from.event_type_id());
  }
  if (from.source_system_id() != 0) {
    set_source_system_id(from.source_system_id());
  }
  if (from.has_source_type()) {
    mutable_source_type()->::mtm::Uuid::MergeFrom(from.source_type());
  }
  if (from.sent_by_system_id() != 0) {
    set_sent_by_system_id(from.sent_by_system_id());
  }
  if (from.has_sent_by_type()) {
    mutable_sent_by_type()->::mtm::Uuid::MergeFrom(from.sent_by_type());
  }
  if (from.operator_account_system_id() != 0) {
    set_operator_account_system_id(from.operator_account_system_id());
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mtm.event.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mtm.event.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  std::swap(time_, other->time_);
  std::swap(id_, other->id_);
  std::swap(event_type_id_, other->event_type_id_);
  std::swap(source_system_id_, other->source_system_id_);
  std::swap(source_type_, other->source_type_);
  std::swap(sent_by_system_id_, other->sent_by_system_id_);
  std::swap(sent_by_type_, other->sent_by_type_);
  std::swap(operator_account_system_id_, other->operator_account_system_id_);
  arguments_.UnsafeArenaSwap(&other->arguments_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// optional .google.protobuf.Timestamp time = 1;
bool Event::has_time() const {
  return !_is_default_instance_ && time_ != NULL;
}
void Event::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
}
const ::google::protobuf::Timestamp& Event::time() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
::google::protobuf::Timestamp* Event::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.Event.time)
  return time_;
}
::google::protobuf::Timestamp* Event::release_time() {
  // @@protoc_insertion_point(field_release:mtm.event.Event.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
void Event::set_allocated_time(::google::protobuf::Timestamp* time) {
  delete time_;
  if (time != NULL && time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_time = new ::google::protobuf::Timestamp;
    new_time->CopyFrom(*time);
    time = new_time;
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Event.time)
}

// optional .mtm.Uuid id = 2;
bool Event::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
void Event::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::mtm::Uuid& Event::id() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::mtm::Uuid* Event::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.Event.id)
  return id_;
}
::mtm::Uuid* Event::release_id() {
  // @@protoc_insertion_point(field_release:mtm.event.Event.id)
  
  ::mtm::Uuid* temp = id_;
  id_ = NULL;
  return temp;
}
void Event::set_allocated_id(::mtm::Uuid* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Event.id)
}

// optional .mtm.Uuid event_type_id = 3;
bool Event::has_event_type_id() const {
  return !_is_default_instance_ && event_type_id_ != NULL;
}
void Event::clear_event_type_id() {
  if (GetArenaNoVirtual() == NULL && event_type_id_ != NULL) delete event_type_id_;
  event_type_id_ = NULL;
}
const ::mtm::Uuid& Event::event_type_id() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.event_type_id)
  return event_type_id_ != NULL ? *event_type_id_ : *default_instance_->event_type_id_;
}
::mtm::Uuid* Event::mutable_event_type_id() {
  
  if (event_type_id_ == NULL) {
    event_type_id_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.Event.event_type_id)
  return event_type_id_;
}
::mtm::Uuid* Event::release_event_type_id() {
  // @@protoc_insertion_point(field_release:mtm.event.Event.event_type_id)
  
  ::mtm::Uuid* temp = event_type_id_;
  event_type_id_ = NULL;
  return temp;
}
void Event::set_allocated_event_type_id(::mtm::Uuid* event_type_id) {
  delete event_type_id_;
  event_type_id_ = event_type_id;
  if (event_type_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Event.event_type_id)
}

// optional uint32 source_system_id = 4;
void Event::clear_source_system_id() {
  source_system_id_ = 0u;
}
 ::google::protobuf::uint32 Event::source_system_id() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.source_system_id)
  return source_system_id_;
}
 void Event::set_source_system_id(::google::protobuf::uint32 value) {
  
  source_system_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.event.Event.source_system_id)
}

// optional .mtm.Uuid source_type = 5;
bool Event::has_source_type() const {
  return !_is_default_instance_ && source_type_ != NULL;
}
void Event::clear_source_type() {
  if (GetArenaNoVirtual() == NULL && source_type_ != NULL) delete source_type_;
  source_type_ = NULL;
}
const ::mtm::Uuid& Event::source_type() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.source_type)
  return source_type_ != NULL ? *source_type_ : *default_instance_->source_type_;
}
::mtm::Uuid* Event::mutable_source_type() {
  
  if (source_type_ == NULL) {
    source_type_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.Event.source_type)
  return source_type_;
}
::mtm::Uuid* Event::release_source_type() {
  // @@protoc_insertion_point(field_release:mtm.event.Event.source_type)
  
  ::mtm::Uuid* temp = source_type_;
  source_type_ = NULL;
  return temp;
}
void Event::set_allocated_source_type(::mtm::Uuid* source_type) {
  delete source_type_;
  source_type_ = source_type;
  if (source_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Event.source_type)
}

// optional uint32 sent_by_system_id = 6;
void Event::clear_sent_by_system_id() {
  sent_by_system_id_ = 0u;
}
 ::google::protobuf::uint32 Event::sent_by_system_id() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.sent_by_system_id)
  return sent_by_system_id_;
}
 void Event::set_sent_by_system_id(::google::protobuf::uint32 value) {
  
  sent_by_system_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.event.Event.sent_by_system_id)
}

// optional .mtm.Uuid sent_by_type = 7;
bool Event::has_sent_by_type() const {
  return !_is_default_instance_ && sent_by_type_ != NULL;
}
void Event::clear_sent_by_type() {
  if (GetArenaNoVirtual() == NULL && sent_by_type_ != NULL) delete sent_by_type_;
  sent_by_type_ = NULL;
}
const ::mtm::Uuid& Event::sent_by_type() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.sent_by_type)
  return sent_by_type_ != NULL ? *sent_by_type_ : *default_instance_->sent_by_type_;
}
::mtm::Uuid* Event::mutable_sent_by_type() {
  
  if (sent_by_type_ == NULL) {
    sent_by_type_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.Event.sent_by_type)
  return sent_by_type_;
}
::mtm::Uuid* Event::release_sent_by_type() {
  // @@protoc_insertion_point(field_release:mtm.event.Event.sent_by_type)
  
  ::mtm::Uuid* temp = sent_by_type_;
  sent_by_type_ = NULL;
  return temp;
}
void Event::set_allocated_sent_by_type(::mtm::Uuid* sent_by_type) {
  delete sent_by_type_;
  sent_by_type_ = sent_by_type;
  if (sent_by_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Event.sent_by_type)
}

// optional uint32 operator_account_system_id = 8;
void Event::clear_operator_account_system_id() {
  operator_account_system_id_ = 0u;
}
 ::google::protobuf::uint32 Event::operator_account_system_id() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.operator_account_system_id)
  return operator_account_system_id_;
}
 void Event::set_operator_account_system_id(::google::protobuf::uint32 value) {
  
  operator_account_system_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.event.Event.operator_account_system_id)
}

// repeated .mtm.event.Argument arguments = 10;
int Event::arguments_size() const {
  return arguments_.size();
}
void Event::clear_arguments() {
  arguments_.Clear();
}
const ::mtm::event::Argument& Event::arguments(int index) const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.arguments)
  return arguments_.Get(index);
}
::mtm::event::Argument* Event::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.event.Event.arguments)
  return arguments_.Mutable(index);
}
::mtm::event::Argument* Event::add_arguments() {
  // @@protoc_insertion_point(field_add:mtm.event.Event.arguments)
  return arguments_.Add();
}
::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >*
Event::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:mtm.event.Event.arguments)
  return &arguments_;
}
const ::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >&
Event::arguments() const {
  // @@protoc_insertion_point(field_list:mtm.event.Event.arguments)
  return arguments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace mtm

// @@protoc_insertion_point(global_scope)
