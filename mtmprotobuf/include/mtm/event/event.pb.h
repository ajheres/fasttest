// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/event/event.proto

#ifndef PROTOBUF_mtm_2fevent_2fevent_2eproto__INCLUDED
#define PROTOBUF_mtm_2fevent_2fevent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "mtm/common_types.pb.h"
#include "mtm/event/argument.pb.h"
// @@protoc_insertion_point(includes)

namespace mtm {
namespace event {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mtm_2fevent_2fevent_2eproto();
void protobuf_AssignDesc_mtm_2fevent_2fevent_2eproto();
void protobuf_ShutdownFile_mtm_2fevent_2fevent_2eproto();

class Event;

// ===================================================================

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.event.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  inline Event* New() const { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* mutable_time();
  ::google::protobuf::Timestamp* release_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);

  // optional .mtm.Uuid id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::mtm::Uuid& id() const;
  ::mtm::Uuid* mutable_id();
  ::mtm::Uuid* release_id();
  void set_allocated_id(::mtm::Uuid* id);

  // optional .mtm.Uuid event_type_id = 3;
  bool has_event_type_id() const;
  void clear_event_type_id();
  static const int kEventTypeIdFieldNumber = 3;
  const ::mtm::Uuid& event_type_id() const;
  ::mtm::Uuid* mutable_event_type_id();
  ::mtm::Uuid* release_event_type_id();
  void set_allocated_event_type_id(::mtm::Uuid* event_type_id);

  // optional uint32 source_system_id = 4;
  void clear_source_system_id();
  static const int kSourceSystemIdFieldNumber = 4;
  ::google::protobuf::uint32 source_system_id() const;
  void set_source_system_id(::google::protobuf::uint32 value);

  // optional .mtm.Uuid source_type = 5;
  bool has_source_type() const;
  void clear_source_type();
  static const int kSourceTypeFieldNumber = 5;
  const ::mtm::Uuid& source_type() const;
  ::mtm::Uuid* mutable_source_type();
  ::mtm::Uuid* release_source_type();
  void set_allocated_source_type(::mtm::Uuid* source_type);

  // optional uint32 sent_by_system_id = 6;
  void clear_sent_by_system_id();
  static const int kSentBySystemIdFieldNumber = 6;
  ::google::protobuf::uint32 sent_by_system_id() const;
  void set_sent_by_system_id(::google::protobuf::uint32 value);

  // optional .mtm.Uuid sent_by_type = 7;
  bool has_sent_by_type() const;
  void clear_sent_by_type();
  static const int kSentByTypeFieldNumber = 7;
  const ::mtm::Uuid& sent_by_type() const;
  ::mtm::Uuid* mutable_sent_by_type();
  ::mtm::Uuid* release_sent_by_type();
  void set_allocated_sent_by_type(::mtm::Uuid* sent_by_type);

  // optional uint32 operator_account_system_id = 8;
  void clear_operator_account_system_id();
  static const int kOperatorAccountSystemIdFieldNumber = 8;
  ::google::protobuf::uint32 operator_account_system_id() const;
  void set_operator_account_system_id(::google::protobuf::uint32 value);

  // repeated .mtm.event.Argument arguments = 10;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 10;
  const ::mtm::event::Argument& arguments(int index) const;
  ::mtm::event::Argument* mutable_arguments(int index);
  ::mtm::event::Argument* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >&
      arguments() const;

  // @@protoc_insertion_point(class_scope:mtm.event.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Timestamp* time_;
  ::mtm::Uuid* id_;
  ::mtm::Uuid* event_type_id_;
  ::mtm::Uuid* source_type_;
  ::google::protobuf::uint32 source_system_id_;
  ::google::protobuf::uint32 sent_by_system_id_;
  ::mtm::Uuid* sent_by_type_;
  ::google::protobuf::RepeatedPtrField< ::mtm::event::Argument > arguments_;
  ::google::protobuf::uint32 operator_account_system_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtm_2fevent_2fevent_2eproto();
  friend void protobuf_AssignDesc_mtm_2fevent_2fevent_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fevent_2fevent_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// optional .google.protobuf.Timestamp time = 1;
inline bool Event::has_time() const {
  return !_is_default_instance_ && time_ != NULL;
}
inline void Event::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
}
inline const ::google::protobuf::Timestamp& Event::time() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::google::protobuf::Timestamp* Event::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.Event.time)
  return time_;
}
inline ::google::protobuf::Timestamp* Event::release_time() {
  // @@protoc_insertion_point(field_release:mtm.event.Event.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
inline void Event::set_allocated_time(::google::protobuf::Timestamp* time) {
  delete time_;
  if (time != NULL && time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_time = new ::google::protobuf::Timestamp;
    new_time->CopyFrom(*time);
    time = new_time;
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Event.time)
}

// optional .mtm.Uuid id = 2;
inline bool Event::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void Event::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::mtm::Uuid& Event::id() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::mtm::Uuid* Event::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.Event.id)
  return id_;
}
inline ::mtm::Uuid* Event::release_id() {
  // @@protoc_insertion_point(field_release:mtm.event.Event.id)
  
  ::mtm::Uuid* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Event::set_allocated_id(::mtm::Uuid* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Event.id)
}

// optional .mtm.Uuid event_type_id = 3;
inline bool Event::has_event_type_id() const {
  return !_is_default_instance_ && event_type_id_ != NULL;
}
inline void Event::clear_event_type_id() {
  if (GetArenaNoVirtual() == NULL && event_type_id_ != NULL) delete event_type_id_;
  event_type_id_ = NULL;
}
inline const ::mtm::Uuid& Event::event_type_id() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.event_type_id)
  return event_type_id_ != NULL ? *event_type_id_ : *default_instance_->event_type_id_;
}
inline ::mtm::Uuid* Event::mutable_event_type_id() {
  
  if (event_type_id_ == NULL) {
    event_type_id_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.Event.event_type_id)
  return event_type_id_;
}
inline ::mtm::Uuid* Event::release_event_type_id() {
  // @@protoc_insertion_point(field_release:mtm.event.Event.event_type_id)
  
  ::mtm::Uuid* temp = event_type_id_;
  event_type_id_ = NULL;
  return temp;
}
inline void Event::set_allocated_event_type_id(::mtm::Uuid* event_type_id) {
  delete event_type_id_;
  event_type_id_ = event_type_id;
  if (event_type_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Event.event_type_id)
}

// optional uint32 source_system_id = 4;
inline void Event::clear_source_system_id() {
  source_system_id_ = 0u;
}
inline ::google::protobuf::uint32 Event::source_system_id() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.source_system_id)
  return source_system_id_;
}
inline void Event::set_source_system_id(::google::protobuf::uint32 value) {
  
  source_system_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.event.Event.source_system_id)
}

// optional .mtm.Uuid source_type = 5;
inline bool Event::has_source_type() const {
  return !_is_default_instance_ && source_type_ != NULL;
}
inline void Event::clear_source_type() {
  if (GetArenaNoVirtual() == NULL && source_type_ != NULL) delete source_type_;
  source_type_ = NULL;
}
inline const ::mtm::Uuid& Event::source_type() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.source_type)
  return source_type_ != NULL ? *source_type_ : *default_instance_->source_type_;
}
inline ::mtm::Uuid* Event::mutable_source_type() {
  
  if (source_type_ == NULL) {
    source_type_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.Event.source_type)
  return source_type_;
}
inline ::mtm::Uuid* Event::release_source_type() {
  // @@protoc_insertion_point(field_release:mtm.event.Event.source_type)
  
  ::mtm::Uuid* temp = source_type_;
  source_type_ = NULL;
  return temp;
}
inline void Event::set_allocated_source_type(::mtm::Uuid* source_type) {
  delete source_type_;
  source_type_ = source_type;
  if (source_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Event.source_type)
}

// optional uint32 sent_by_system_id = 6;
inline void Event::clear_sent_by_system_id() {
  sent_by_system_id_ = 0u;
}
inline ::google::protobuf::uint32 Event::sent_by_system_id() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.sent_by_system_id)
  return sent_by_system_id_;
}
inline void Event::set_sent_by_system_id(::google::protobuf::uint32 value) {
  
  sent_by_system_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.event.Event.sent_by_system_id)
}

// optional .mtm.Uuid sent_by_type = 7;
inline bool Event::has_sent_by_type() const {
  return !_is_default_instance_ && sent_by_type_ != NULL;
}
inline void Event::clear_sent_by_type() {
  if (GetArenaNoVirtual() == NULL && sent_by_type_ != NULL) delete sent_by_type_;
  sent_by_type_ = NULL;
}
inline const ::mtm::Uuid& Event::sent_by_type() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.sent_by_type)
  return sent_by_type_ != NULL ? *sent_by_type_ : *default_instance_->sent_by_type_;
}
inline ::mtm::Uuid* Event::mutable_sent_by_type() {
  
  if (sent_by_type_ == NULL) {
    sent_by_type_ = new ::mtm::Uuid;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.Event.sent_by_type)
  return sent_by_type_;
}
inline ::mtm::Uuid* Event::release_sent_by_type() {
  // @@protoc_insertion_point(field_release:mtm.event.Event.sent_by_type)
  
  ::mtm::Uuid* temp = sent_by_type_;
  sent_by_type_ = NULL;
  return temp;
}
inline void Event::set_allocated_sent_by_type(::mtm::Uuid* sent_by_type) {
  delete sent_by_type_;
  sent_by_type_ = sent_by_type;
  if (sent_by_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.event.Event.sent_by_type)
}

// optional uint32 operator_account_system_id = 8;
inline void Event::clear_operator_account_system_id() {
  operator_account_system_id_ = 0u;
}
inline ::google::protobuf::uint32 Event::operator_account_system_id() const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.operator_account_system_id)
  return operator_account_system_id_;
}
inline void Event::set_operator_account_system_id(::google::protobuf::uint32 value) {
  
  operator_account_system_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.event.Event.operator_account_system_id)
}

// repeated .mtm.event.Argument arguments = 10;
inline int Event::arguments_size() const {
  return arguments_.size();
}
inline void Event::clear_arguments() {
  arguments_.Clear();
}
inline const ::mtm::event::Argument& Event::arguments(int index) const {
  // @@protoc_insertion_point(field_get:mtm.event.Event.arguments)
  return arguments_.Get(index);
}
inline ::mtm::event::Argument* Event::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:mtm.event.Event.arguments)
  return arguments_.Mutable(index);
}
inline ::mtm::event::Argument* Event::add_arguments() {
  // @@protoc_insertion_point(field_add:mtm.event.Event.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >*
Event::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:mtm.event.Event.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mtm::event::Argument >&
Event::arguments() const {
  // @@protoc_insertion_point(field_list:mtm.event.Event.arguments)
  return arguments_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mtm_2fevent_2fevent_2eproto__INCLUDED
