// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/event/argument_descriptor.proto

#ifndef PROTOBUF_INCLUDED_mtm_2fevent_2fargument_5fdescriptor_2eproto
#define PROTOBUF_INCLUDED_mtm_2fevent_2fargument_5fdescriptor_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "mtm/common_types.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mtm_2fevent_2fargument_5fdescriptor_2eproto 

namespace protobuf_mtm_2fevent_2fargument_5fdescriptor_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mtm_2fevent_2fargument_5fdescriptor_2eproto
namespace mtm {
namespace event {
class ArgumentDescriptor;
class ArgumentDescriptorDefaultTypeInternal;
extern ArgumentDescriptorDefaultTypeInternal _ArgumentDescriptor_default_instance_;
}  // namespace event
}  // namespace mtm
namespace google {
namespace protobuf {
template<> ::mtm::event::ArgumentDescriptor* Arena::CreateMaybeMessage<::mtm::event::ArgumentDescriptor>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mtm {
namespace event {

// ===================================================================

class ArgumentDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.event.ArgumentDescriptor) */ {
 public:
  ArgumentDescriptor();
  virtual ~ArgumentDescriptor();

  ArgumentDescriptor(const ArgumentDescriptor& from);

  inline ArgumentDescriptor& operator=(const ArgumentDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArgumentDescriptor(ArgumentDescriptor&& from) noexcept
    : ArgumentDescriptor() {
    *this = ::std::move(from);
  }

  inline ArgumentDescriptor& operator=(ArgumentDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgumentDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArgumentDescriptor* internal_default_instance() {
    return reinterpret_cast<const ArgumentDescriptor*>(
               &_ArgumentDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ArgumentDescriptor* other);
  friend void swap(ArgumentDescriptor& a, ArgumentDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArgumentDescriptor* New() const final {
    return CreateMaybeMessage<ArgumentDescriptor>(NULL);
  }

  ArgumentDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ArgumentDescriptor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ArgumentDescriptor& from);
  void MergeFrom(const ArgumentDescriptor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArgumentDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.StringValue description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  private:
  const ::google::protobuf::StringValue& _internal_description() const;
  public:
  const ::google::protobuf::StringValue& description() const;
  ::google::protobuf::StringValue* release_description();
  ::google::protobuf::StringValue* mutable_description();
  void set_allocated_description(::google::protobuf::StringValue* description);

  // .mtm.TypeUrl type_url = 10;
  bool has_type_url() const;
  void clear_type_url();
  static const int kTypeUrlFieldNumber = 10;
  private:
  const ::mtm::TypeUrl& _internal_type_url() const;
  public:
  const ::mtm::TypeUrl& type_url() const;
  ::mtm::TypeUrl* release_type_url();
  ::mtm::TypeUrl* mutable_type_url();
  void set_allocated_type_url(::mtm::TypeUrl* type_url);

  // bool optional = 3;
  void clear_optional();
  static const int kOptionalFieldNumber = 3;
  bool optional() const;
  void set_optional(bool value);

  // @@protoc_insertion_point(class_scope:mtm.event.ArgumentDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::StringValue* description_;
  ::mtm::TypeUrl* type_url_;
  bool optional_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mtm_2fevent_2fargument_5fdescriptor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArgumentDescriptor

// string name = 1;
inline void ArgumentDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArgumentDescriptor::name() const {
  // @@protoc_insertion_point(field_get:mtm.event.ArgumentDescriptor.name)
  return name_.GetNoArena();
}
inline void ArgumentDescriptor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.event.ArgumentDescriptor.name)
}
#if LANG_CXX11
inline void ArgumentDescriptor::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mtm.event.ArgumentDescriptor.name)
}
#endif
inline void ArgumentDescriptor::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.event.ArgumentDescriptor.name)
}
inline void ArgumentDescriptor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.event.ArgumentDescriptor.name)
}
inline ::std::string* ArgumentDescriptor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mtm.event.ArgumentDescriptor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArgumentDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:mtm.event.ArgumentDescriptor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArgumentDescriptor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mtm.event.ArgumentDescriptor.name)
}

// .google.protobuf.StringValue description = 2;
inline bool ArgumentDescriptor::has_description() const {
  return this != internal_default_instance() && description_ != NULL;
}
inline const ::google::protobuf::StringValue& ArgumentDescriptor::_internal_description() const {
  return *description_;
}
inline const ::google::protobuf::StringValue& ArgumentDescriptor::description() const {
  const ::google::protobuf::StringValue* p = description_;
  // @@protoc_insertion_point(field_get:mtm.event.ArgumentDescriptor.description)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* ArgumentDescriptor::release_description() {
  // @@protoc_insertion_point(field_release:mtm.event.ArgumentDescriptor.description)
  
  ::google::protobuf::StringValue* temp = description_;
  description_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* ArgumentDescriptor::mutable_description() {
  
  if (description_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.ArgumentDescriptor.description)
  return description_;
}
inline void ArgumentDescriptor::set_allocated_description(::google::protobuf::StringValue* description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(description_);
  }
  if (description) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(description)->GetArena();
    if (message_arena != submessage_arena) {
      description = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:mtm.event.ArgumentDescriptor.description)
}

// bool optional = 3;
inline void ArgumentDescriptor::clear_optional() {
  optional_ = false;
}
inline bool ArgumentDescriptor::optional() const {
  // @@protoc_insertion_point(field_get:mtm.event.ArgumentDescriptor.optional)
  return optional_;
}
inline void ArgumentDescriptor::set_optional(bool value) {
  
  optional_ = value;
  // @@protoc_insertion_point(field_set:mtm.event.ArgumentDescriptor.optional)
}

// .mtm.TypeUrl type_url = 10;
inline bool ArgumentDescriptor::has_type_url() const {
  return this != internal_default_instance() && type_url_ != NULL;
}
inline const ::mtm::TypeUrl& ArgumentDescriptor::_internal_type_url() const {
  return *type_url_;
}
inline const ::mtm::TypeUrl& ArgumentDescriptor::type_url() const {
  const ::mtm::TypeUrl* p = type_url_;
  // @@protoc_insertion_point(field_get:mtm.event.ArgumentDescriptor.type_url)
  return p != NULL ? *p : *reinterpret_cast<const ::mtm::TypeUrl*>(
      &::mtm::_TypeUrl_default_instance_);
}
inline ::mtm::TypeUrl* ArgumentDescriptor::release_type_url() {
  // @@protoc_insertion_point(field_release:mtm.event.ArgumentDescriptor.type_url)
  
  ::mtm::TypeUrl* temp = type_url_;
  type_url_ = NULL;
  return temp;
}
inline ::mtm::TypeUrl* ArgumentDescriptor::mutable_type_url() {
  
  if (type_url_ == NULL) {
    auto* p = CreateMaybeMessage<::mtm::TypeUrl>(GetArenaNoVirtual());
    type_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mtm.event.ArgumentDescriptor.type_url)
  return type_url_;
}
inline void ArgumentDescriptor::set_allocated_type_url(::mtm::TypeUrl* type_url) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_url_);
  }
  if (type_url) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type_url = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type_url, submessage_arena);
    }
    
  } else {
    
  }
  type_url_ = type_url;
  // @@protoc_insertion_point(field_set_allocated:mtm.event.ArgumentDescriptor.type_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mtm_2fevent_2fargument_5fdescriptor_2eproto
