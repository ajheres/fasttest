// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtm/envelope.proto

#ifndef PROTOBUF_mtm_2fenvelope_2eproto__INCLUDED
#define PROTOBUF_mtm_2fenvelope_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace mtm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mtm_2fenvelope_2eproto();
void protobuf_AssignDesc_mtm_2fenvelope_2eproto();
void protobuf_ShutdownFile_mtm_2fenvelope_2eproto();

class Envelope;

// ===================================================================

class Envelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mtm.Envelope) */ {
 public:
  Envelope();
  virtual ~Envelope();

  Envelope(const Envelope& from);

  inline Envelope& operator=(const Envelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Envelope& default_instance();

  enum ContentCase {
    kMessage = 7,
    kBlob = 8,
    CONTENT_NOT_SET = 0,
  };

  void Swap(Envelope* other);

  // implements Message ----------------------------------------------

  inline Envelope* New() const { return New(NULL); }

  Envelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Envelope& from);
  void MergeFrom(const Envelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Envelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* mutable_time();
  ::google::protobuf::Timestamp* release_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);

  // optional uint32 key_id = 2;
  void clear_key_id();
  static const int kKeyIdFieldNumber = 2;
  ::google::protobuf::uint32 key_id() const;
  void set_key_id(::google::protobuf::uint32 value);

  // optional uint32 key_server_id = 3;
  void clear_key_server_id();
  static const int kKeyServerIdFieldNumber = 3;
  ::google::protobuf::uint32 key_server_id() const;
  void set_key_server_id(::google::protobuf::uint32 value);

  // optional uint32 key_seq_no = 4;
  void clear_key_seq_no();
  static const int kKeySeqNoFieldNumber = 4;
  ::google::protobuf::uint32 key_seq_no() const;
  void set_key_seq_no(::google::protobuf::uint32 value);

  // optional uint32 source_id = 5;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 5;
  ::google::protobuf::uint32 source_id() const;
  void set_source_id(::google::protobuf::uint32 value);

  // optional uint32 checksum = 6;
  void clear_checksum();
  static const int kChecksumFieldNumber = 6;
  ::google::protobuf::uint32 checksum() const;
  void set_checksum(::google::protobuf::uint32 value);

  // optional .google.protobuf.Any message = 7;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 7;
  const ::google::protobuf::Any& message() const;
  ::google::protobuf::Any* mutable_message();
  ::google::protobuf::Any* release_message();
  void set_allocated_message(::google::protobuf::Any* message);

  // optional bytes blob = 8;
  private:
  bool has_blob() const;
  public:
  void clear_blob();
  static const int kBlobFieldNumber = 8;
  const ::std::string& blob() const;
  void set_blob(const ::std::string& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  ::std::string* mutable_blob();
  ::std::string* release_blob();
  void set_allocated_blob(::std::string* blob);

  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:mtm.Envelope)
 private:
  inline void set_has_message();
  inline void set_has_blob();

  inline bool has_content() const;
  void clear_content();
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Timestamp* time_;
  ::google::protobuf::uint32 key_id_;
  ::google::protobuf::uint32 key_server_id_;
  ::google::protobuf::uint32 key_seq_no_;
  ::google::protobuf::uint32 source_id_;
  ::google::protobuf::uint32 checksum_;
  union ContentUnion {
    ContentUnion() {}
    ::google::protobuf::Any* message_;
    ::google::protobuf::internal::ArenaStringPtr blob_;
  } content_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_mtm_2fenvelope_2eproto();
  friend void protobuf_AssignDesc_mtm_2fenvelope_2eproto();
  friend void protobuf_ShutdownFile_mtm_2fenvelope_2eproto();

  void InitAsDefaultInstance();
  static Envelope* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Envelope

// optional .google.protobuf.Timestamp time = 1;
inline bool Envelope::has_time() const {
  return !_is_default_instance_ && time_ != NULL;
}
inline void Envelope::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) delete time_;
  time_ = NULL;
}
inline const ::google::protobuf::Timestamp& Envelope::time() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::google::protobuf::Timestamp* Envelope::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:mtm.Envelope.time)
  return time_;
}
inline ::google::protobuf::Timestamp* Envelope::release_time() {
  // @@protoc_insertion_point(field_release:mtm.Envelope.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
inline void Envelope::set_allocated_time(::google::protobuf::Timestamp* time) {
  delete time_;
  if (time != NULL && time->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_time = new ::google::protobuf::Timestamp;
    new_time->CopyFrom(*time);
    time = new_time;
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.Envelope.time)
}

// optional uint32 key_id = 2;
inline void Envelope::clear_key_id() {
  key_id_ = 0u;
}
inline ::google::protobuf::uint32 Envelope::key_id() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.key_id)
  return key_id_;
}
inline void Envelope::set_key_id(::google::protobuf::uint32 value) {
  
  key_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.Envelope.key_id)
}

// optional uint32 key_server_id = 3;
inline void Envelope::clear_key_server_id() {
  key_server_id_ = 0u;
}
inline ::google::protobuf::uint32 Envelope::key_server_id() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.key_server_id)
  return key_server_id_;
}
inline void Envelope::set_key_server_id(::google::protobuf::uint32 value) {
  
  key_server_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.Envelope.key_server_id)
}

// optional uint32 key_seq_no = 4;
inline void Envelope::clear_key_seq_no() {
  key_seq_no_ = 0u;
}
inline ::google::protobuf::uint32 Envelope::key_seq_no() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.key_seq_no)
  return key_seq_no_;
}
inline void Envelope::set_key_seq_no(::google::protobuf::uint32 value) {
  
  key_seq_no_ = value;
  // @@protoc_insertion_point(field_set:mtm.Envelope.key_seq_no)
}

// optional uint32 source_id = 5;
inline void Envelope::clear_source_id() {
  source_id_ = 0u;
}
inline ::google::protobuf::uint32 Envelope::source_id() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.source_id)
  return source_id_;
}
inline void Envelope::set_source_id(::google::protobuf::uint32 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:mtm.Envelope.source_id)
}

// optional uint32 checksum = 6;
inline void Envelope::clear_checksum() {
  checksum_ = 0u;
}
inline ::google::protobuf::uint32 Envelope::checksum() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.checksum)
  return checksum_;
}
inline void Envelope::set_checksum(::google::protobuf::uint32 value) {
  
  checksum_ = value;
  // @@protoc_insertion_point(field_set:mtm.Envelope.checksum)
}

// optional .google.protobuf.Any message = 7;
inline bool Envelope::has_message() const {
  return content_case() == kMessage;
}
inline void Envelope::set_has_message() {
  _oneof_case_[0] = kMessage;
}
inline void Envelope::clear_message() {
  if (has_message()) {
    delete content_.message_;
    clear_has_content();
  }
}
inline  const ::google::protobuf::Any& Envelope::message() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.message)
  return has_message()
      ? *content_.message_
      : ::google::protobuf::Any::default_instance();
}
inline ::google::protobuf::Any* Envelope::mutable_message() {
  if (!has_message()) {
    clear_content();
    set_has_message();
    content_.message_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:mtm.Envelope.message)
  return content_.message_;
}
inline ::google::protobuf::Any* Envelope::release_message() {
  // @@protoc_insertion_point(field_release:mtm.Envelope.message)
  if (has_message()) {
    clear_has_content();
    ::google::protobuf::Any* temp = content_.message_;
    content_.message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_message(::google::protobuf::Any* message) {
  clear_content();
  if (message) {
    set_has_message();
    content_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.Envelope.message)
}

// optional bytes blob = 8;
inline bool Envelope::has_blob() const {
  return content_case() == kBlob;
}
inline void Envelope::set_has_blob() {
  _oneof_case_[0] = kBlob;
}
inline void Envelope::clear_blob() {
  if (has_blob()) {
    content_.blob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const ::std::string& Envelope::blob() const {
  // @@protoc_insertion_point(field_get:mtm.Envelope.blob)
  if (has_blob()) {
    return content_.blob_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Envelope::set_blob(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mtm.Envelope.blob)
  if (!has_blob()) {
    clear_content();
    set_has_blob();
    content_.blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mtm.Envelope.blob)
}
inline void Envelope::set_blob(const char* value) {
  if (!has_blob()) {
    clear_content();
    set_has_blob();
    content_.blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mtm.Envelope.blob)
}
inline void Envelope::set_blob(const void* value, size_t size) {
  if (!has_blob()) {
    clear_content();
    set_has_blob();
    content_.blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.blob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mtm.Envelope.blob)
}
inline ::std::string* Envelope::mutable_blob() {
  if (!has_blob()) {
    clear_content();
    set_has_blob();
    content_.blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:mtm.Envelope.blob)
  return content_.blob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Envelope::release_blob() {
  // @@protoc_insertion_point(field_release:mtm.Envelope.blob)
  if (has_blob()) {
    clear_has_content();
    return content_.blob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Envelope::set_allocated_blob(::std::string* blob) {
  if (!has_blob()) {
    content_.blob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_content();
  if (blob != NULL) {
    set_has_blob();
    content_.blob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        blob);
  }
  // @@protoc_insertion_point(field_set_allocated:mtm.Envelope.blob)
}

inline bool Envelope::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Envelope::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline Envelope::ContentCase Envelope::content_case() const {
  return Envelope::ContentCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mtm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mtm_2fenvelope_2eproto__INCLUDED
